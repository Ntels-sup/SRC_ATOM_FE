<?xml version="1.0" encoding="UTF-8" ?>
 <!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ntels.avocado.dao.atom.login.LoginMapper">

	<resultMap id="userResult" type="com.ntels.avocado.domain.atom.login.LoginDomain">
		<result property="userId" 			column="USER_ID" />
		<result property="sessionId" 		column="SESSION_ID" />
		<result property="groupNo" 			column="GROUP_NO" />
		<result property="levelId" 			column="LEVEL_ID" />
		<result property="userName" 		column="USER_NAME" />
		<result property="userEmail" 		column="USER_EMAIL" />
		<result property="userPhone" 		column="USER_PHONE" />
		<result property="lastLoginDate" 	column="LAST_LOGIN_DATE" />
		<result property="status" 			column="STATUS" />
		<result property="retryCount"		column="RETRY_COUNT" />
		<result property="groupName" 		column="GROUP_NAME" />
		<result property="levelName" 		column="LEVEL_NAME" />
		<result property="sessionId" 		column="SESSION_ID" />
		<result property="loginType" 		column="LOGIN_TYPE" />
		<result property="loginCount" 		column="LOGIN_COUNT" />
		<result property="lockType" 		column="LOCK_TYPE" />
		<result property="lockTime" 		column="LOCK_TIME" />
		<result property="passwdExfire" 	column="PASSWD_EXFIRE" />
		<result property="accountExfire"	column="ACCOUNT_EXFIRE" />
		<result property="absentLockDay"	column="ABSENT_LOCK_DAY" />
		<result property="absentLock"		column="ABSENT_LOCK" />
		<result property="defaultPasswdYn"	column="DEFAULT_PASSWD_YN" />
		<result property="passwdLifeCycle"	column="PASSWD_LIFE_CYCLE" />
	</resultMap>
	
	<resultMap id="ipBandwidthResult" type="com.ntels.avocado.domain.atom.login.IpBandwidth">
		<result property="ipManagerNo" 		column="IP_MANAGER_NO" />
		<result property="ip" 				column="IP" />
		<result property="maxSimult" 		column="MAX_SIMULT" />
		<result property="allowYn" 			column="ALLOW_YN" />
		<result property="description" 		column="DESCRIPTION" />
		<result property="sessionCnt" 		column="SESSION_CNT" />
	</resultMap>
	
	<!-- 
		* 유저 아이디 존재 유무
	-->
	<select id="countUser" parameterType="string" resultType="int">
        SELECT /* LoginMapper.countUser */ 
               COUNT(*)
            FROM TAT_USER
           WHERE BINARY(USER_ID) = #{userId}
    </select>
    
	<!-- 
		* 접속 유저 수 
	-->
    <select id="countLoginSession" resultType="int">
        SELECT /* LoginMapper.countLoginSession */ 
               COUNT(*)
            FROM TAT_USER_SESSION
           WHERE STATUS 			= 'Y' /* 현재 로그인한 사용자 */
             AND TYPE  				= 0
    </select>
    
    <!-- 
    	* 사용자 계정 잠김 여부 조회
    -->
    <select id="searchAccountLock" parameterType="string" resultType="string">
        SELECT /* LoginMapper.searchAccountLock */ 
               STATUS
            FROM TAT_USER
           WHERE BINARY(USER_ID) = #{userId}
    </select>
    
    <!-- 
    	* 사용자 계정의 로그인 세션이 유효한지 검사
    -->
    <select id="isValidUser" parameterType="string" resultType="string">
		SELECT /* LoginMapper.isValidUser */ 
		       IFNULL(MAX(STATUS),'N')
		  FROM TAT_USER_SESSION				US
		 WHERE 1=1
		   AND US.USER_ID					= #{userId}
		   AND US.SESSION_ID				= #{sessionId}   
		   AND US.TYPE						= '0'
    </select>
    
    <select id="searchUserInfo" parameterType="string" resultMap="userResult">
        SELECT /* LoginMapper.searchUserInfo */ 
               TU.LAST_LOGIN_DATE
             , TU.RETRY_COUNT /* 로그인 재시도 횟수  */
             , TUL.LOCK_TYPE
             , TUL.LOCK_TIME
          FROM TAT_USER				TU
             , TAT_USER_LEVEL		TUL
         WHERE 1=1
           AND BINARY(TU.USER_ID) 	= #{userId}
           AND TU.LEVEL_ID			= TUL.LEVEL_ID
    </select>
     
	<!-- 
		* 사용자 정보 조회
		-->
    <select 
    	id="searchLoginUserInfo" parameterType="string" resultMap="userResult">
        SELECT /* LoginMapper.searchLoginUserInfo */
               A.USER_ID
             , A.USER_NAME
             , A.GROUP_NO
             , (SELECT GROUP_NAME 
                    FROM TAT_USER_GROUP 
                   WHERE GROUP_NO = A.GROUP_NO) 	AS GROUP_NAME
             , (SELECT LEVEL_TITLE 
                    FROM TAT_USER_LEVEL
                   WHERE LEVEL_ID = A.LEVEL_ID) 	AS LEVEL_NAME
             , A.LEVEL_ID
             , A.RETRY_COUNT
             , A.LAST_LOGIN_DATE
             , A.STATUS
             , IFNULL(B.LOCK_TYPE,'M')				LOCK_TYPE
             , IFNULL(B.ABSENT_LOCK_DAY,10*365)		AS ABSENT_LOCK_DAY
             , CASE WHEN 
             	DATE_ADD(IFNULL(A.LAST_LOGIN_DATE,NOW()), INTERVAL IFNULL(B.ABSENT_LOCK_DAY,10*365) DAY) <![CDATA[<]]> NOW()
             		THEN 'L'
             		ELSE 'Y'
               END									ABSENT_LOCK 
             , A.DEFAULT_PASSWD_YN  
             , B.PASSWD_LIFE_CYCLE
          FROM TAT_USER 							A
             , TAT_USER_LEVEL						B 
         WHERE 1=1
           AND BINARY(A.USER_ID) 					= #{userId}
           AND A.PASSWD  							= #{password}
           AND A.STATUS 							= 'Y' /* Y:정상, N:삭제, L:계정잠금(LOCK) */
           AND A.LEVEL_ID							= B.LEVEL_ID
            /* AND A.USER_FLAG = 'Y' */
    </select>
	
	<!-- 
		* 중복 접속 유저인지 조회
		 -->
	<select id="searchLoginSessionUser" parameterType="string" resultMap="userResult">
        SELECT /* LoginMapper.searchLoginSessionUser */
               U.USER_ID
             , IFNULL(U.LOGIN_TYPE,1)		LOGIN_TYPE
             , IFNULL(U.LOGIN_COUNT,0)		LOGIN_COUNT   
             , U.STATUS    
             , U.RETRY_COUNT   
             , U.PASSWD_EXFIRE
             , U.ACCOUNT_EXFIRE
             , UL.LOCK_TYPE
          FROM TAT_USER						U
             , TAT_USER_LEVEL				UL
         WHERE 1=1
           AND BINARY(U.USER_ID) 			= #{userId}
           AND U.LEVEL_ID					= UL.LEVEL_ID
           /* "접속 경로(DEFAULT은  '0')
			- 웹(client) '0', 커맨트 CLI(=서버) '1'
			- 웹(client)만 강제 종료 가능"
            */
    </select>
     
    <!-- 
    	*  User 테이블에 마지막 날짜 업데이트
    --> 
    <update id="updateLastLoginDate" parameterType="string">
        UPDATE /* LoginMapper.updateLastLoginDate */
               TAT_USER 
           SET LAST_LOGIN_DATE 	= NOW()
             , LOGIN_COUNT		= LOGIN_COUNT + 1
             , LAST_LOGIN_IP	= #{remoteAddress}
         WHERE BINARY(USER_ID) 	= #{userId}
    </update>
	
	<!-- 
    	*  User 테이블에 LOGIN_FAIL_COUNT 0 으로 업데이트
    	--> 
    <update id="updateZeroLoginFailCount" parameterType="string">
        UPDATE /* LoginMapper.updateZeroLoginFailCount */
               TAT_USER 
           SET RETRY_COUNT = 0
             , LAST_LOGIN_DATE 		= NOW()
         WHERE 1=1
           AND BINARY(USER_ID) 		= #{userId}
    </update>
	
	<!-- 
    	*  User 테이블에 LOGIN_FAIL_COUNT 0 으로 업데이트
    	--> 
    <update id="updatePassword" parameterType="string">
        UPDATE /* LoginMapper.updatePassword */
               TAT_USER 
           SET PASSWD 				= #{passwd}
             , DEFAULT_PASSWD_YN	= 'N'
             , PASSWD_EXFIRE		= DATE_FORMAT( 
										DATE_ADD(NOW(), INTERVAL #{passwdLifeCycle} DAY )
             							,'%Y%m%d')
         WHERE 1=1
           AND BINARY(USER_ID) 		= #{userId}
           
           
    </update>
    <!-- AND DATE_FORMAT(DATE_ADD(PASSWD_EXFIRE,INTERVAL - (SELECT PASSWD_NOTI_DAY FROM TAT_USER_LEVEL WHERE LEVEL_ID = (SELECT X.LEVEL_ID FROM TAT_USER X WHERE X.USER_ID = #{userId})) DAY), '%Y%m%d') <![CDATA[<]]> DATE_FORMAT(NOW(), '%Y%m%d') -->
	<!-- 
		* 로그인 실패 카운터 업데이트
	-->
    <update id="updateLoginFailCount" parameterType="string">
        UPDATE /* LoginMapper.updateLoginFailCount */
               TAT_USER 
           SET RETRY_COUNT 			= RETRY_COUNT + 1
         WHERE 1=1
           AND BINARY(USER_ID) 		= #{userId}
    </update>
    
	<!-- 
		* 로그인 실패 카운터 업데이트
	-->
    <update id="updateLoginFailCountDate" parameterType="string">
        UPDATE /* LoginMapper.updateLoginFailCount */
               TAT_USER 
           SET RETRY_COUNT 			= RETRY_COUNT + 1
             , LAST_LOGIN_DATE 		= NOW()
         WHERE 1=1
           AND BINARY(USER_ID) 		= #{userId}
    </update>
	
	<!-- 
		* 패스워드 만료 컬럼 널(null)여부 체크
		 -->
	<select id="countNullPasswordDate" parameterType="string" resultType="int">
        SELECT /* LoginMapper.countNullPasswordDate */ 
               COUNT(*)
          FROM TAT_USER
         WHERE BINARY(USER_ID) = #{userId}
           AND (TRIM(PASSWD_EXFIRE) IS NULL OR TRIM(PASSWD_EXFIRE) = '')
    </select>
    
	<!-- 
		* 패스워드 기한 만료
		 -->
    <select id="countNotiPasswordDate" parameterType="string" resultType="int">
        SELECT /* LoginMapper.countNotiPasswordDate */ 
               COUNT(*)
          FROM TAT_USER
         WHERE BINARY(USER_ID) = #{userId}
           AND DATE_FORMAT(DATE_ADD(PASSWD_EXFIRE,INTERVAL - (SELECT PASSWD_NOTI_DAY FROM TAT_USER_LEVEL WHERE LEVEL_ID = (SELECT X.LEVEL_ID FROM TAT_USER X WHERE X.USER_ID = #{userId})) DAY), '%Y%m%d') <![CDATA[<]]> DATE_FORMAT(NOW(), '%Y%m%d')
    </select>
	
	<!-- 
		* 계정 만료 컬럼 널(null)여부 체크
		 -->
	<select id="countNullAccountDate" parameterType="string" resultType="int">
        SELECT /* LoginMapper.countNullAccountDate */ 
               COUNT(*)
          FROM TAT_USER
         WHERE BINARY(USER_ID) = #{userId}
           AND (TRIM(ACCOUNT_EXFIRE) IS NULL OR TRIM(ACCOUNT_EXFIRE) = '')
    </select>
    
	<!-- 
		* 계정 기한 만료
	-->
    <select id="countOverAccountDate" parameterType="string" resultType="int">
        SELECT /* LoginMapper.countOverAccountDate */ 
               COUNT(*)
          FROM TAT_USER
         WHERE BINARY(USER_ID) = #{userId}
           AND DATE_FORMAT(ACCOUNT_EXFIRE, '%Y%m%d') <![CDATA[<]]> DATE_FORMAT(NOW(), '%Y%m%d')
    </select>
    
    <!-- 
    	* 계정 만료전 노티 해줌
    -->
    <select id="countNotiAccountDate" parameterType="string" resultType="int">
        SELECT /* LoginMapper.countNotiAccountDate */ 
               COUNT(*)
          FROM TAT_USER
         WHERE BINARY(USER_ID) = #{userId}
           AND DATE_FORMAT(DATE_ADD(ACCOUNT_EXFIRE,INTERVAL - (SELECT ACCOUNT_NOTI_DAY FROM TAT_USER_LEVEL WHERE LEVEL_ID = (SELECT X.LEVEL_ID FROM TAT_USER X WHERE BINARY(X.USER_ID)=#{userId}) ) DAY), '%Y%m%d') <![CDATA[<]]> DATE_FORMAT(NOW(), '%Y%m%d')
    </select>
    
	<!-- 
		* 로그인 실패 카운터 조회
	-->
    <select id="searchLoginFailCount" parameterType="string" resultType="int">
        SELECT /* LoginMapper.searchLoginFailCount */ 
               IFNULL(MAX(RETRY_COUNT),-1) AS RETRY_COUNT
            FROM TAT_USER
           WHERE BINARY(USER_ID) = #{userId}
    </select>
    
	<!-- 
		*로그인 실패 최대 카운터 조회
	-->
    <select id="searchLoginFailLimit" parameterType="string" resultType="int">
        SELECT /* LoginMapper."searchLoginFailLimit" */ 
               IFNULL(MAX(MAX_WRONG_PASSWD),-1)
          FROM TAT_USER 		TU
             , TAT_USER_LEVEL	TUL  
         WHERE 1=1
           AND BINARY(USER_ID) 	= #{userId}
           AND TU.LEVEL_ID		= TUL.LEVEL_ID
    </select>

    <!-- 
    	* 계정 락을 건다 
    	-->
    <update id="updateAccountLock" parameterType="string">
        UPDATE /* LoginMapper.updateAccountLock */ 
               TAT_USER 
           SET STATUS 				= #{status}
             , STATUS_REASON		= #{statusReason}
             , LAST_LOGIN_DATE 		= NOW()
         WHERE BINARY(USER_ID) 		= #{userId}
    </update>
     
    <!-- 
    	* 세션 유저 상태값 조회
     	-->
    <select id="countLoginSessionUser" parameterType="string" resultType="int">
        SELECT /* LoginMapper.countLoginSessionUser */ 
               COUNT(*)            
            FROM TAT_USER_SESSION
           WHERE BINARY(USER_ID) 	= #{userId}
             AND SESSION_ID 		= #{sessionId}
             AND GATEWAY_IP 		= #{remoteAddress} /*접속중인 IP*/
             AND TYPE 				= 0	/* 접속경로 0:웹, 1:CLI, 웹(0)만 강제종료 가능 */ 
             AND STATUS				= 'Y'
    </select>     
    
    <!-- 
		* 세션 유저 상태값 입력
	--> 
    <update id="insertLoginSessionUser" 
            parameterType="com.ntels.avocado.domain.atom.login.LoginDomain">
        INSERT /* LoginMapper.insertLoginSessionUser */ 
               INTO TAT_USER_SESSION (
             USER_ID
           , SESSION_ID
           , GATEWAY_IP
           , STATUS  
           , CNT  
           , TYPE
           , IP_BANDWIDTH
        ) VALUES (
             #{userId}
           , #{sessionId}
           , #{gatewayIp}
           , #{status}
           , #{cnt}
           , #{type}
           , #{ipBandwidth}
        )
    </update>      
	
	<!-- 
		* 세션 유저 상태값 업데이트
	-->
    <update id="updateLoginSessionUser" parameterType="com.ntels.avocado.domain.atom.login.LoginDomain">
        UPDATE /* LoginMapper.updateLoginSessionUser */ 
               TAT_USER_SESSION SET
            STATUS = #{status}
           WHERE BINARY(USER_ID) = #{userId}
             AND GATEWAY_IP = #{gatewayIp}
             AND SESSION_ID = #{sessionId}
             AND TYPE = 0
    </update>      
	
	<!-- 
		* 세션 유저 로그아웃 처리
	-->
    <update id="destoryLogin" parameterType="com.ntels.avocado.domain.atom.login.LoginDomain">
        UPDATE /* LoginMapper.userDestoryHistory */ 
               TAT_USER_SESSION 
           SET STATUS = 'N'
         WHERE BINARY(USER_ID) 	= #{userId}
           AND SESSION_ID 		= #{sessionId}
           AND TYPE 			= 0
    </update>    
	
	<!-- 
		* 계정 만료 남은 일수 조회
		 -->
	<select id="searchAccountDueDate" parameterType="string" resultType="int">
		SELECT /* LoginMapper.searchAccountDueDate */ 
               IFNULL(D_DAY, 0) + 1
		    FROM (SELECT TO_DAYS(DATE_FORMAT(ACCOUNT_EXFIRE, '%Y%m%d')) - TO_DAYS(NOW()) AS D_DAY
                      FROM TAT_USER
                     WHERE BINARY(USER_ID) = #{userId}
                 )TBL           
    </select>
    
    <!-- 
    	* 패스워드 만료 남은 일수 조회
    	 -->
    <select id="searchPasswordDueDate" parameterType="string" resultType="int">
    	SELECT /* LoginMapper.searchPasswordDueDate */ 
               IFNULL(D_DAY, 0) + 1
		    FROM (SELECT TO_DAYS(DATE_FORMAT(PASSWD_EXFIRE, '%Y%m%d')) - TO_DAYS(NOW()) AS D_DAY
                      FROM TAT_USER
                     WHERE BINARY(USER_ID) = #{userId}
                 )TBL 
    </select>
	
	<!-- 메뉴 권한 조회 -->
	<select id="authMenu" resultType="int">
		SELECT /* LoginMapper.authMenu */ 
               COUNT(*)
		    FROM (SELECT MENU_ID 
		              FROM TAT_MENU 
		             WHERE MENU_PATH LIKE CONCAT('%', #{url})
		         ) A
		       , TAT_PRIVILEGE B 
		   WHERE A.MENU_ID = B.MENU_ID
             AND B.LEVEL_ID = #{levelId}
	</select>
	
	<!-- 패스워드 오류로 LOCK된 후 LOCK_TIME이 지나면 Y, 아직 지나지 않았으면 L -->
	<select id="validLockTime" resultType="string">
		SELECT /* LoginMapper.validLockTime */ 
		       CASE WHEN TU.LAST_LOGIN_DATE <![CDATA[<]]> DATE_ADD(NOW(), INTERVAL -1*TUL.LOCK_TIME MINUTE)
					THEN 'Y' 	/* 시간 경과됨 */
					ELSE 'L' 	/* 시간 경과안됨 */
				 END 	
		  FROM TAT_USER				TU
		     , TAT_USER_LEVEL		TUL
		 WHERE 1=1
		   AND TU.USER_ID			= #{userId}		 
		   AND TU.LEVEL_ID			= TUL.LEVEL_ID
	</select>
	
	<!-- 
		* 아이피 대역 리스트
	-->
	<select id="listIpBandwidth" parameterType="string" resultMap="ipBandwidthResult">
        SELECT /* LoginMapper.listIpBandwidth */ 
               IP_MANAGER_NO
             , IP
             , ALLOW_YN
             , MAX_SIMULT
             , DESCRIPTION
		     , ( SELECT COUNT(1)
		           FROM TAT_USER_SESSION
		          WHERE IP_BANDWIDTH 	= IP
		            AND STATUS			= 'Y'
		       ) 						SESSION_CNT
          FROM TAT_IP_MANAGER
         WHERE 1=1
           AND ALLOW_YN					= #{allowYn}
    </select>
	
	
	
	
	
	<!-- 
		* JUnit 테스트를 위한 TAT_USER update
		* 테스트하는 쪽에서 auto rollback 되어야 함.
	-->
    <update id="updateTATUSERForTest" parameterType="com.ntels.avocado.domain.atom.login.LoginDomain">
        UPDATE /* LoginMapper.updateTATUSERForTest */ 
               TAT_USER 
           SET USER_NAME		= USER_NAME
             <if test="status != null and status != ''">
             , STATUS			= #{status}
             </if>
             <if test="retryCount != null">
             , RETRY_COUNT		= #{retryCount}
             </if>
             <if test="loginType != null and loginType != ''">
             , LOGIN_TYPE		= #{loginType}
             </if>
             <if test="loginType != null and loginType != ''">
             , LOGIN_COUNT		= #{loginCount}
             </if>
             <if test="accountExfire != null and accountExfire != ''">
             , ACCOUNT_EXFIRE	= DATE_FORMAT(DATE_ADD(NOW(), INTERVAL #{accountExfire} DAY),'%Y%m%d')
             </if>
             <if test="passwdExfire != null and passwdExfire != ''">
             , PASSWD_EXFIRE	= DATE_FORMAT(DATE_ADD(NOW(), INTERVAL #{passwdExfire} DAY),'%Y%m%d')
             </if>
             <if test="lastLoginDate != null and lastLoginDate != ''">
             , LAST_LOGIN_DATE	= DATE_ADD(NOW(), INTERVAL -1*#{lastLoginDate} MINUTE)
             </if>
             <if test="defaultPasswdYn != null and defaultPasswdYn != ''">
             , DEFAULT_PASSWD_YN	= #{defaultPasswdYn}
             </if>
         WHERE BINARY(USER_ID) 	= #{userId}
    </update>  
    
    
	<!-- 
		* JUnit 테스트를 위한 TAT_USER_LEVEL update
		* 테스트하는 쪽에서 auto rollback 되어야 함.
	-->
    <update id="updateTATUSERLEVELForTest" parameterType="com.ntels.avocado.domain.atom.login.LoginDomain">
        UPDATE /* LoginMapper.updateTATUSERLEVELForTest */ 
               TAT_USER_LEVEL 
           SET LEVEL_TITLE 			= LEVEL_TITLE
             <if test="exfireNotiDay != null and exfireNotiDay != ''">
             , EXFIRE_NOTI_DAY		= #{exfireNotiDay}
             </if>
             <if test="passwdNotiDay != null and passwdNotiDay != ''">
             , PASSWD_NOTI_DAY		= #{passwdNotiDay}
             </if>
             <if test="maxWrongPasswd != null and maxWrongPasswd != ''">
             , MAX_WRONG_PASSWD		= #{maxWrongPasswd}
             </if>
             <if test="lockType != null and lockType != ''">
             , LOCK_TYPE			= #{lockType}
             </if>
             <if test="lockTime != null and lockTime != ''">
             , LOCK_TIME			= #{lockTime}
             </if>
             <if test="absentLockDay != null and absentLockDay != 0">
             , ABSENT_LOCK_DAY		= #{absentLockDay}
             </if>
         WHERE 1=1
           AND LEVEL_ID				= (SELECT LEVEL_ID FROM TAT_USER WHERE USER_ID = #{userId})
    </update>    
	
</mapper>
