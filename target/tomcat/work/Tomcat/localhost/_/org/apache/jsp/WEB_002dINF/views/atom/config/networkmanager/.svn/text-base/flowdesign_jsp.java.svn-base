/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2016-05-20 08:50:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.atom.config.networkmanager;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.ntels.avocado.domain.common.definitions.CodeDefinitions;

public final class flowdesign_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script src=\"/scripts/draw2d/shifty.js\"></script>\r\n");
      out.write("<script src=\"/scripts/draw2d/raphael.js\"></script>\r\n");
      out.write("<script src=\"/scripts/draw2d/jquery.autoresize.js\"></script>\r\n");
      out.write("<script src=\"/scripts/draw2d/jquery-touch_punch.js\"></script>\r\n");
      out.write("<script src=\"/scripts/draw2d/jquery.contextmenu.js\"></script>\r\n");
      out.write("<script src=\"/scripts/draw2d/rgbcolor.js\"></script>\r\n");
      out.write("<script src=\"/scripts/draw2d/canvg.js\"></script>\r\n");
      out.write("<script src=\"/scripts/draw2d/Class.js\"></script>\r\n");
      out.write("<script src=\"/scripts/draw2d/json2.js\"></script>\r\n");
      out.write("<script src=\"/scripts/draw2d/pathfinding-browser.min.js\"></script>\r\n");
      out.write("<script src=\"/scripts/draw2d/draw2d.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("#_atomLoadingDiv{z-index:6;opacity:1;position:relative;overflow:auto;width:100%;height:100%;margin:0px;padding:0px;border:none;text-align:left;}\r\n");
      out.write("#_atomFlowDesignDivWrapper{opacity:0;position:relative;overflow:auto;width:100%;height:100%;margin:0px;padding:0px;border:none;text-align:left;min-width:300px;min-height:100px;}\r\n");
      out.write("#_atomMinimapDivWrapper{position: absolute;left:calc(100% - 221px);top:calc(100% - 171px);width:200px;height:150px;margin:0px;padding:0px;border:1px solid rgb(0, 0, 0);overflow: hidden;text-align:left;}\r\n");
      out.write("#_atomMinimapDivWrapper.on{left:calc(100% - 531px);transition-duration:0.4s;}\r\n");
      out.write("#_atomMinimapDivWrapper.off{display:none !important;transition-duration:0.4s;}\r\n");
      out.write("#linkedNodeListDiv > div > span{width:44px;}\r\n");
      out.write(".main_content{margin-top:0px;margin:0px 0px 0px 0px;width:100%;}\r\n");
      out.write(".list .tbl_update td{overflow:hidden;text-overflow:ellipsis;}\r\n");
      out.write(".draw .properties #color6 + label:before {background:#a1a1a1;}\r\n");
      out.write(".draw .properties #color7 + label:before {background:#8ebf7c;}\r\n");
      out.write(".draw .properties #color8 + label:before {background:#74bed7;}\r\n");
      out.write(".draw .properties #color9 + label:before {background:#74a5d6;}\r\n");
      out.write(".draw .properties #color10 + label:before {background:#8f8fbf;}\r\n");
      out.write(".draw .properties #color11 + label:before {background:#8dbd13;}\r\n");
      out.write(".draw .properties #color12 + label:before {background:#3fba13;}\r\n");
      out.write(".draw .properties #color13 + label:before {background:#09b8b2;}\r\n");
      out.write(".draw .properties #color14 + label:before {background:#00a8f0;}\r\n");
      out.write(".draw .properties #color15 + label:before {background:#668cff;}\r\n");
      out.write(".draw .properties #color16 + label:before {background:#637599;}\r\n");
      out.write(".draw .properties #color17 + label:before {background:#7474a6;}\r\n");
      out.write(".draw .properties #color18 + label:before {background:#836b99;}\r\n");
      out.write(".draw .properties #color19 + label:before {background:#8c7377;}\r\n");
      out.write(".draw .properties #color20 + label:before {background:#7a756e;}\r\n");
      out.write(".draw .properties #icon1 + label:before {background-image:url('/images/icon/node_ap.svg');}\r\n");
      out.write(".draw .properties #icon2 + label:before {background-image:url('/images/icon/node_lb.svg');}\r\n");
      out.write(".draw .properties #icon3 + label:before {background-image:url('/images/icon/node_ocs.svg');}\r\n");
      out.write(".draw .properties #icon4 + label:before {background-image:url('/images/icon/node_ofcs.svg');}\r\n");
      out.write(".draw .properties #icon5 + label:before {background-image:url('/images/icon/node_tm.svg');}\r\n");
      out.write(".draw .properties #icon6 + label:before {background-color:#aaaaaa;background-image:url('/images/icon/link_bss.svg');}\r\n");
      out.write(".draw .properties #icon7 + label:before {background-color:#aaaaaa;background-image:url('/images/icon/link_cscf.svg');}\r\n");
      out.write(".draw .properties #icon8 + label:before {background-color:#aaaaaa;background-image:url('/images/icon/link_pgw.svg');}\r\n");
      out.write(".draw .properties #icon9 + label:before {background-color:#aaaaaa;background-image:url('/images/icon/link_tas.svg');}\r\n");
      out.write(".draw .properties #icon10 + label:before {background-color:#aaaaaa;background-image:url('/images/icon/link_ums.svg');}\r\n");
      out.write(".draw .properties #icon11 + label:before {background-image:url('/images/icon/p_agg.svg');}\r\n");
      out.write(".draw .properties #icon12 + label:before {background-image:url('/images/icon/p_ass.svg');}\r\n");
      out.write(".draw .properties #icon13 + label:before {background-image:url('/images/icon/p_cnv.svg');}\r\n");
      out.write(".draw .properties #icon14 + label:before {background-image:url('/images/icon/p_crr.svg');}\r\n");
      out.write(".draw .properties #icon15 + label:before {background-image:url('/images/icon/p_crt.svg');}\r\n");
      out.write(".draw .properties #icon16 + label:before {background-image:url('/images/icon/p_dco.svg');}\r\n");
      out.write(".draw .properties #icon17 + label:before {background-image:url('/images/icon/p_ddp.svg');}\r\n");
      out.write(".draw .properties #icon18 + label:before {background-image:url('/images/icon/p_dlb.svg');}\r\n");
      out.write(".draw .properties #icon19 + label:before {background-image:url('/images/icon/p_ftt.svg');}\r\n");
      out.write(".draw .properties #icon20 + label:before {background-image:url('/images/icon/p_gco.svg');}\r\n");
      out.write(".draw .properties #icon21 + label:before {background-image:url('/images/icon/p_glb.svg');}\r\n");
      out.write(".draw .properties #icon22 + label:before {background-image:url('/images/icon/p_nma.svg');}\r\n");
      out.write(".draw .properties #icon23 + label:before {background-image:url('/images/icon/p_nrd.svg');}\r\n");
      out.write(".draw .properties #icon24 + label:before {background-image:url('/images/icon/p_nwt.svg');}\r\n");
      out.write(".draw .properties #icon25 + label:before {background-image:url('/images/icon/p_par.svg');}\r\n");
      out.write(".draw .properties #icon26 + label:before {background-image:url('/images/icon/p_rtr.svg');}\r\n");
      out.write(".draw .properties #icon27 + label:before {background-image:url('/images/icon/p_spl.svg');}\r\n");
      out.write("</style>\r\n");
      out.write("<!-- svg 필터 (shadow 효과) -->\r\n");
      out.write("<svg height=\"140\" width=\"140\" style=\"position:absolute;left:-1000px;\">\r\n");
      out.write("\t<defs>\r\n");
      out.write("\t\t<filter id=\"AtomPkgFilter\">\r\n");
      out.write("\t\t\t<feOffset in=\"SourceAlpha\" dx=\"0\" dy=\"1\" result=\"AtomPkgOffset\" />\r\n");
      out.write("\t\t\t<feGaussianBlur in=\"AtomPkgOffset\" stdDeviation=\"2\"  result=\"AtomPkgBlur\"/>\r\n");
      out.write("\t\t\t<feColorMatrix in=\"AtomPkgBlur\" type=\"matrix\" values=\"0 0 0 0   0\r\n");
      out.write("\t\t\t\t0 0 0 0   0 \r\n");
      out.write("\t\t\t\t0 0 0 0   0 \r\n");
      out.write("\t\t\t\t0 0 0 .3 0\" result=\"AtomPkgColorMatrix\"/>\r\n");
      out.write("\t\t\t<feMerge>\r\n");
      out.write("\t\t\t\t<feMergeNode in=\"AtomPkgColorMatrix\" />\r\n");
      out.write("\t\t\t\t<feMergeNode in=\"SourceGraphic\" />\r\n");
      out.write("\t\t\t</feMerge>\r\n");
      out.write("\t\t</filter>\r\n");
      out.write("\t\t<filter id=\"AtomNodeFilter\" x=\"-10\" y=\"-10\" width=\"70\" height=\"70\">\r\n");
      out.write("\t\t\t<feOffset in=\"SourceAlpha\" dx=\"0\" dy=\"4\" result=\"AtomNodeOffset\" />\r\n");
      out.write("\t\t\t<feGaussianBlur in=\"AtomNodeOffset\" stdDeviation=\"5\"  result=\"AtomNodeBlur\"/>\r\n");
      out.write("\t\t\t<feColorMatrix in=\"AtomNodeBlur\" type=\"matrix\" values=\"0 0 0 0   0\r\n");
      out.write("\t\t\t\t0 0 0 0   0 \r\n");
      out.write("\t\t\t\t0 0 0 0   0 \r\n");
      out.write("\t\t\t\t0 0 0 .2 0\" result=\"AtomNodeColorMatrix\"/>\r\n");
      out.write("\t\t\t<feMerge>\r\n");
      out.write("\t\t\t\t<feMergeNode in=\"AtomNodeColorMatrix\" />\r\n");
      out.write("\t\t\t\t<feMergeNode in=\"SourceGraphic\" />\r\n");
      out.write("\t\t\t</feMerge>\r\n");
      out.write("\t\t</filter>\r\n");
      out.write("\t\t<filter id=\"AtomCountFilter\">\r\n");
      out.write("\t\t\t<feOffset in=\"SourceAlpha\" dx=\"0\" dy=\"2\" result=\"AtomCountOffset\" />\r\n");
      out.write("\t\t\t<feGaussianBlur in=\"AtomCountOffset\" stdDeviation=\"3\"  result=\"AtomCountBlur\"/>\r\n");
      out.write("\t\t\t<feColorMatrix in=\"AtomCountBlur\" type=\"matrix\" values=\"0 0 0 0   0\r\n");
      out.write("\t\t\t\t0 0 0 0   0 \r\n");
      out.write("\t\t\t\t0 0 0 0   0 \r\n");
      out.write("\t\t\t\t0 0 0 .2 0\" result=\"AtomCountColorMatrix\"/>\r\n");
      out.write("\t\t\t<feMerge>\r\n");
      out.write("\t\t\t\t<feMergeNode in=\"AtomCountColorMatrix\" />\r\n");
      out.write("\t\t\t\t<feMergeNode in=\"SourceGraphic\" />\r\n");
      out.write("\t\t\t</feMerge>\r\n");
      out.write("\t\t</filter>\r\n");
      out.write("\t</defs>\r\n");
      out.write("</svg> \r\n");
      out.write("<script>\r\n");
      out.write("// 전역변수 선언\r\n");
      out.write("var g_canvas = null; // 캔버스 draw2d 오브젝트를 저장하는 변수\r\n");
      out.write("var g_minimap = null; // 미니맵 draw2d 오브젝트를 저장하는 변수\r\n");
      out.write("var g_data = null; // DB 조회후 결과값을 저장하는 변수\r\n");
      out.write("var g_bMinimapClick = false; // 미니맵을 클릭했을 때 사용되는 변수(미니맵 클릭시 화면이 스크롤 되는데 이 때 onScroll 이벤트를 또 호출하지 않기 위함)\r\n");
      out.write("var g_bLoaded = false; // 로딩이 완료되었는지 판단하는 변수\r\n");
      out.write("var g_param = null; // DB 조회시 파라미터를 저장하는 변수\r\n");
      out.write("var g_bResizeProc = true; // resize 이벤트를 실행할지 안할지 판단하기 위한 변수 (모니터링 화면에서 사용됨)\r\n");
      out.write("var g_bChanged = false; // 변경 내역이 있는지 체크하기 위한 변수\r\n");
      out.write("\r\n");
      out.write("// Common Code Variables\r\n");
      out.write("var LINE_OBJECT_TYPE_PACKAGE = \"");
      out.print( CodeDefinitions.LINE_OBJECT_TYPE_PACKAGE );
      out.write("\";\r\n");
      out.write("var LINE_OBJECT_TYPE_NODE = \"");
      out.print( CodeDefinitions.LINE_OBJECT_TYPE_NODE );
      out.write("\";\r\n");
      out.write("var LINE_OBJECT_TYPE_PROCESS = \"");
      out.print( CodeDefinitions.LINE_OBJECT_TYPE_PROCESS );
      out.write("\";\r\n");
      out.write("var LINE_OBJECT_TYPE_BATCHJOB = \"");
      out.print( CodeDefinitions.LINE_OBJECT_TYPE_BATCHJOB );
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("var LINE_TYPE_NETWORK = \"");
      out.print( CodeDefinitions.LINE_TYPE_NETWORK );
      out.write("\";\r\n");
      out.write("var LINE_TYPE_PROCESS = \"");
      out.print( CodeDefinitions.LINE_TYPE_PROCESS );
      out.write("\";\r\n");
      out.write("var LINE_TYPE_BATCHJOB = \"");
      out.print( CodeDefinitions.LINE_TYPE_BATCHJOB );
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("// draw2d 캔버스를 JSON 문자열로 추출한다.\r\n");
      out.write("function getDraw2dJson() {\r\n");
      out.write("\tvar sRet = \"\";\r\n");
      out.write("\tvar writer = new draw2d.io.json.Writer();\r\n");
      out.write("\twriter.marshal(g_canvas, function(json) {\r\n");
      out.write("\t\tsRet = JSON.stringify(json, null, 2);\r\n");
      out.write("\t});\r\n");
      out.write("\treturn sRet;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// Port(연결점)\r\n");
      out.write("var AtomPort = draw2d.HybridPort.extend({\r\n");
      out.write("\tNAME: \"AtomPort\",\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\t\tif (attr != null) {\r\n");
      out.write("\t\t\tthis.setName(attr.name);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (g_data.readonly) {\r\n");
      out.write("\t\t\t// 모니터링 화면에서는 안보이게 처리\r\n");
      out.write("\t\t\tthis.setAlpha(0);\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\t// 편집 화면에서는 반투명 처리\r\n");
      out.write("\t\t\t// 마우스오버시 선명해졌다가(onMouseEnter) 마우스아웃시 다시 반투명해짐(onMouseLeave)\r\n");
      out.write("\t\t\tthis.setAlpha(0.5);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tthis.setWidth(3);\r\n");
      out.write("\t\tthis.setStroke(1);\r\n");
      out.write("\t\tthis.setColor(new draw2d.util.Color(31, 30, 52));\r\n");
      out.write("\t\tthis.setBackgroundColor(\"#ffffff\");\r\n");
      out.write("\t\tthis.useGradient = false;\r\n");
      out.write("\t},\r\n");
      out.write("\tonConnect: function(connection) {\r\n");
      out.write("\t\tthis._super(connection);\r\n");
      out.write("\t\tvar canvas = this.getCanvas();\r\n");
      out.write("\t\tif (g_bLoaded && canvas != null && canvas.canvasId == g_canvas.canvasId) {\r\n");
      out.write("\t\t\tg_bChanged = true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t},\r\n");
      out.write("\tonMouseEnter: function() {\r\n");
      out.write("\t\tif (!g_data.readonly) {\r\n");
      out.write("\t\t\tthis.setAlpha(1);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t},\r\n");
      out.write("\tonMouseLeave: function() {\r\n");
      out.write("\t\tif (!g_data.readonly) {\r\n");
      out.write("\t\t\tthis.setAlpha(0.5);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t},\r\n");
      out.write("\tonDrop: function(dropTarget, x, y, shiftKey, ctrlKey) {\r\n");
      out.write("\t\tif (!(dropTarget instanceof draw2d.Port)) {\r\n");
      out.write("    \t\treturn;\r\n");
      out.write("    \t}\r\n");
      out.write(" \r\n");
      out.write("    \tvar request = new draw2d.command.CommandType(draw2d.command.CommandType.CONNECT);\r\n");
      out.write("        request.canvas = this.parent.getCanvas();\r\n");
      out.write("        request.source = dropTarget;\r\n");
      out.write("        request.target = this;\r\n");
      out.write("        var command = this.createCommand(request);\r\n");
      out.write("        \r\n");
      out.write("        if(command!==null) {\r\n");
      out.write("           // this.parent.getCanvas().getCommandStack().execute(command);\r\n");
      out.write("           command.execute();\r\n");
      out.write("        }\r\n");
      out.write("        this.setGlow(false);\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// Locator: draw2d 오브젝트에 자식 오브젝트를 추가할 때 자식 오브젝트의 위치를 지정해주는 오브젝트\r\n");
      out.write("// 패키지명 배치를 위한 Locator\r\n");
      out.write("var AtomPkgLocator = draw2d.layout.locator.Locator.extend({\r\n");
      out.write("\tNAME: \"AtomPkgLocator\",\r\n");
      out.write("\tinit: function() {\r\n");
      out.write("\t\tthis._super();\r\n");
      out.write("\t},\r\n");
      out.write("\trelocate: function(index, target) {\r\n");
      out.write("\t\tvar parent = target.getParent();\r\n");
      out.write("\t\tvar boundingBox = parent.getBoundingBox();\r\n");
      out.write("\t\ttarget.setPosition(5, 5);\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// draw2d 에서 Text 출력을 위한 오브젝트\r\n");
      out.write("var AtomLabel = draw2d.shape.basic.Label.extend({\r\n");
      out.write("\tNAME: \"AtomLabel\",\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\t\tthis.setSelectable(false);\r\n");
      out.write("\t\tthis.setStroke(0);\r\n");
      out.write("\t\tvar fontSize = 12;\r\n");
      out.write("\t\tif (attr != null) {\r\n");
      out.write("\t\t\tfontSize = attr.fontSize;\r\n");
      out.write("\t\t\tif (fontSize == null) {\r\n");
      out.write("\t\t\t\tfontSize = 12;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tthis.setFontSize(fontSize);\r\n");
      out.write("\t},\r\n");
      out.write("\tonDoubleClick: function() {\r\n");
      out.write("\t\tthis.parent.onDoubleClick();\r\n");
      out.write("\t},\r\n");
      out.write("\tonContextMenu: function() {\r\n");
      out.write("\t\tthis.parent.onContextMenu();\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 윈형 오브젝트\r\n");
      out.write("var AtomCircle = draw2d.shape.basic.Circle.extend({\r\n");
      out.write("\tNAME: \"AtomCircle\",\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\t},\r\n");
      out.write("\tgetPersistentAttributes: function() {\r\n");
      out.write("\t\tvar memento = this._super();\r\n");
      out.write("\r\n");
      out.write("\t\tmemento.labels = [];\r\n");
      out.write("\t\tmemento.ports = [];\r\n");
      out.write("\r\n");
      out.write("\t\tthis.getPorts().each(function(i, port) {\r\n");
      out.write("\t\t\tmemento.ports.push({\r\n");
      out.write("\t\t\t\tname: port.getName(),\r\n");
      out.write("\t\t\t\tport: port.NAME,\r\n");
      out.write("\t\t\t\tlocator: port.getLocator().NAME\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tthis.children.each(function(i, e) {\r\n");
      out.write("\t\t\tif (e instanceof AtomLabel) {\r\n");
      out.write("\t\t\t\tmemento.labels.push({\r\n");
      out.write("\t\t\t\t\tid: e.figure.getId(),\r\n");
      out.write("\t\t\t\t\tlabel: e.figure.getText(),\r\n");
      out.write("\t\t\t\t\tlocator: e.locator.NAME\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\treturn memento;\r\n");
      out.write("\t},\r\n");
      out.write("\tsetPersistentAttributes: function(memento) {\r\n");
      out.write("\t\tthis._super(memento);\r\n");
      out.write("\t\tthis.setUserData(memento.userData);\r\n");
      out.write("\r\n");
      out.write("\t\treturn this;\r\n");
      out.write("\t},\r\n");
      out.write("\tonContextMenu: function() {\r\n");
      out.write("\t\tthis.parent.onContextMenu();\r\n");
      out.write("\t},\r\n");
      out.write("\tonDoubleClick: function() {\r\n");
      out.write("\t\tthis.parent.onDoubleClick();\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// Port 를 4개 가지고있는 원형 오브젝트\r\n");
      out.write("var AtomCircleWP = AtomCircle.extend({\r\n");
      out.write("\tNAME: \"AtomCircleWP\",\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\t\tvar topPort = new AtomPort({\r\n");
      out.write("\t\t\tname: 0\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.addPort(topPort, new draw2d.layout.locator.TopLocator());\r\n");
      out.write("\r\n");
      out.write("\t\tvar leftPort = new AtomPort({\r\n");
      out.write("\t\t\tname: 1\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.addPort(leftPort, new draw2d.layout.locator.LeftLocator());\r\n");
      out.write("\r\n");
      out.write("\t\tvar bottomPort = new AtomPort({\r\n");
      out.write("\t\t\tname: 2\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.addPort(bottomPort, new draw2d.layout.locator.BottomLocator());\r\n");
      out.write("\r\n");
      out.write("\t\tvar rightPort = new AtomPort({\r\n");
      out.write("\t\t\tname: 3\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.addPort(rightPort, new draw2d.layout.locator.RightLocator());\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 사각형 오브젝트\r\n");
      out.write("var AtomRectangle = draw2d.shape.basic.Rectangle.extend({\r\n");
      out.write("\tNAME: \"AtomRectangle\",\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\t},\r\n");
      out.write("\tgetPersistentAttributes: function() {\r\n");
      out.write("\t\tvar memento = this._super();\r\n");
      out.write("\r\n");
      out.write("\t\tmemento.labels = [];\r\n");
      out.write("\t\tmemento.ports = [];\r\n");
      out.write("\r\n");
      out.write("\t\tthis.getPorts().each(function(i, port) {\r\n");
      out.write("\t\t\tmemento.ports.push({\r\n");
      out.write("\t\t\t\tname: port.getName(),\r\n");
      out.write("\t\t\t\tport: port.NAME,\r\n");
      out.write("\t\t\t\tlocator: port.getLocator().NAME\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tthis.children.each(function(i, e) {\r\n");
      out.write("\t\t\tif (e instanceof AtomLabel) {\r\n");
      out.write("\t\t\t\tmemento.labels.push({\r\n");
      out.write("\t\t\t\t\tid: e.figure.getId(),\r\n");
      out.write("\t\t\t\t\tlabel: e.figure.getText(),\r\n");
      out.write("\t\t\t\t\tlocator: e.locator.NAME\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\treturn memento;\r\n");
      out.write("\t},\r\n");
      out.write("\tsetPersistentAttributes: function(memento) {\r\n");
      out.write("\t\tthis._super(memento);\r\n");
      out.write("\t\tthis.setUserData(memento.userData);\r\n");
      out.write("\r\n");
      out.write("\t\treturn this;\r\n");
      out.write("\t},\r\n");
      out.write("\tonContextMenu: function() {\r\n");
      out.write("\t\t// this.parent.onContextMenu();\r\n");
      out.write("\t},\r\n");
      out.write("\tonDoubleClick: function() {\r\n");
      out.write("\t\t// this.parent.onDoubleClick();\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 포트를 4개 가지고 있는 사각형 오브젝트\r\n");
      out.write("var AtomRectangleWP = AtomRectangle.extend({\r\n");
      out.write("\tNAME: \"AtomRectangleWP\",\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\r\n");
      out.write("\t\tvar topPort = new AtomPort({\r\n");
      out.write("\t\t\tname: 0\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.addPort(topPort, new draw2d.layout.locator.TopLocator());\r\n");
      out.write("\r\n");
      out.write("\t\tvar leftPort = new AtomPort({\r\n");
      out.write("\t\t\tname: 1\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.addPort(leftPort, new draw2d.layout.locator.LeftLocator());\r\n");
      out.write("\r\n");
      out.write("\t\tvar bottomPort = new AtomPort({\r\n");
      out.write("\t\t\tname: 2\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.addPort(bottomPort, new draw2d.layout.locator.BottomLocator());\r\n");
      out.write("\r\n");
      out.write("\t\tvar rightPort = new AtomPort({\r\n");
      out.write("\t\t\tname: 3\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.addPort(rightPort, new draw2d.layout.locator.RightLocator());\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 패키지 오브젝트(Network Manager)\r\n");
      out.write("var AtomPkg = AtomRectangle.extend({\r\n");
      out.write("\tNAME: \"AtomPkg\",\r\n");
      out.write("\ttype: \"");
      if (_jspx_meth_spring_005fmessage_005f0(_jspx_page_context))
        return;
      out.write("\",\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\t\tthis.setResizeable(true);\r\n");
      out.write("\t\tthis.setAlpha(0.2);\r\n");
      out.write("\t\tthis.setColor(this.getBackgroundColor().darker(0.3).hash());\r\n");
      out.write("\t\tthis.setRadius(5);\r\n");
      out.write("\t\tthis.setStroke(2);\r\n");
      out.write("\r\n");
      out.write("\t\tif (attr != null) {\r\n");
      out.write("\t\t\tvar atomLabel = new AtomLabel({\r\n");
      out.write("\t\t\t\ttext: attr.label,\r\n");
      out.write("\t\t\t\tbold: true,\r\n");
      out.write("\t\t\t\tfontSize: 13,\r\n");
      out.write("\t\t\t\tfontColor: \"#2a3139\"\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\tthis.add(atomLabel, new AtomPkgLocator(this));\r\n");
      out.write("\t\t\tthis.atomLabel = atomLabel;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t},\r\n");
      out.write("\tsetIconPath: function(path) {\r\n");
      out.write("\t\tthis.atomIcon.setPath(path);\r\n");
      out.write("\t},\r\n");
      out.write("\tsetPersistentAttributes: function(memento) {\r\n");
      out.write("\t\tthis._super(memento);\r\n");
      out.write("\t\tthis.setUserData(memento.userData);\r\n");
      out.write("\r\n");
      out.write("\t\tvar atomLabel = new AtomLabel({\r\n");
      out.write("\t\t\ttext: memento.label,\r\n");
      out.write("\t\t\tbold: true,\r\n");
      out.write("\t\t\tfontSize: 13,\r\n");
      out.write("\t\t\tfontColor: \"#2a3139\"\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomLabel, new AtomPkgLocator(this));\r\n");
      out.write("\t\tthis.atomLabel = atomLabel;\r\n");
      out.write("\t},\r\n");
      out.write("\tgetPersistentAttributes: function() {\r\n");
      out.write("\t\tvar memento = this._super();\r\n");
      out.write("\t\tmemento.label = this.atomLabel.getText();\r\n");
      out.write("\t\treturn memento;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDoubleClick: function() {\r\n");
      out.write("\t\tg_canvas.setCurrentSelection(this);\r\n");
      out.write("\t\tvar userData = this.userData;\r\n");
      out.write("\t\tvar pkg = userData;\r\n");
      out.write("\t\tpkg.image_x = this.getX();\r\n");
      out.write("\t\tpkg.image_y = this.getY();\r\n");
      out.write("\t\tpkg.image_width = this.getWidth();\r\n");
      out.write("\t\tpkg.image_height = this.getHeight();\r\n");
      out.write("\t\tpkg.image_bgcolor = this.getBackgroundColor().hashString;\r\n");
      out.write("\t\topenPkgModal(pkg, false);\r\n");
      out.write("\t},\r\n");
      out.write("\tonContextMenu: function() {\r\n");
      out.write("\t\tshowContextMenu(this);\r\n");
      out.write("\t},\r\n");
      out.write("\tonDragStart: function() {\r\n");
      out.write("\t\tvar ret = this._super();\r\n");
      out.write("\t\tthis.startX = this.getX();\r\n");
      out.write("\t\tthis.startY = this.getY();\r\n");
      out.write("\t\treturn ret;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDrag: function(dx, dy, dx2, dy2) {\r\n");
      out.write("\t\tvar ret = this._super(dx, dy, dx2, dy2);\r\n");
      out.write("\t\tonDragProc(this);\r\n");
      out.write("\t\treturn ret;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDragEnd: function() {\r\n");
      out.write("\t\t// 패키지 클릭시 우측에 해당 패키지 외의 다른 오브젝트의 속성창이 떠있을 경우 속성창을 닫는다.\r\n");
      out.write("\t\tvar ret = this._super();\r\n");
      out.write("\t\tvar bClose = true;\r\n");
      out.write("\t\tif ($(\"#pkgModalDiv.on\").length > 0) {\r\n");
      out.write("\t\t\tvar pkg = $(\"#pkgModalDiv.on\").data(\"pkg\");\r\n");
      out.write("\t\t\tif (pkg.pkg_name == this.userData.pkg_name) {\r\n");
      out.write("\t\t\t\tbClose = false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (bClose) {\r\n");
      out.write("\t\t\thideDetailDiv();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tonDragEndProc(this);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\treturn ret;\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// draw2d 오브젝트를 드래그 종료시 호출된다.\r\n");
      out.write("// Undo, Redo 를 위해 드래그하기 전위 좌표와 드래그 종료후의 좌표를 commandStack 에 추가한다.\r\n");
      out.write("// CommandStack: draw2d 에서 Undo, Redo 를 위한 오브젝트\r\n");
      out.write("function onDragEndProc(figure) {\r\n");
      out.write("\tvar mFigure = g_minimap.getFigure(figure.id);\r\n");
      out.write("\tvar mCommandMove = new draw2d.command.CommandMove(mFigure);\r\n");
      out.write("\tmCommandMove.setStartPosition(figure.startX, figure.startY);\r\n");
      out.write("\tmCommandMove.setPosition(figure.x, figure.y);\r\n");
      out.write("\tg_minimap.commandStack.execute(mCommandMove);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// draw2d 오브젝트를 드래그시 호출된다.\r\n");
      out.write("// 캔버스의 오브젝트를 드래그시 미니맵에서 같은 오브젝트를 찾아 위치를 변경한다.\r\n");
      out.write("function onDragProc(figure) {\r\n");
      out.write("\tif (figure.getX() < 0) {\r\n");
      out.write("\t\tfigure.setX(0);\r\n");
      out.write("\t}\r\n");
      out.write("\tif (figure.getY() < 0) {\r\n");
      out.write("\t\tfigure.setY(0);\r\n");
      out.write("\t}\r\n");
      out.write("\tif (figure.getX() > g_canvas.getWidth() - figure.getWidth()) {\r\n");
      out.write("\t\tfigure.setX(g_canvas.getWidth() - figure.getWidth());\r\n");
      out.write("\t}\r\n");
      out.write("\tif (figure.getY() > g_canvas.getHeight() - figure.getHeight()) {\r\n");
      out.write("\t\tfigure.setY(g_canvas.getHeight() - figure.getHeight());\r\n");
      out.write("\t}\r\n");
      out.write("\tvar atomObj = g_minimap.getFigure(figure.id);\r\n");
      out.write("\tatomObj.setX(figure.getX());\r\n");
      out.write("\tatomObj.setY(figure.getY());\r\n");
      out.write("\tg_bChanged = true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 이미지 오브젝트\r\n");
      out.write("var AtomImage = draw2d.shape.basic.Image.extend({\r\n");
      out.write("\tNAME: \"AtomImage\",\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\t\tthis.setResizeable(false);\r\n");
      out.write("\t},\r\n");
      out.write("\tgetPersistentAttributes: function() {\r\n");
      out.write("\t\tvar memento = this._super();\r\n");
      out.write("\r\n");
      out.write("\t\tmemento.labels = [];\r\n");
      out.write("\t\tmemento.ports = [];\r\n");
      out.write("\r\n");
      out.write("\t\tthis.getPorts().each(function(i, port) {\r\n");
      out.write("\t\t\tmemento.ports.push({\r\n");
      out.write("\t\t\t\tname: port.getName(),\r\n");
      out.write("\t\t\t\tport: port.NAME,\r\n");
      out.write("\t\t\t\tlocator: port.getLocator().NAME\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tthis.children.each(function(i, e) {\r\n");
      out.write("\t\t\tmemento.labels.push({\r\n");
      out.write("\t\t\t\tid: e.figure.getId(),\r\n");
      out.write("\t\t\t\tlabel: e.figure.getText(),\r\n");
      out.write("\t\t\t\tlocator: e.locator.NAME\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\treturn memento;\r\n");
      out.write("\t},\r\n");
      out.write("\tsetPersistentAttributes: function(memento) {\r\n");
      out.write("\t\tthis._super(memento);\r\n");
      out.write("\t\tthis.setUserData(memento.userData);\r\n");
      out.write("\r\n");
      out.write("\t\treturn this;\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 아이콘 오브젝트\r\n");
      out.write("var AtomIcon = AtomImage.extend({\r\n");
      out.write("\tNAME: \"AtomIcon\",\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\t\tthis.setResizeable(false);\r\n");
      out.write("\t\tthis.setSelectable(false);\r\n");
      out.write("\t},\r\n");
      out.write("\tonDoubleClick: function() {\r\n");
      out.write("\t\tthis.parent.onDoubleClick();\r\n");
      out.write("\t},\r\n");
      out.write("\tonContextMenu: function() {\r\n");
      out.write("\t\tthis.parent.onContextMenu();\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 포트를 4개 가지고 있는 이미지 오브젝트\r\n");
      out.write("var AtomImageWP = AtomImage.extend({\r\n");
      out.write("\tNAME: \"AtomImageWP\",\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\r\n");
      out.write("\t\tvar topPort = new AtomPort({\r\n");
      out.write("\t\t\tname: 0\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.addPort(topPort, new draw2d.layout.locator.TopLocator());\r\n");
      out.write("\r\n");
      out.write("\t\tvar leftPort = new AtomPort({\r\n");
      out.write("\t\t\tname: 1\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.addPort(leftPort, new draw2d.layout.locator.LeftLocator());\r\n");
      out.write("\r\n");
      out.write("\t\tvar bottomPort = new AtomPort({\r\n");
      out.write("\t\t\tname: 2\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.addPort(bottomPort, new draw2d.layout.locator.BottomLocator());\r\n");
      out.write("\r\n");
      out.write("\t\tvar rightPort = new AtomPort({\r\n");
      out.write("\t\t\tname: 3\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.addPort(rightPort, new draw2d.layout.locator.RightLocator());\r\n");
      out.write("\r\n");
      out.write("\t\tif (attr != null) {\r\n");
      out.write("\t\t\tvar atomLabel = new AtomLabel({\r\n");
      out.write("\t\t\t\ttext: attr.label\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\tthis.add(atomLabel, new draw2d.layout.locator.CenterLocator(this));\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 프로세스 오브젝트(Process Manager)\r\n");
      out.write("var AtomProc = AtomCircleWP.extend({\r\n");
      out.write("\tNAME: \"AtomProc\",\r\n");
      out.write("\tWIDTH: 55,\r\n");
      out.write("\tHEIGHT: 55,\r\n");
      out.write("\ttype: \"");
      if (_jspx_meth_spring_005fmessage_005f1(_jspx_page_context))
        return;
      out.write("\",\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\t\tthis.setWidth(this.WIDTH);\r\n");
      out.write("\t\tthis.setStroke(0);\r\n");
      out.write("\t\tthis.setResizeable(false);\r\n");
      out.write("\r\n");
      out.write("\t\tif (attr == null) {\r\n");
      out.write("\t\t\tattr = new Object();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar userData = attr.userData;\r\n");
      out.write("\t\tif (userData == null) {\r\n");
      out.write("\t\t\tuserData = new Object();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar image_uuid = userData.image_uuid;\r\n");
      out.write("\t\tif (image_uuid != null && image_uuid != \"\") {\r\n");
      out.write("\t\t\tthis.setId(image_uuid);\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tuserData.image_uuid = this.id;\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tvar atomLabel = new AtomLabel({\r\n");
      out.write("\t\t\ttext: attr.label\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomLabel, new draw2d.layout.locator.BottomLocator(this));\r\n");
      out.write("\t\tthis.atomLabel = atomLabel;\r\n");
      out.write("\r\n");
      out.write("\t\tvar atomIcon = new AtomIcon({\r\n");
      out.write("\t\t\twidth: 31.5,\r\n");
      out.write("\t\t\theight: 31.5,\r\n");
      out.write("\t\t\tpath: attr.path\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomIcon, new draw2d.layout.locator.CenterLocator(this));\r\n");
      out.write("\t\tthis.atomIcon = atomIcon;\r\n");
      out.write("\t},\r\n");
      out.write("\tsetPersistentAttributes: function(memento) {\r\n");
      out.write("\t\tthis._super(memento);\r\n");
      out.write("\t\tthis.setUserData(memento.userData);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar atomLabel = new AtomLabel({\r\n");
      out.write("\t\t\ttext: memento.label\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomLabel, new draw2d.layout.locator.BottomLocator(this));\r\n");
      out.write("\t\tthis.atomLabel = atomLabel;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar atomIcon = new AtomIcon({\r\n");
      out.write("\t\t\twidth: 31.5,\r\n");
      out.write("\t\t\theight: 31.5,\r\n");
      out.write("\t\t\tpath: memento.icon_path\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomIcon, new draw2d.layout.locator.CenterLocator(this));\r\n");
      out.write("\t\tthis.atomIcon = atomIcon;\r\n");
      out.write("\t\treturn this;\r\n");
      out.write("\t},\r\n");
      out.write("\tgetPersistentAttributes: function() {\r\n");
      out.write("\t\tvar memento = this._super();\r\n");
      out.write("\t\tmemento.label = this.atomLabel.getText();\r\n");
      out.write("\t\tmemento.icon_path = this.atomIcon.getPath();\r\n");
      out.write("\t\treturn memento;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDoubleClick: function() {\r\n");
      out.write("\t\tg_canvas.setCurrentSelection(this);\r\n");
      out.write("\t\tvar userData = this.userData;\r\n");
      out.write("\t\tvar proc = userData;\r\n");
      out.write("\t\tproc.image_x = this.getX();\r\n");
      out.write("\t\tproc.image_y = this.getY();\r\n");
      out.write("\t\topenProcModal(proc, false);\r\n");
      out.write("\t},\r\n");
      out.write("\tonContextMenu: function() {\r\n");
      out.write("\t\tshowContextMenu(this);\r\n");
      out.write("\t},\r\n");
      out.write("\tonDragStart: function() {\r\n");
      out.write("\t\tthis._super();\r\n");
      out.write("\t\tthis.startX = this.getX();\r\n");
      out.write("\t\tthis.startY = this.getY();\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDrag: function(dx, dy, dx2, dy2) {\r\n");
      out.write("\t\tvar ret = this._super(dx, dy, dx2, dy2);\r\n");
      out.write("\t\tonDragProc(this);\r\n");
      out.write("\t\treturn ret;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDragEnd: function() {\r\n");
      out.write("\t\t// 프로세스 클릭시 우측에 해당 프로세스 외의 다른 오브젝트의 속성창이 떠있을 경우 속성창을 닫는다.\r\n");
      out.write("\t\tvar ret = this._super();\r\n");
      out.write("\t\tvar bClose = true;\r\n");
      out.write("\t\tif ($(\"#procModalDiv.on\").length > 0) {\r\n");
      out.write("\t\t\tvar proc = $(\"#procModalDiv.on\").data(\"proc\");\r\n");
      out.write("\t\t\tif (proc.proc_name == this.userData.proc_name) {\r\n");
      out.write("\t\t\t\tbClose = false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (bClose) {\r\n");
      out.write("\t\t\thideDetailDiv();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tonDragEndProc(this);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\treturn ret;\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// draw2d 오브젝트에 마우스 우클릭시 호출된다.\r\n");
      out.write("function showContextMenu(figure) {\r\n");
      out.write("\tvar bContext = false;\r\n");
      out.write("\tvar bNode = false;\r\n");
      out.write("\tif (g_data.readonly) {\r\n");
      out.write("\t\tif (figure instanceof AtomNode) {\r\n");
      out.write("\t\t\tbNode = true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t} else {\r\n");
      out.write("\t\tbContext = true;\r\n");
      out.write("\t}\r\n");
      out.write("\tif (!bContext && !bNode) {\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tg_canvas.setCurrentSelection(figure);\r\n");
      out.write("\t$(\"#_atomDroppableDiv\").css(\"background\", \"\");\r\n");
      out.write("\t$(\"#_atomDroppableDiv\").show();\r\n");
      out.write("\tvar left = event.layerX - 20;\r\n");
      out.write("\tvar top = event.layerY - 20;\r\n");
      out.write("\tvar sHtml = \"\";\r\n");
      out.write("\tsHtml += \"<ul id=\\\"_atomContextMenuDiv\\\" class=\\\"context-menu-list context-menu-root\\\" style=\\\"display:none;left:\"+left+\"px;top:\"+top+\"px;\\\">\";\r\n");
      out.write("\tif (bNode) {\r\n");
      out.write("\t\tvar userData = figure.userData;\r\n");
      out.write("\t\tif (userData.internal_yn == \"Y\" && userData.scale_yn == \"Y\") {\r\n");
      out.write("\t\t\tfor (var i=0;i<g_data.allNodeList.length;i++) {\r\n");
      out.write("\t\t\t\tvar node = g_data.allNodeList[i];\r\n");
      out.write("\t\t\t\tif (node.pkg_name == userData.pkg_name && node.node_type == userData.node_type) {\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t<li class=\\\"context-menu-item context-menu-visible\\\" onclick=\\\"javascript:showProcessDiagram('\"+node.pkg_name+\"', '\"+node.node_type+\"', '\"+node.node_no+\"');\\\"><span>");
      if (_jspx_meth_spring_005fmessage_005f2(_jspx_page_context))
        return;
      out.write(" (\"+node.node_name+\")</span></li>\";\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tfor (var i=0;i<g_data.allNodeList.length;i++) {\r\n");
      out.write("\t\t\t\tvar node = g_data.allNodeList[i];\r\n");
      out.write("\t\t\t\tif (node.pkg_name == userData.pkg_name && node.node_type == userData.node_type && node.node_name == userData.node_name) {\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t<li class=\\\"context-menu-item context-menu-visible\\\" onclick=\\\"javascript:showProcessDiagram('\"+node.pkg_name+\"', '\"+node.node_type+\"', '\"+node.node_no+\"');\\\"><span>");
      if (_jspx_meth_spring_005fmessage_005f3(_jspx_page_context))
        return;
      out.write(" (\"+userData.node_name+\")</span></li>\";\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tsHtml += \"\t<li class=\\\"context-menu-item context-menu-visible\\\" onclick=\\\"hideContextMenu();\\\"><span>");
      if (_jspx_meth_spring_005fmessage_005f4(_jspx_page_context))
        return;
      out.write("</span></li>\";\r\n");
      out.write("\t\tsHtml += \"\t<li class=\\\"context-menu-item context-menu-visible\\\" onclick=\\\"hideContextMenu();\\\"><span>");
      if (_jspx_meth_spring_005fmessage_005f5(_jspx_page_context))
        return;
      out.write("</span></li>\";\r\n");
      out.write("\t}\r\n");
      out.write("\tif (bContext) {\r\n");
      out.write("\t\tsHtml += \"\t<li id=\\\"modifyButton\\\" class=\\\"context-menu-item context-menu-visible\\\"><span>");
      if (_jspx_meth_spring_005fmessage_005f6(_jspx_page_context))
        return;
      out.write("</span></li>\";\r\n");
      out.write("\t\tsHtml += \"\t<li id=\\\"deleteButton\\\" class=\\\"context-menu-item context-menu-visible\\\"><span>");
      if (_jspx_meth_spring_005fmessage_005f7(_jspx_page_context))
        return;
      out.write("</span></li>\";\r\n");
      out.write("\t}\r\n");
      out.write("\tsHtml += \"</ul>\";\r\n");
      out.write("\t$(\"#_atomDroppableDiv\").append(sHtml);\r\n");
      out.write("\t$(\"#_atomContextMenuDiv\").slideDown();\r\n");
      out.write("\t$(\"#_atomContextMenuDiv\").mouseleave(function() {\r\n");
      out.write("\t\thideContextMenu();\r\n");
      out.write("\t});\r\n");
      out.write("\tif (bContext) {\r\n");
      out.write("\t\t$(\"#_atomContextMenuDiv #modifyButton\").click(function(e) {\r\n");
      out.write("\t\t\tvar functionName = \"open\" + figure.NAME.replace(\"Atom\", \"\") + \"Modal(figure.userData)\";\r\n");
      out.write("\t\t\teval(functionName);\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t$(\"#_atomContextMenuDiv #deleteButton\").click(function() {\r\n");
      out.write("\t\t\tconfirmDeleteFigure(figure);\r\n");
      out.write("\t\t\thideContextMenu();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// draw2d 오브젝트 삭제시 호출된다.\r\n");
      out.write("function confirmDeleteFigure(figure) {\r\n");
      out.write("\tvar message = \"\";\r\n");
      out.write("\tmessage += \"");
      if (_jspx_meth_spring_005fmessage_005f8(_jspx_page_context))
        return;
      out.write(" \"+figure.type;\r\n");
      out.write("\tif (figure.atomLabel != null) {\r\n");
      out.write("\t\tmessage += \" \\\"\"+figure.atomLabel.text+\"\\\"\";\r\n");
      out.write("\t}\r\n");
      out.write("\tmessage += \"");
      if (_jspx_meth_spring_005fmessage_005f9(_jspx_page_context))
        return;
      out.write("\";\r\n");
      out.write("\topenConfirmModal(\"");
      if (_jspx_meth_spring_005fmessage_005f10(_jspx_page_context))
        return;
      out.write("\", message, function() {deleteFigure(figure);});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// draw2d 오브젝트를 삭제한다.\r\n");
      out.write("function deleteFigure(figure) {\r\n");
      out.write("\tvar id = figure.id;\r\n");
      out.write("\thideDetailDiv();\r\n");
      out.write("\tvar commandDelete = new draw2d.command.CommandDelete(figure);\r\n");
      out.write("\tg_canvas.commandStack.execute(commandDelete);\r\n");
      out.write("\t\r\n");
      out.write("\tvar mFigure = g_minimap.getFigure(id);\r\n");
      out.write("\tvar mCommandDelete = new draw2d.command.CommandDelete(mFigure);\r\n");
      out.write("\tg_minimap.commandStack.execute(mCommandDelete);\r\n");
      out.write("\t\r\n");
      out.write("\tresetDraggableElementsAttr();\r\n");
      out.write("\tupdateUndoRedoButton();\r\n");
      out.write("\tg_bChanged = true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 마우스 우클릭 메뉴를 삭제한다.\r\n");
      out.write("function hideContextMenu() {\r\n");
      out.write("\t$(\"#_atomContextMenuDiv\").remove();\r\n");
      out.write("\t$(\"#_atomDroppableDiv\").hide();\r\n");
      out.write("\t$(\"#_atomDroppableDiv\").css(\"background\", \"rgba(255,255,255,0.5)\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 노드 카운터 오브젝트를 배치하기 위한 Locator\r\n");
      out.write("var AtomCountLocator = draw2d.layout.locator.Locator.extend({\r\n");
      out.write("\tNAME: \"AtomCountLocator\",\r\n");
      out.write("\tinit: function(top) {\r\n");
      out.write("\t\tthis._super();\r\n");
      out.write("\t\tthis.top = top;\r\n");
      out.write("\t},\r\n");
      out.write("\trelocate: function(index, target) {\r\n");
      out.write("\t\tvar parent = target.getParent();\r\n");
      out.write("\t\tvar boundingBox = parent.getBoundingBox();\r\n");
      out.write("\r\n");
      out.write("\t\tvar targetBoundingBox = target.getBoundingBox();\r\n");
      out.write("\t\tvar x = boundingBox.w - targetBoundingBox.w;\r\n");
      out.write("\t\tvar y = 0;\r\n");
      out.write("\t\ttarget.setPosition(x, y);\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 노드 카운터 오브젝트\r\n");
      out.write("// 모니터링 화면에서 노드의 \r\n");
      out.write("// INTERNAL_YN = 'Y'\r\n");
      out.write("// SCALE_YN = 'Y'\r\n");
      out.write("// 일 경우 노드의 갯수가 표시된다.\r\n");
      out.write("var AtomCount = AtomCircle.extend({\r\n");
      out.write("\tNAME: \"AtomCount\",\r\n");
      out.write("\tWIDTH: 24,\r\n");
      out.write("\tHEIGHT: 24,\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\t\tthis.setWidth(this.WIDTH);\r\n");
      out.write("\t\tthis.setResizeable(false);\r\n");
      out.write("\t\tthis.setStroke(0);\r\n");
      out.write("\t\tif (attr == null) {\r\n");
      out.write("\t\t\tattr = new Object();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar atomLabel = new AtomLabel({\r\n");
      out.write("\t\t\ttext: attr.label,\r\n");
      out.write("\t\t\tfontSize: 14,\r\n");
      out.write("\t\t\tbold: true\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomLabel, new draw2d.layout.locator.CenterLocator(this));\r\n");
      out.write("\t\tthis.atomLabel = atomLabel;\r\n");
      out.write("\t},\r\n");
      out.write("\tsetPersistentAttributes: function(memento) {\r\n");
      out.write("\t\tthis._super(memento);\r\n");
      out.write("\t\tvar atomLabel = new AtomLabel({\r\n");
      out.write("\t\t\ttext: memento.label,\r\n");
      out.write("\t\t\tfontSize: 14,\r\n");
      out.write("\t\t\tbold: true\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomLabel, new draw2d.layout.locator.CenterLocator(this));\r\n");
      out.write("\t\tthis.atomLabel = atomLabel;\r\n");
      out.write("\t},\r\n");
      out.write("\tgetPersistentAttributes: function(memento) {\r\n");
      out.write("\t\tvar memento = this._super();\r\n");
      out.write("\t\tmemento.label = this.atomLabel.getText();\r\n");
      out.write("\t\treturn memento;\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 노드 오브젝트(Network Manager)\r\n");
      out.write("var AtomNode = AtomCircleWP.extend({\r\n");
      out.write("\tNAME: \"AtomNode\",\r\n");
      out.write("\tWIDTH: 60,\r\n");
      out.write("\tHEIGHT: 60,\r\n");
      out.write("\ttype: \"");
      if (_jspx_meth_spring_005fmessage_005f11(_jspx_page_context))
        return;
      out.write("\",\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tthis.setWidth(this.WIDTH);\r\n");
      out.write("\t\tthis.setStroke(3);\r\n");
      out.write("\t\tthis.setColor(\"#ffffff\");\r\n");
      out.write("\t\tthis.setResizeable(false);\r\n");
      out.write("\r\n");
      out.write("\t\tif (attr == null) {\r\n");
      out.write("\t\t\tattr = new Object();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar userData = attr.userData;\r\n");
      out.write("\t\tif (userData == null) {\r\n");
      out.write("\t\t\tuserData = new Object();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar image_uuid = userData.image_uuid;\r\n");
      out.write("\t\tif (image_uuid != null && image_uuid != \"\") {\r\n");
      out.write("\t\t\tthis.setId(image_uuid);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tthis.setBackgroundColor(attr.bgColor);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar atomLabel = new AtomLabel({\r\n");
      out.write("\t\t\ttext: attr.label,\r\n");
      out.write("\t\t\tfontSize: 13,\r\n");
      out.write("\t\t\tfontColor: \"#1f1e34\"\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomLabel, new draw2d.layout.locator.BottomLocator(this));\r\n");
      out.write("\t\tthis.atomLabel = atomLabel;\r\n");
      out.write("\r\n");
      out.write("\t\tif (g_data.readonly) {\r\n");
      out.write("\t\t\tif (userData.scale_yn == \"Y\") {\r\n");
      out.write("\t\t\t\tvar atomCount = new AtomCount({\r\n");
      out.write("\t\t\t\t\tlabel: userData.node_count,\r\n");
      out.write("\t\t\t\t\tbold: true,\r\n");
      out.write("\t\t\t\t\tbgColor: \"#ffffff\"\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tthis.add(atomCount, new AtomCountLocator(this));\r\n");
      out.write("\t\t\t\tthis.atomCount = atomCount;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar atomIcon = new AtomIcon({\r\n");
      out.write("\t\t\twidth: 32,\r\n");
      out.write("\t\t\theight: 32,\r\n");
      out.write("\t\t\tpath: attr.path\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomIcon, new draw2d.layout.locator.CenterLocator(this));\r\n");
      out.write("\t\tthis.atomIcon = atomIcon;\r\n");
      out.write("\r\n");
      out.write("\t\tif (userData.use_yn == \"Y\") {\r\n");
      out.write("\t\t\tthis.setColor(\"#ffffff\");\r\n");
      out.write("\t\t\tthis.setAlpha(1);\r\n");
      out.write("\t\t\tthis.atomIcon.setAlpha(1);\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tthis.setColor(new draw2d.util.Color(32, 31, 51));\r\n");
      out.write("\t\t\tthis.setAlpha(0.7);\r\n");
      out.write("\t\t\tthis.atomIcon.setAlpha(0.7);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t},\r\n");
      out.write("\tsetPersistentAttributes: function(memento) {\r\n");
      out.write("\t\tthis._super(memento);\r\n");
      out.write("\t\tthis.setUserData(memento.userData);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar atomLabel = new AtomLabel({\r\n");
      out.write("\t\t\ttext: memento.label,\r\n");
      out.write("\t\t\tfontSize: 13,\r\n");
      out.write("\t\t\tfontColor: \"#1f1e34\"\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomLabel, new draw2d.layout.locator.BottomLocator(this));\r\n");
      out.write("\t\tthis.atomLabel = atomLabel;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar atomIcon = new AtomIcon({\r\n");
      out.write("\t\t\twidth: 32,\r\n");
      out.write("\t\t\theight: 32,\r\n");
      out.write("\t\t\tpath: memento.icon_path\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomIcon, new draw2d.layout.locator.CenterLocator(this));\r\n");
      out.write("\t\tthis.atomIcon = atomIcon;\r\n");
      out.write("\r\n");
      out.write("\t\tif (memento.userData.use_yn == \"Y\") {\r\n");
      out.write("\t\t\tthis.setColor(\"#ffffff\");\r\n");
      out.write("\t\t\tthis.setAlpha(1);\r\n");
      out.write("\t\t\tthis.atomIcon.setAlpha(1);\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tthis.setColor(new draw2d.util.Color(32, 31, 51));\r\n");
      out.write("\t\t\tthis.setAlpha(0.7);\r\n");
      out.write("\t\t\tthis.atomIcon.setAlpha(0.7);\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\treturn this;\r\n");
      out.write("\t},\r\n");
      out.write("\tgetPersistentAttributes: function() {\r\n");
      out.write("\t\tvar memento = this._super();\r\n");
      out.write("\t\tmemento.label = this.atomLabel.getText();\r\n");
      out.write("\t\tmemento.bgColor = this.getBackgroundColor();\r\n");
      out.write("\t\tmemento.icon_path = this.atomIcon.getPath();\r\n");
      out.write("\t\treturn memento;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDoubleClick: function() {\r\n");
      out.write("\t\tg_canvas.setCurrentSelection(this);\r\n");
      out.write("\t\tvar userData = this.userData;\r\n");
      out.write("\t\tvar node = userData;\r\n");
      out.write("\t\tnode.image_x = this.getX();\r\n");
      out.write("\t\tnode.image_y = this.getY();\r\n");
      out.write("\t\topenNodeModal(node, false);\r\n");
      out.write("\t},\r\n");
      out.write("\tonContextMenu: function() {\r\n");
      out.write("\t\tshowContextMenu(this);\r\n");
      out.write("\t},\r\n");
      out.write("\tonDragStart: function() {\r\n");
      out.write("\t\tthis._super();\r\n");
      out.write("\t\tthis.startX = this.getX();\r\n");
      out.write("\t\tthis.startY = this.getY();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// this.toFront();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDrag: function(dx, dy, dx2, dy2) {\r\n");
      out.write("\t\tvar ret = this._super(dx, dy, dx2, dy2);\r\n");
      out.write("\t\tonDragProc(this);\r\n");
      out.write("\t\treturn ret;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDragEnd: function() {\r\n");
      out.write("\t\t// 노드 클릭시 우측에 해당 노드 외의 다른 오브젝트의 속성창이 떠있을 경우 속성창을 닫는다.\r\n");
      out.write("\t\tvar ret = this._super();\r\n");
      out.write("\t\tvar bClose = true;\r\n");
      out.write("\t\tif ($(\"#nodeModalDiv.on\").length > 0) {\r\n");
      out.write("\t\t\tvar node = $(\"#nodeModalDiv.on\").data(\"node\");\r\n");
      out.write("\t\t\tif (node.node_name == this.userData.node_name) {\r\n");
      out.write("\t\t\t\tbClose = false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (bClose) {\r\n");
      out.write("\t\t\thideDetailDiv();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tonDragEndProc(this);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\treturn ret;\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("var AtomBatchJob = AtomRectangleWP.extend({\r\n");
      out.write("\tNAME: \"AtomBatchJob\",\r\n");
      out.write("\tWIDTH: 140,\r\n");
      out.write("\tHEIGHT: 42,\r\n");
      out.write("\ttype: \"");
      if (_jspx_meth_spring_005fmessage_005f12(_jspx_page_context))
        return;
      out.write("\",\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\t\tthis.setWidth(this.WIDTH);\r\n");
      out.write("\t\tthis.setHeight(this.HEIGHT);\r\n");
      out.write("\t\t// this.setStroke(2);\r\n");
      out.write("\t\tthis.setResizeable(false);\r\n");
      out.write("\t\tthis.setRadius(5);\r\n");
      out.write("\r\n");
      out.write("\t\tif (attr == null) {\r\n");
      out.write("\t\t\tattr = new Object();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar userData = attr.userData;\r\n");
      out.write("\t\tif (userData == null) {\r\n");
      out.write("\t\t\tuserData = new Object();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar image_uuid = userData.image_uuid;\r\n");
      out.write("\t\tif (image_uuid != null && image_uuid != \"\") {\r\n");
      out.write("\t\t\tthis.setId(image_uuid);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tthis.setColor(attr.bgColor);\r\n");
      out.write("\t\tthis.setBackgroundColor(attr.bgColor);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar atomLabel = new AtomLabel({\r\n");
      out.write("\t\t\ttext: attr.label,\r\n");
      out.write("\t\t\tfontSize: 15,\r\n");
      out.write("\t\t\tbold: true,\r\n");
      out.write("\t\t\tfontColor: \"#ffffff\"\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomLabel, new draw2d.layout.locator.CenterLocator(this));\r\n");
      out.write("\t\tthis.atomLabel = atomLabel;\r\n");
      out.write("\t},\r\n");
      out.write("\tsetPersistentAttributes: function(memento) {\r\n");
      out.write("\t\tthis._super(memento);\r\n");
      out.write("\t\tthis.setUserData(memento.userData);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar atomLabel = new AtomLabel({\r\n");
      out.write("\t\t\ttext: memento.label,\r\n");
      out.write("\t\t\tfontSize: 15,\r\n");
      out.write("\t\t\tbold: true,\r\n");
      out.write("\t\t\tfontColor: \"#ffffff\"\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomLabel, new draw2d.layout.locator.CenterLocator(this));\r\n");
      out.write("\t\tthis.atomLabel = atomLabel;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tthis.setColor(memento.bgColor);\r\n");
      out.write("\t\tthis.setBackgroundColor(memento.bgColor);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\treturn this;\r\n");
      out.write("\t},\r\n");
      out.write("\tgetPersistentAttributes: function() {\r\n");
      out.write("\t\tvar memento = this._super();\r\n");
      out.write("\t\tmemento.label = this.atomLabel.getText();\r\n");
      out.write("\t\tmemento.bgColor = this.getBackgroundColor();\r\n");
      out.write("\t\treturn memento;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDoubleClick: function() {\r\n");
      out.write("\t\tg_canvas.setCurrentSelection(this);\r\n");
      out.write("\t\tvar userData = this.userData;\r\n");
      out.write("\t\tvar batchJob = userData;\r\n");
      out.write("\t\tbatchJob.image_x = this.getX();\r\n");
      out.write("\t\tbatchJob.image_y = this.getY();\r\n");
      out.write("\t\topenBatchJobModal(batchJob, false);\r\n");
      out.write("\t},\r\n");
      out.write("\tonContextMenu: function() {\r\n");
      out.write("\t\tshowContextMenu(this);\r\n");
      out.write("\t},\r\n");
      out.write("\tonDragStart: function() {\r\n");
      out.write("\t\tthis._super();\r\n");
      out.write("\t\tthis.startX = this.getX();\r\n");
      out.write("\t\tthis.startY = this.getY();\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDrag: function(dx, dy, dx2, dy2) {\r\n");
      out.write("\t\tvar ret = this._super(dx, dy, dx2, dy2);\r\n");
      out.write("\t\tonDragProc(this);\r\n");
      out.write("\t\treturn ret;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDragEnd: function() {\r\n");
      out.write("\t\t// 배치잡 클릭시 우측에 해당 배치잡 외의 다른 오브젝트의 속성창이 떠있을 경우 속성창을 닫는다.\r\n");
      out.write("\t\tvar ret = this._super();\r\n");
      out.write("\t\tvar bClose = true;\r\n");
      out.write("\t\tif ($(\"#batchJobModalDiv.on\").length > 0) {\r\n");
      out.write("\t\t\tvar batchJob = $(\"#batchJobModalDiv.on\").data(\"batchJob\");\r\n");
      out.write("\t\t\tif (batchJob.job_name == this.userData.job_name) {\r\n");
      out.write("\t\t\t\tbClose = false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (bClose) {\r\n");
      out.write("\t\t\thideDetailDiv();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tonDragEndProc(this);\r\n");
      out.write("\r\n");
      out.write("\t\treturn ret;\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 연결노드 오브젝트\r\n");
      out.write("var AtomLinkedNode = AtomRectangleWP.extend({\r\n");
      out.write("\tNAME: \"AtomLinkedNode\",\r\n");
      out.write("\tWIDTH: 42,\r\n");
      out.write("\tHEIGHT: 42,\r\n");
      out.write("\ttype: \"");
      if (_jspx_meth_spring_005fmessage_005f13(_jspx_page_context))
        return;
      out.write("\",\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\t\tthis.setWidth(this.WIDTH);\r\n");
      out.write("\t\tthis.setHeight(this.HEIGHT);\r\n");
      out.write("\t\tthis.setStroke(0);\r\n");
      out.write("\t\tthis.setRadius(5);\r\n");
      out.write("\t\tthis.setResizeable(false);\r\n");
      out.write("\r\n");
      out.write("\t\tif (attr == null) {\r\n");
      out.write("\t\t\tattr = new Object();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar userData = attr.userData;\r\n");
      out.write("\t\tif (userData == null) {\r\n");
      out.write("\t\t\tuserData = new Object();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar image_uuid = userData.image_uuid;\r\n");
      out.write("\t\tif (image_uuid != null && image_uuid != \"\") {\r\n");
      out.write("\t\t\tthis.setId(image_uuid);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tthis.setBackgroundColor(userData.image_bgcolor);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar atomLabel = new AtomLabel({\r\n");
      out.write("\t\t\ttext: attr.label,\r\n");
      out.write("\t\t\tfontSize: 12,\r\n");
      out.write("\t\t\tfontColor: \"#6c7380\"\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomLabel, new draw2d.layout.locator.BottomLocator(this));\r\n");
      out.write("\t\tthis.atomLabel = atomLabel;\r\n");
      out.write("\r\n");
      out.write("\t\tvar atomIcon = new AtomIcon({\r\n");
      out.write("\t\t\twidth: 28,\r\n");
      out.write("\t\t\theight: 28,\r\n");
      out.write("\t\t\tpath: attr.path\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomIcon, new draw2d.layout.locator.CenterLocator(this));\r\n");
      out.write("\t\tthis.atomIcon = atomIcon;\r\n");
      out.write("\t},\r\n");
      out.write("\tsetPersistentAttributes: function(memento) {\r\n");
      out.write("\t\tthis._super(memento);\r\n");
      out.write("\t\tthis.setUserData(memento.userData);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar atomLabel = new AtomLabel({\r\n");
      out.write("\t\t\ttext: memento.label,\r\n");
      out.write("\t\t\tfontSize: 12,\r\n");
      out.write("\t\t\tfontColor: \"#6c7380\"\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomLabel, new draw2d.layout.locator.BottomLocator(this));\r\n");
      out.write("\t\tthis.atomLabel = atomLabel;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar atomIcon = new AtomIcon({\r\n");
      out.write("\t\t\twidth: 28,\r\n");
      out.write("\t\t\theight: 28,\r\n");
      out.write("\t\t\tpath: memento.icon_path\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomIcon, new draw2d.layout.locator.CenterLocator(this));\r\n");
      out.write("\t\tthis.atomIcon = atomIcon;\r\n");
      out.write("\r\n");
      out.write("\t\treturn this;\r\n");
      out.write("\t},\r\n");
      out.write("\tgetPersistentAttributes: function() {\r\n");
      out.write("\t\tvar memento = this._super();\r\n");
      out.write("\t\tmemento.label = this.atomLabel.getText();\r\n");
      out.write("\t\tmemento.icon_path = this.atomIcon.getPath();\r\n");
      out.write("\t\treturn memento;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDoubleClick: function() {\r\n");
      out.write("\t\tg_canvas.setCurrentSelection(this);\r\n");
      out.write("\t\tvar userData = this.userData;\r\n");
      out.write("\t\tvar node = userData;\r\n");
      out.write("\t\tnode.image_x = this.getX();\r\n");
      out.write("\t\tnode.image_y = this.getY();\r\n");
      out.write("\t\topenNodeModal(node, false);\r\n");
      out.write("\t},\r\n");
      out.write("\tonContextMenu: function() {\r\n");
      out.write("\t\tshowContextMenu(this);\r\n");
      out.write("\t},\r\n");
      out.write("\tonDragStart: function() {\r\n");
      out.write("\t\tthis._super();\r\n");
      out.write("\t\tthis.startX = this.getX();\r\n");
      out.write("\t\tthis.startY = this.getY();\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDrag: function(dx, dy, dx2, dy2) {\r\n");
      out.write("\t\tvar ret = this._super(dx, dy, dx2, dy2);\r\n");
      out.write("\t\tonDragProc(this);\r\n");
      out.write("\t\treturn ret;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDragEnd: function() {\r\n");
      out.write("\t\t// 연결노드 클릭시 우측에 해당 연결노드 외의 다른 오브젝트의 속성창이 떠있을 경우 속성창을 닫는다.\r\n");
      out.write("\t\tvar ret = this._super();\r\n");
      out.write("\t\tvar bClose = true;\r\n");
      out.write("\t\tif ($(\"#nodeModalDiv.on\").length > 0) {\r\n");
      out.write("\t\t\tvar node = $(\"#nodeModalDiv.on\").data(\"node\");\r\n");
      out.write("\t\t\tif (node.node_name == this.userData.node_name) {\r\n");
      out.write("\t\t\t\tbClose = false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (bClose) {\r\n");
      out.write("\t\t\thideDetailDiv();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tonDragEndProc(this);\r\n");
      out.write("\r\n");
      out.write("\t\treturn ret;\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// DB 조회 후 캔버스 사이즈를 계산한다.\r\n");
      out.write("function calculateCanvasSize() {\r\n");
      out.write("\t$(\"#_atomMinimapDivWrapper\").css(\"transition-duration\", \"0s\");\r\n");
      out.write("\tvar maxRight = 0;\r\n");
      out.write("\tvar maxBottom = 0;\r\n");
      out.write("\tif (g_data.type == LINE_TYPE_NETWORK) {\r\n");
      out.write("\t\tvar pkgList = g_data.pkgList;\r\n");
      out.write("\t\tfor (var i=0;i<pkgList.length;i++) {\r\n");
      out.write("\t\t\tvar pkg = pkgList[i];\r\n");
      out.write("\t\t\tvar right = parseInt(pkg.image_x) + parseInt(pkg.image_width);\r\n");
      out.write("\t\t\tvar bottom = parseInt(pkg.image_y) + parseInt(pkg.image_height);\r\n");
      out.write("\t\t\tif (right > maxRight) {\r\n");
      out.write("\t\t\t\tmaxRight = right;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif (bottom > maxBottom) {\r\n");
      out.write("\t\t\t\tmaxBottom = bottom;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar nodeList = g_data.nodeList;\r\n");
      out.write("\t\tfor (var i=0;i<nodeList.length;i++) {\r\n");
      out.write("\t\t\tvar node = nodeList[i];\r\n");
      out.write("\t\t\tvar right = parseInt(node.image_x) + 62;\r\n");
      out.write("\t\t\tvar bottom = parseInt(node.image_y) + 62;\r\n");
      out.write("\t\t\tif (right > maxRight) {\r\n");
      out.write("\t\t\t\tmaxRight = right;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif (bottom > maxBottom) {\r\n");
      out.write("\t\t\t\tmaxBottom = bottom;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t} else if (g_data.type == LINE_TYPE_PROCESS) {\r\n");
      out.write("\t\tvar procList = g_data.procList;\r\n");
      out.write("\t\tif (procList != null) {\r\n");
      out.write("\t\t\tfor (var i=0;i<procList.length;i++) {\r\n");
      out.write("\t\t\t\tvar proc = procList[i];\r\n");
      out.write("\t\t\t\tif (proc.svc_no == g_data.svc.svc_no) {\r\n");
      out.write("\t\t\t\t\tvar right = parseInt(proc.image_x) + 62;\r\n");
      out.write("\t\t\t\t\tvar bottom = parseInt(proc.image_y) + 62;\r\n");
      out.write("\t\t\t\t\tif (right > maxRight) {\r\n");
      out.write("\t\t\t\t\t\tmaxRight = right;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tif (bottom > maxBottom) {\r\n");
      out.write("\t\t\t\t\t\tmaxBottom = bottom;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t} else if (g_data.type == LINE_TYPE_BATCHJOB) {\r\n");
      out.write("\t\tvar batchJobList = g_data.batchJobList;\r\n");
      out.write("\t\tif (batchJobList != null) {\r\n");
      out.write("\t\t\tfor (var i=0;i<batchJobList.length;i++) {\r\n");
      out.write("\t\t\t\tvar batchJob = batchJobList[i];\r\n");
      out.write("\t\t\t\tvar right = parseInt(batchJob.image_x) + AtomBatchJob.prototype.WIDTH;\r\n");
      out.write("\t\t\t\tvar bottom = parseInt(batchJob.image_y) + AtomBatchJob.prototype.HEIGHT;\r\n");
      out.write("\t\t\t\tif (right > maxRight) {\r\n");
      out.write("\t\t\t\t\tmaxRight = right;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tif (bottom > maxBottom) {\r\n");
      out.write("\t\t\t\t\tmaxBottom = bottom;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\tif (maxRight == 0 && maxBottom == 0) {\r\n");
      out.write("\t\tmaxRight = 800;\r\n");
      out.write("\t\tmaxBottom = 600;\r\n");
      out.write("\t} else {\r\n");
      out.write("\t\tmaxRight += 100;\r\n");
      out.write("\t\tmaxBottom += 100;\r\n");
      out.write("\t}\r\n");
      out.write("\tif (!g_data.readonly) {\r\n");
      out.write("\t\tif (maxRight < 800) {\r\n");
      out.write("\t\t\tmaxRight = 800;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (maxBottom < 600) {\r\n");
      out.write("\t\t\tmaxBottom = 600;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\tresizeElements(maxRight, maxBottom);\r\n");
      out.write("\t$(\"#_atomMinimapDivWrapper\").css(\"transition-duration\", \"0.4s\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 비율을 계산한다.\r\n");
      out.write("function getRate() {\r\n");
      out.write("\tvar canvasWidth = g_canvas.getWidth();\r\n");
      out.write("\tvar canvasHeight = g_canvas.getHeight();\r\n");
      out.write("\t\r\n");
      out.write("\tvar svgWidth = parseInt($(\"#_atomFlowDesignDiv>svg\").attr(\"width\"));\r\n");
      out.write("\tvar svgHeight = parseInt($(\"#_atomFlowDesignDiv>svg\").attr(\"height\"));\r\n");
      out.write("\t\r\n");
      out.write("\tvar xRate = canvasWidth / svgWidth;\r\n");
      out.write("\tvar yRate = canvasHeight / svgHeight;\r\n");
      out.write("\t\r\n");
      out.write("\tvar rate = xRate;\r\n");
      out.write("\tif (yRate < rate) {\r\n");
      out.write("\t\trate = yRate;\r\n");
      out.write("\t}\r\n");
      out.write("\treturn rate;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// X, Y 좌표에 해당하는 노드를 리턴한다.\r\n");
      out.write("function getNodeByPosition(x, y) {\r\n");
      out.write("\tvar rate = getRate();\r\n");
      out.write("\tvar figures = g_canvas.figures.data;\r\n");
      out.write("\tfor (var i=0;i<figures.length;i++) {\r\n");
      out.write("\t\tvar figure = figures[i];\r\n");
      out.write("\t\tvar left = figure.getX() * rate;\r\n");
      out.write("\t\tvar right = (figure.getX() + figure.getWidth()) * rate;\r\n");
      out.write("\t\tvar top = figure.getY() * rate;\r\n");
      out.write("\t\tvar bottom = (figure.getY() + figure.getHeight()) * rate;\r\n");
      out.write("\t\tif ((figure instanceof AtomNode || figure instanceof AtomLinkedNode) && x > left && x < right && y > top && y < bottom) {\r\n");
      out.write("\t\t\treturn figure;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\treturn null;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 모니터링 화면에서의 정책 오브젝트\r\n");
      out.write("var AtomMonitoringPolicy = draw2d.policy.canvas.ReadOnlySelectionPolicy.extend({\r\n");
      out.write("\tNAME: \"AtomMonitoringPolicy\",\r\n");
      out.write("\tonClick: function(figure, mouseX, mouseY, shiftKey, ctrlKey)\r\n");
      out.write("    {\r\n");
      out.write("\t\thideNodeInformation();\r\n");
      out.write("\t\tvar node = getNodeByPosition(mouseX, mouseY);\r\n");
      out.write("\t\tif (node != null) {\r\n");
      out.write("\t\t\tshowNodeInformation(node, mouseX, mouseY);\r\n");
      out.write("\t\t}\r\n");
      out.write("    }\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 모니터링 화면에서 노드 클릭시 노드 정보를 표시한다.\r\n");
      out.write("// 노드, 연결노드, 스케일노드(INTERNAL_YN='Y' && SCALE_YN = 'Y') 마다 표시되는 정보가 다르다.\r\n");
      out.write("function showNodeInformation(figure, x, y) {\r\n");
      out.write("\tvar rate = getRate();\r\n");
      out.write("\tvar left = (x - 20) / g_canvas.zoomFactor;\r\n");
      out.write("\tvar top = (y - 20) / g_canvas.zoomFactor;\r\n");
      out.write("\tvar userData = figure.getUserData();\r\n");
      out.write("\tvar sHtml = \"\";\r\n");
      out.write("\tsHtml += \"<div id=\\\"_atomNodeInformationDiv\\\" class=\\\"popup_detail type1\\\" style=\\\"position:absolute;top:\"+top+\"px;left:\"+left+\"px;\\\">\";\r\n");
      out.write("\tsHtml += \"\t<div class=\\\"info\\\">\";\r\n");
      out.write("\tsHtml += \"\t\t<a class=\\\"close\\\" href=\\\"javascript:hideNodeInformation();\\\">×</a>\";\r\n");
      out.write("\tsHtml += \"\t\t<header>\";\r\n");
      out.write("\tsHtml += \"\t\t\t<div class=\\\"icon\\\" style=\\\"background-image:url(\"+userData.image_name+\");\\\"></div>\";\r\n");
      out.write("\tsHtml += \"\t\t\t<h3>\"+userData.node_name+\"</h3>\";\r\n");
      out.write("\tsHtml += \"\t\t</header>\";\r\n");
      out.write("\tsHtml += \"\t\t<div class=\\\"cont\\\">\";\r\n");
      out.write("\tif (figure instanceof AtomLinkedNode) {\r\n");
      out.write("\t\tsHtml += \"      <table>\";\r\n");
      out.write("\t\tsHtml += \"        <colgroup>\";\r\n");
      out.write("\t\tsHtml += \"          <col width=\\\"61px\\\">\";\r\n");
      out.write("\t\tsHtml += \"          <col width=\\\"110px\\\">\";\r\n");
      out.write("\t\tsHtml += \"        </colgroup>\";\r\n");
      out.write("\t\tsHtml += \"        <tbody>\";\r\n");
      out.write("\t\tsHtml += \"          <tr>\";\r\n");
      out.write("\t\tsHtml += \"            <th>");
      if (_jspx_meth_spring_005fmessage_005f14(_jspx_page_context))
        return;
      out.write("</th>\";\r\n");
      out.write("\t\tsHtml += \"            <td>\"+userData.ip+\"</td>\";\r\n");
      out.write("\t\tsHtml += \"          </tr>\";\r\n");
      out.write("\t\tsHtml += \"        </tbody>\";\r\n");
      out.write("\t\tsHtml += \"      </table>\";\r\n");
      out.write("\t} else {\r\n");
      out.write("\t\tif (userData.scale_yn == \"Y\") {\r\n");
      out.write("\t\t\tsHtml += \"\t<ul>\";\r\n");
      out.write("\t\t\tfor (var i=0;i<g_data.allNodeList.length;i++) {\r\n");
      out.write("\t\t\t\tvar node = g_data.allNodeList[i];\r\n");
      out.write("\t\t\t\tif (node.pkg_name == userData.pkg_name && node.node_type == userData.node_type) {\r\n");
      out.write("\t\t\t\t\tsHtml += \"        <li>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"          <p>\"+node.node_name+\"</p>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"          <button type=\\\"button\\\" title=\\\"");
      if (_jspx_meth_spring_005fmessage_005f15(_jspx_page_context))
        return;
      out.write("\\\" class=\\\"more\\\" onclick=\\\"javascript:showProcessDiagram('\"+node.pkg_name+\"', '\"+node.node_type+\"', '\"+node.node_no+\"');\\\">");
      if (_jspx_meth_spring_005fmessage_005f16(_jspx_page_context))
        return;
      out.write("</button>\";\r\n");
      out.write("\t\t\t\t\tvar alarmStatus = getNodeAlarmStatus(node);\r\n");
      out.write("\t\t\t\t\tsHtml += \"          <div class=\\\"count\\\">\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"            <span class=\\\"count1\\\">\"+alarmStatus.critical+\"</span>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"            <span class=\\\"count2\\\">\"+alarmStatus.major+\"</span>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"            <span class=\\\"count3\\\">\"+alarmStatus.minor+\"</span>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"            <span class=\\\"count4\\\">\"+alarmStatus.warning+\"</span>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"          </div>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"        </li>\";\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tsHtml += \"    </ul>\";\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tfor (var i=0;i<g_data.allNodeList.length;i++) {\r\n");
      out.write("\t\t\t\tvar node = g_data.allNodeList[i];\r\n");
      out.write("\t\t\t\tif (node.pkg_name == userData.pkg_name && node.node_type == userData.node_type && node.node_name == userData.node_name) {\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t<table>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t<colgroup>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t<col width=\\\"135px\\\">\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t<col width=\\\"180px\\\">\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t</colgroup>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t<tbody>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t<tr>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t<th>");
      if (_jspx_meth_spring_005fmessage_005f17(_jspx_page_context))
        return;
      out.write("</th>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t<td>\"+userData.pkg_name+\"</td>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t</tr>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t<tr>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t<th>");
      if (_jspx_meth_spring_005fmessage_005f18(_jspx_page_context))
        return;
      out.write("</th>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t<td>\"+userData.proc_count+\"</td>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t</tr>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t<tr>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t<th>");
      if (_jspx_meth_spring_005fmessage_005f19(_jspx_page_context))
        return;
      out.write("</th>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t<td>\"+userData.svc_count+\"</td>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t</tr>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t<tr>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t<th>");
      if (_jspx_meth_spring_005fmessage_005f20(_jspx_page_context))
        return;
      out.write("</th>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t<td>\"+userData.linked_count+\"</td>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t</tr>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t<tr>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t<th>");
      if (_jspx_meth_spring_005fmessage_005f21(_jspx_page_context))
        return;
      out.write("</th>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t<td>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t\t<div class=\\\"count\\\">\";\r\n");
      out.write("\t\t\t\t\tvar alarmStatus = getNodeAlarmStatus(userData);\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t\t\t<span class=\\\"count1\\\">\"+alarmStatus.critical+\"</span>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t\t\t<span class=\\\"count2\\\">\"+alarmStatus.major+\"</span>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t\t\t<span class=\\\"count3\\\">\"+alarmStatus.minor+\"</span>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t\t\t<span class=\\\"count4\\\">\"+alarmStatus.warning+\"</span>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t </div>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t</td>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t</tr>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t<tr>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t<th>");
      if (_jspx_meth_spring_005fmessage_005f22(_jspx_page_context))
        return;
      out.write("</th>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t\t<td>\"+userData.update_date+\"</td>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t\t</tr>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t\t</tbody>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t</table>\";\r\n");
      out.write("\t\t\t\t\tsHtml += \"\t\t\t<button type=\\\"button\\\" title=\\\"");
      if (_jspx_meth_spring_005fmessage_005f23(_jspx_page_context))
        return;
      out.write("\\\" class=\\\"more\\\" onclick=\\\"javascript:showProcessDiagram('\"+node.pkg_name+\"', '\"+node.node_type+\"', '\"+node.node_no+\"');\\\">");
      if (_jspx_meth_spring_005fmessage_005f24(_jspx_page_context))
        return;
      out.write("</button>\";\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tsHtml += \"\t\t</div>\";\r\n");
      out.write("\t\tsHtml += \"\t</div>\";\r\n");
      out.write("\t\tsHtml += \"</div>\";\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#_atomDroppableDiv\").css(\"background\", \"\");\r\n");
      out.write("\t$(\"#_atomDroppableDiv\").show();\r\n");
      out.write("\t$(\"#_atomDroppableDiv\").append(sHtml);\r\n");
      out.write("\t$(\"#_atomNodeInformationDiv\").slideDown();\r\n");
      out.write("\t$(\"#_atomNodeInformationDiv\").mouseleave(function() {\r\n");
      out.write("\t\thideNodeInformation();\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 노드 상세화면을 불러온다.\r\n");
      out.write("function showProcessDiagram(pkg_name, node_type, node_no) {\r\n");
      out.write("\t// parent.console.log(\"pkg_name=\"+pkg_name+\", node_type=\"+node_type+\", node_no=\"+node_no);\r\n");
      out.write("\thideNodeInformation();\r\n");
      out.write("\tparent.loadProcessDiagram(pkg_name, node_type);\r\n");
      out.write("\tparent.requestNodeResourceInfo(node_no);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 모니터링 화면에서 노드의 알람 건수를 계산한다.\r\n");
      out.write("function getNodeAlarmStatus(node) {\r\n");
      out.write("\tvar alarmStatus = new Object();\r\n");
      out.write("\talarmStatus.critical = 0;\r\n");
      out.write("\talarmStatus.major = 0;\r\n");
      out.write("\talarmStatus.minor = 0;\r\n");
      out.write("\talarmStatus.warning = 0;\r\n");
      out.write("\tparent.$(\"#alarmList tr\").each(function() {\r\n");
      out.write("\t\tif ($(this).find(\"#tr_node_name\").text() == node.node_name) {\r\n");
      out.write("\t\t\tif ($(this).find(\"#tr_severity_name\").hasClass(\"cr\")) {\r\n");
      out.write("\t\t\t\talarmStatus.critical ++;\r\n");
      out.write("\t\t\t} else if ($(this).find(\"#tr_severity_name\").hasClass(\"ma\")) {\r\n");
      out.write("\t\t\t\talarmStatus.major ++;\r\n");
      out.write("\t\t\t} else if ($(this).find(\"#tr_severity_name\").hasClass(\"mi\")) {\r\n");
      out.write("\t\t\t\talarmStatus.minor ++;\r\n");
      out.write("\t\t\t} else if ($(this).find(\"#tr_severity_name\").hasClass(\"wa\")) {\r\n");
      out.write("\t\t\t\talarmStatus.warning ++;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\treturn alarmStatus;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 모니터링 화면에서 노드 클릭시 나타나는 노드 정보를 제거한다.\r\n");
      out.write("function hideNodeInformation() {\r\n");
      out.write("\t$(\"#_atomNodeInformationDiv\").remove();\r\n");
      out.write("\t$(\"#_atomDroppableDiv\").hide();\r\n");
      out.write("\t$(\"#_atomDroppableDiv\").css(\"background\", \"rgba(255,255,255,0.5)\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 편집 화면에서의 정책 오브젝트\r\n");
      out.write("var AtomBoundingboxSelectionPolicy = draw2d.policy.canvas.BoundingboxSelectionPolicy.extend({\r\n");
      out.write("\tNAME: \"AtomBoundingboxSelectionPolicy\",\r\n");
      out.write("\tonClick: function(figure, mouseX, mouseY, shiftKey, ctrlKey) {\r\n");
      out.write("\t\t// draw2d 오브젝트 클릭시 클릭된 오브젝트를 앞으로 가져온다.\r\n");
      out.write("\t\t// 단, 패키지 오브젝트는패키지 외의 다른 오브젝트들보다는 뒤에 위치한다.\r\n");
      out.write("\t\tif (figure != null) {\r\n");
      out.write("\t\t\tif (figure instanceof AtomPkg) {\r\n");
      out.write("\t\t\t\tvar figures = g_canvas.figures.data;\r\n");
      out.write("\t\t\t\tfor (var i=0;i<figures.length;i++) {\r\n");
      out.write("\t\t\t\t\tvar f = figures[i];\r\n");
      out.write("\t\t\t\t\tif (f instanceof AtomPkg && f.id != figure.id) {\r\n");
      out.write("\t\t\t\t\t\tfigure.toFront(f);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t} else if (figure instanceof AtomNode || figure instanceof AtomLinkedNode || figure instanceof AtomProc || figure instanceof AtomBatchJob || figure instanceof AtomLine) {\r\n");
      out.write("\t\t\t\tfigure.toFront();\r\n");
      out.write("\t\t\t} else if (figure instanceof AtomLabel || figure instanceof AtomIcon || figure instanceof AtomCircle) {\r\n");
      out.write("\t\t\t\tfigure.parent.toFront();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t},\r\n");
      out.write("\tonMouseUp: function(canvas, x, y, shiftKey, ctrlKey) {\r\n");
      out.write("\t\t// 패키지 오브젝트를 리사이즈할 때, Undo, Redo를 위해 미니맵의 commandStack 에 빈 command 를 추가한다.\r\n");
      out.write("\t\tg_minimap.commandStack.startTransaction();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif (this.mouseDownElement != null && this.mouseDownElement.isResizeHandle) {\r\n");
      out.write("\t\t\tvar mFigure = g_minimap.getFigure(this.mouseDownElement.owner.id);\r\n");
      out.write("\t\t\tvar mCommandResize = new draw2d.command.CommandAttr(mFigure, {});\r\n");
      out.write("\t\t\tg_minimap.commandStack.execute(mCommandResize);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tthis._super(canvas, x, y, shiftKey, ctrlKey);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tg_minimap.commandStack.commitTransaction();\r\n");
      out.write("\t\tupdateUndoRedoButton();\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 캔버스를 초기화한다.\r\n");
      out.write("function initCanvas(id) {\r\n");
      out.write("\t$(\"#\"+id).unbind();\r\n");
      out.write("\t$(\"#\"+id+\">svg\").remove();\r\n");
      out.write("\tif (g_canvas != null) {\r\n");
      out.write("\t\tg_canvas.clear();\r\n");
      out.write("\t\tg_canvas.destroy();\r\n");
      out.write("\t}\r\n");
      out.write("\tg_canvas = new draw2d.Canvas(id);\r\n");
      out.write("\r\n");
      out.write("\tif (g_data.readonly) {\r\n");
      out.write("\t\tg_canvas.installEditPolicy(new AtomMonitoringPolicy());\r\n");
      out.write("\t} else {\r\n");
      out.write("\t\tg_canvas.installEditPolicy(new AtomBoundingboxSelectionPolicy());\r\n");
      out.write("\t\t$(\"#\"+id+\">svg\").css({\r\n");
      out.write("\t\t\t\"background-image\": \"url(/images/flowdesign_bg.png)\",\r\n");
      out.write("\t\t\t\"border-bottom\": \"2px solid #c2c5cc\",\r\n");
      out.write("\t\t\t\"border-right\": \"2px solid #c2c5cc\"\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t$(\".line>button:first\").trigger(\"click\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 미니맵을 초기화한다.\r\n");
      out.write("function initMinimap(id) {\r\n");
      out.write("\t$(\"#\"+id+\">svg\").remove();\r\n");
      out.write("\tg_minimap = new draw2d.Canvas(id);\r\n");
      out.write("\tg_minimap.installEditPolicy(new draw2d.policy.canvas.ReadOnlySelectionPolicy());\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// Undo, Redo 버튼 상태를 업데이트한다. \r\n");
      out.write("function updateUndoRedoButton() {\r\n");
      out.write("\tsetTimeout(function() {\r\n");
      out.write("\t\tvar commandStack = g_canvas.getCommandStack();\r\n");
      out.write("\t\tif (commandStack.canUndo()) {\r\n");
      out.write("\t\t\t$(\"#_atomUndoButton\").css(\"opacity\", 1);\r\n");
      out.write("\t\t\t$(\"#_atomUndoButton\").prop(\"disabled\", false);\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\t$(\"#_atomUndoButton\").css(\"opacity\", 0.2);\r\n");
      out.write("\t\t\t$(\"#_atomUndoButton\").prop(\"disabled\", true);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (commandStack.canRedo()) {\r\n");
      out.write("\t\t\t$(\"#_atomRedoButton\").css(\"opacity\", 1);\r\n");
      out.write("\t\t\t$(\"#_atomRedoButton\").prop(\"disabled\", false);\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\t$(\"#_atomRedoButton\").css(\"opacity\", 0.2);\r\n");
      out.write("\t\t\t$(\"#_atomRedoButton\").prop(\"disabled\", true);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}, 0);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 미니맵을 새로고침한다.\r\n");
      out.write("function refreshMinimap() {\r\n");
      out.write("\t// console.log(\"refreshMinimap\");\r\n");
      out.write("\tif ($(\"#_atomMinimapDivWrapper:visible\").length > 0) {\r\n");
      out.write("\t\tg_minimap.clear();\r\n");
      out.write("\t\tvar writer = new draw2d.io.json.Writer();\r\n");
      out.write("\t\twriter.marshal(g_canvas, function(json) {\r\n");
      out.write("\t\t\tvar reader = new draw2d.io.json.Reader();\r\n");
      out.write("\t\t\treader.unmarshal(g_minimap, json);\r\n");
      out.write("\t\t\tvar zoom = getMinimapZoom();\r\n");
      out.write("\t\t\t$(\"#_atomMinimapDiv>svg\").css({\r\n");
      out.write("\t\t\t\twidth: $(\"#_atomMinimapDivWrapper\").width(),\r\n");
      out.write("\t\t\t\theight: $(\"#_atomMinimapDivWrapper\").height(),\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\tg_minimap.zoomFactor = zoom;\r\n");
      out.write("\t\t\tsetLabelsVisible(g_minimap, false);\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("var g_updateLine = false; // 라인 팝업창에서 라인연결을 명령했는지 여부를 판단하는 변수\r\n");
      out.write("\r\n");
      out.write("// 라인 연결시 호출된다.\r\n");
      out.write("// 로딩이 완료되지 않았거나, 라인 팝업창에서 연결 명령 시 라인을 연결하고\r\n");
      out.write("// 그 외의 경우에는 라인 팝업창을 연다.\r\n");
      out.write("draw2d.Configuration.factory.createConnection = function(sourcePort, targetPort) {\r\n");
      out.write("\tif (!g_bLoaded) {\r\n");
      out.write("\t\tvar atomLine = new AtomLine();\r\n");
      out.write("\t\treturn atomLine;\r\n");
      out.write("\t} else {\r\n");
      out.write("\t\tif (g_updateLine) {\r\n");
      out.write("\t\t\tvar atomLine = new AtomLine();\r\n");
      out.write("\t\t\treturn atomLine;\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tvar line = new Object();\r\n");
      out.write("\t\t\tvar source = sourcePort.parent;\r\n");
      out.write("\t\t\tvar target = targetPort.parent;\r\n");
      out.write("\t\t\tvar sourceUserData = source.userData;\r\n");
      out.write("\t\t\tvar targetUserData = target.userData;\r\n");
      out.write("\t\t\tvar lineType;\r\n");
      out.write("\t\t\tvar keyName;\r\n");
      out.write("\t\t\tif (g_data.type == LINE_TYPE_NETWORK) {\r\n");
      out.write("\t\t\t\tlineType = LINE_OBJECT_TYPE_NODE;\r\n");
      out.write("\t\t\t\tkeyName = \"node_name_old\";\r\n");
      out.write("\t\t\t} else if (g_data.type == LINE_TYPE_PROCESS) {\r\n");
      out.write("\t\t\t\tlineType = LINE_OBJECT_TYPE_PROCESS;\r\n");
      out.write("\t\t\t\tkeyName = \"image_uuid\";\r\n");
      out.write("\t\t\t} else if (g_data.type == LINE_TYPE_BATCHJOB) {\r\n");
      out.write("\t\t\t\tlineType = LINE_OBJECT_TYPE_BATCHJOB;\r\n");
      out.write("\t\t\t\tkeyName = \"image_uuid\";\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tline.source_type = lineType;\r\n");
      out.write("\t\t\tline.source_id = sourceUserData[keyName];\r\n");
      out.write("\t\t\tline.source_port = sourcePort.name;\r\n");
      out.write("\t\t\tline.target_type = lineType;\r\n");
      out.write("\t\t\tline.target_id = targetUserData[keyName];\r\n");
      out.write("\t\t\tline.target_port = targetPort.name;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar lines = g_canvas.lines.data;\r\n");
      out.write("\t\t\tfor (var i=0;i<lines.length;i++) {\r\n");
      out.write("\t\t\t\tvar existLine = lines[i];\r\n");
      out.write("\t\t\t\tvar compareSource = existLine.sourcePort.parent;\r\n");
      out.write("\t\t\t\tvar compareTarget = existLine.targetPort.parent;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif ((source.id == compareSource.id && target.id == compareTarget.id) || target.id == compareSource.id && source.id == compareTarget.id) {\r\n");
      out.write("\t\t\t\t\topenAlertModal(\"");
      if (_jspx_meth_spring_005fmessage_005f25(_jspx_page_context))
        return;
      out.write("\");\r\n");
      out.write("\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\topenLineModal(line, true);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("// 라인의 텍스트 위치 지정을 위한 Locator\r\n");
      out.write("var AtomConnectionLocator = draw2d.layout.locator.ManhattanMidpointLocator.extend({\r\n");
      out.write("\tNAME: \"AtomConnectionLocator\",\r\n");
      out.write("\trelocate: function(index, target) {\r\n");
      out.write("\t\tvar conn = target.getParent();\r\n");
      out.write("\t\tvar points = conn.getVertices();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar segmentIndex = Math.floor((points.getSize() -2) / 2);\r\n");
      out.write("\t\tif (points.getSize() <= segmentIndex+1)\r\n");
      out.write("\t\t\treturn; \r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar p1 = points.get(segmentIndex);\r\n");
      out.write("\t\tvar p2 = points.get(segmentIndex + 1);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar x = ((p2.x - p1.x) / 2 + p1.x - target.getWidth()/2)|0;\r\n");
      out.write("\t\tvar y = (((p2.y - p1.y) / 2 + p1.y - target.getHeight()/2)|0) - 10;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\ttarget.setPosition(x,y);\r\n");
      out.write("    }\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 라인 오브젝트\r\n");
      out.write("var AtomLine = draw2d.Connection.extend({\r\n");
      out.write("\tNAME: \"AtomLine\",\r\n");
      out.write("\ttype: \"Line\",\r\n");
      out.write("\tinit: function(attr, setter, getter) {\r\n");
      out.write("\t\tthis._super(attr, setter, getter);\r\n");
      out.write("\t\tthis.setStroke(2);\r\n");
      out.write("\t\tthis.setColor(\"#1f1e34\");\r\n");
      out.write("\t\tthis.setTargetDecorator(new draw2d.decoration.connection.ArrowDecorator(10, 6).setBackgroundColor(\"#1f1e34\"));\r\n");
      out.write("\r\n");
      out.write("\t\tvar atomLabel = new AtomLabel({\r\n");
      out.write("\t\t\tfontSize: 12,\r\n");
      out.write("\t\t\tfontColor: \"#797980\"\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tthis.add(atomLabel, new AtomConnectionLocator(this));\r\n");
      out.write("\t\tthis.atomLabel = atomLabel;\r\n");
      out.write("\t},\r\n");
      out.write("\tsetPersistentAttributes: function(memento) {\r\n");
      out.write("\t\tthis._super(memento);\r\n");
      out.write("\t\tthis.setTargetDecorator(new draw2d.decoration.connection.ArrowDecorator(10, 6).setBackgroundColor(\"#1f1e34\"));\r\n");
      out.write("\t\tthis.setUserData(memento.userData);\r\n");
      out.write("\t},\r\n");
      out.write("\tgetPersistentAttributes: function() {\r\n");
      out.write("\t\tvar memento = this._super();\r\n");
      out.write("\t\tmemento.userData = this.userData;\r\n");
      out.write("\t\treturn memento;\r\n");
      out.write("\t},\r\n");
      out.write("\tsetUserData: function(object) {\r\n");
      out.write("\t\tthis._super(object);\r\n");
      out.write("\t\tif (this.sourcePort != null && this.targetPort != null) {\r\n");
      out.write("\t\t\tvar source = this.sourcePort.parent;\r\n");
      out.write("\t\t\tvar target = this.targetPort.parent;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (source instanceof AtomLinkedNode || target instanceof AtomLinkedNode) {\r\n");
      out.write("\t\t\t\tthis.setSourceDecorator(null);\r\n");
      out.write("\t\t\t\tthis.setTargetDecorator(null);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif (g_data.readonly && g_data.type == LINE_TYPE_NETWORK) {\r\n");
      out.write("\t\t\t\t// Monitoring Network Line Color\r\n");
      out.write("\t\t\t\t// 모니터링 화면에서 라인의 색상을 변경한다.\r\n");
      out.write("\t\t\t\t// TAT_CONNECT 테이블에 STATUS_CCD가 SUCCESS 이고 CNT > 0 인 경우 Running\r\n");
      out.write("\t\t\t\t// TAT_CONNECT 테이블에 STATUS_CCD가 SUCCESS 이고 CNT = 0 인 경우 Stopped\r\n");
      out.write("\t\t\t\t// TAT_CONNECT 테이블에 STATUS_CCD가 FAIL 인 경우 Abnormal\r\n");
      out.write("\t\t\t\t// 그 외의 경우에는 색상 표시 안함(검정)\r\n");
      out.write("\t\t\t\tvar sourceUserData = source.userData;\r\n");
      out.write("\t\t\t\tvar sourceNodeNoList = new Array();\r\n");
      out.write("\t\t\t\tvar targetNodeList = new Array();\r\n");
      out.write("\t\t\t\tif (sourceUserData.scale_yn == \"Y\" && sourceUserData.internal_yn == \"Y\") {\r\n");
      out.write("\t\t\t\t\tsourceNodeNoList = getInternalNodeNo(sourceUserData);\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tsourceNodeNoList = getExternalNodeNo(sourceUserData);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar targetUserData = target.userData;\r\n");
      out.write("\t\t\t\tvar targetNodeNoList = new Array();\r\n");
      out.write("\t\t\t\tif (targetUserData.scale_yn == \"Y\" && targetUserData.internal_yn == \"Y\") {\r\n");
      out.write("\t\t\t\t\ttargetNodeNoList = getInternalNodeNo(targetUserData);\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\ttargetNodeNoList = getExternalNodeNo(targetUserData);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tfor (var i=0;i<sourceNodeNoList.length;i++) {\r\n");
      out.write("\t\t\t\t\tfor (var j=0;j<targetNodeNoList.length;j++) {\r\n");
      out.write("\t\t\t\t\t\tvar connection = getConnection(sourceNodeNoList[i], targetNodeNoList[j]);\r\n");
      out.write("\t\t\t\t\t\t// console.log(sourceNodeNoList[i], targetNodeNoList[j]);\r\n");
      out.write("\t\t\t\t\t\t// console.log(connection);\r\n");
      out.write("\t\t\t\t\t\tvar color = null;\r\n");
      out.write("\t\t\t\t\t\tvar level = 0;\r\n");
      out.write("\t\t\t\t\t\tif (connection != null) {\r\n");
      out.write("\t\t\t\t\t\t\tif (connection.status_ccd == \"SUCCESS\") {\r\n");
      out.write("\t\t\t\t\t\t\t\tif (parseInt(connection.cnt) > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tlevel = 1;\r\n");
      out.write("\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tlevel = 2;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t} else if (connection.status_ccd == \"FAIL\") {\r\n");
      out.write("\t\t\t\t\t\t\t\tlevel = 3;\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t// console.log(\"level1=\"+level);\r\n");
      out.write("\t\t\t\t\t\tif (this.level == null || level > this.level) {\r\n");
      out.write("\t\t\t\t\t\t\tthis.level = level;\r\n");
      out.write("\t\t\t\t\t\t\tif (level > 0) {\r\n");
      out.write("\t\t\t\t\t\t\t\tswitch(level) {\r\n");
      out.write("\t\t\t\t\t\t\t\tcase 3:\r\n");
      out.write("\t\t\t\t\t\t\t\t\t// Abnormal\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcolor = \"#f04343\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\tcase 2:\r\n");
      out.write("\t\t\t\t\t\t\t\t\t// Stop\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcolor = \"#f2b230\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\tcase 1:\r\n");
      out.write("\t\t\t\t\t\t\t\t\t// Running\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcolor = \"#00a8eb\";\r\n");
      out.write("\t\t\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t// console.log(\"level2=\"+level);\r\n");
      out.write("\t\t\t\t\t\t\t// console.log(\"color2=\"+color);\r\n");
      out.write("\t\t\t\t\t\t\tif (color != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\tthis.setColor(color);\r\n");
      out.write("\t\t\t\t\t\t\t\tvar targetDecorator = this.getTargetDecorator();\r\n");
      out.write("\t\t\t\t\t\t\t\tif (targetDecorator != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tthis.setTargetDecorator(new draw2d.decoration.connection.ArrowDecorator(10, 6).setBackgroundColor(color));\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\tvar sourceDecorator = this.getSourceDecorator();\r\n");
      out.write("\t\t\t\t\t\t\t\tif (sourceDecorator != null) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tthis.setSourceDecorator(new draw2d.decoration.connection.ArrowDecorator(10, 6).setBackgroundColor(color));\r\n");
      out.write("\t\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (object != null) {\r\n");
      out.write("\t\t\tvar router = eval(\"new \"+object.router+\"()\");\r\n");
      out.write("\t\t\tthis.setRouter(router);\r\n");
      out.write("\t\t\tif (object.full_duplex == \"Y\") {\r\n");
      out.write("\t\t\t\tthis.setSourceDecorator(new draw2d.decoration.connection.ArrowDecorator(10, 6).setBackgroundColor(\"#1f1e34\"));\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tthis.setSourceDecorator(null);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tobject.image_uuid = this.id;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tthis.atomLabel.setText(nullCheck(object.line_desc));\r\n");
      out.write("\t\t}\r\n");
      out.write("\t},\r\n");
      out.write("\tonDoubleClick: function() {\r\n");
      out.write("\t\tg_canvas.setCurrentSelection(this);\r\n");
      out.write("\t\tvar userData = this.userData;\r\n");
      out.write("\t\tuserData.image_uuid = this.id;\r\n");
      out.write("\t\topenLineModal(userData, false);\r\n");
      out.write("\t},\r\n");
      out.write("\tonContextMenu: function() {\r\n");
      out.write("\t\tshowContextMenu(this);\r\n");
      out.write("\t},\r\n");
      out.write("\tonDragStart: function() {\r\n");
      out.write("\t\tthis._super();\r\n");
      out.write("\t\tthis.sourceId = this.sourcePort.parent.id;\r\n");
      out.write("\t\tthis.targetId = this.targetPort.parent.id;\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t},\r\n");
      out.write("\tonDragEnd: function() {\r\n");
      out.write("\t\t// 라인 클릭시 우측에 해당 라인 외의 다른 오브젝트의 속성창이 떠있을 경우 속성창을 닫는다.\r\n");
      out.write("\t\tvar ret = this._super();\r\n");
      out.write("\t\tvar bClose = true;\r\n");
      out.write("\t\tif ($(\"#lineModalDiv.on\").length > 0) {\r\n");
      out.write("\t\t\tvar line = $(\"#lineModalDiv.on\").data(\"line\");\r\n");
      out.write("\t\t\tif (line.image_uuid == this.id) {\r\n");
      out.write("\t\t\t\tbClose = false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (bClose) {\r\n");
      out.write("\t\t\thideDetailDiv();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn ret;\r\n");
      out.write("\t},\r\n");
      out.write("\tsetSource: function(port) {\r\n");
      out.write("\t\t// 소스 오브젝트 설정시 미니맵 라인의 소스 오브젝트도 같이 변경한다.\r\n");
      out.write("\t\tthis._super(port);\r\n");
      out.write("\t\tvar canvas = this.getCanvas();\r\n");
      out.write("\t\tif (g_bLoaded && canvas != null && canvas.canvasId == g_canvas.canvasId) {\r\n");
      out.write("\t\t\tvar mSource = g_minimap.getFigure(this.sourcePort.parent.id);\r\n");
      out.write("\t\t\tvar mPort = mSource.getHybridPort(this.sourcePort.name);\r\n");
      out.write("\t\t\tvar mAtomLine = g_minimap.getLine(this.id);\r\n");
      out.write("\t\t\tmAtomLine.setSource(mPort);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t},\r\n");
      out.write("\tsetTarget: function(port) {\r\n");
      out.write("\t\t// 타겟 오브젝트 설정시 미니맵 라인의 타겟 오브젝트도 같이 변경한다.\r\n");
      out.write("\t\tthis._super(port);\r\n");
      out.write("\t\tvar canvas = this.getCanvas();\r\n");
      out.write("\t\tif (g_bLoaded && canvas != null && canvas.canvasId == g_canvas.canvasId) {\r\n");
      out.write("\t\t\tvar mTarget = g_minimap.getFigure(this.targetPort.parent.id);\r\n");
      out.write("\t\t\tvar mPort = mTarget.getHybridPort(this.targetPort.name);\r\n");
      out.write("\t\t\tvar mAtomLine = g_minimap.getLine(this.id);\r\n");
      out.write("\t\t\tmAtomLine.setTarget(mPort);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 소스와 타겟의 NODE_NO 로 라인을 찾아 리턴한다.\r\n");
      out.write("function getConnection(sourceNodeNo, targetNodeNo) {\r\n");
      out.write("\tfor (var i=0;i<g_data.connectionList.length;i++) {\r\n");
      out.write("\t\tvar connection = g_data.connectionList[i];\r\n");
      out.write("\t\tif (connection.my_node_no == sourceNodeNo && connection.peer_node_no == targetNodeNo) {\r\n");
      out.write("\t\t\treturn connection;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\treturn null;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 내부노드(INTERNAL_YN = 'Y')의 NODE_NO Array 를 리턴한다.\r\n");
      out.write("function getInternalNodeNo(userData) {\r\n");
      out.write("\tvar ret = new Array();\r\n");
      out.write("\tfor (var i=0;i<g_data.allNodeList.length;i++) {\r\n");
      out.write("\t\tvar node = g_data.allNodeList[i];\r\n");
      out.write("\t\tif (node.pkg_name == userData.pkg_name && node.node_type == userData.node_type) {\r\n");
      out.write("\t\t\tret.push(node.node_no);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\treturn ret;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 연결노드(INTERNAL_YN = 'N')의 NODE_NO Array 를 리턴한다.\r\n");
      out.write("function getExternalNodeNo(userData) {\r\n");
      out.write("\tvar ret = new Array();\r\n");
      out.write("\tfor (var i=0;i<g_data.allNodeList.length;i++) {\r\n");
      out.write("\t\tvar node = g_data.allNodeList[i];\r\n");
      out.write("\t\tif (node.pkg_name == userData.pkg_name && node.node_type == userData.node_type && node.node_name == userData.node_name) {\r\n");
      out.write("\t\t\tret.push(node.node_no);\r\n");
      out.write("\t\t\treturn ret;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\treturn ret;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 캔버스 영역 및 미니맵 영역을 리사이즈한다.\r\n");
      out.write("function resizeElements(width, height) {\r\n");
      out.write("\twidth = parseInt(width);\r\n");
      out.write("\theight = parseInt(height);\r\n");
      out.write("\t$(\"#_atomFlowDesignDiv, #_atomMinimapDiv\").css({\r\n");
      out.write("\t\twidth: width,\r\n");
      out.write("\t\theight: height\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\tvar maxWidth = $(\"#_atomFlowDesignDivWrapper\").width() - 331;\r\n");
      out.write("\tvar maxHeight = $(\"#_atomFlowDesignDivWrapper\").height();\r\n");
      out.write("\r\n");
      out.write("\tvar minimapWidth = 100;\r\n");
      out.write("\tvar minimapHeight = minimapWidth * height / width;\r\n");
      out.write("\tif (width > height) {\r\n");
      out.write("\t\tvar minimapHeight = 100;\r\n");
      out.write("\t\tvar minimapWidth = minimapHeight * width / height;\r\n");
      out.write("\t}\r\n");
      out.write("\tif (minimapWidth > maxWidth) {\r\n");
      out.write("\t\tvar rate = minimapWidth / maxWidth;\r\n");
      out.write("\t\tminimapWidth = maxWidth;\r\n");
      out.write("\t\tminimapHeight /= rate;\r\n");
      out.write("\t}\r\n");
      out.write("\tif (minimapHeight > maxHeight) {\r\n");
      out.write("\t\tvar rate = minimapHeight / maxHeight;\r\n");
      out.write("\t\tminimapHeight = maxHeight;\r\n");
      out.write("\t\tminimapWidth /= rate;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tminimapWidth += 2; // border\r\n");
      out.write("\tminimapHeight += 2; // border\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"style\").append(\"#_atomMinimapDivWrapper{left:calc(100% - \"+(minimapWidth+21)+\"px);top:calc(100% - \"+(minimapHeight+21)+\"px);width:\"+minimapWidth+\"px;height:\"+minimapHeight+\"px;}\");\r\n");
      out.write("\t$(\"style\").append(\"#_atomMinimapDivWrapper.on{left:calc(100% - \"+(310+minimapWidth+21)+\"px);}\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 캔버스를 리사이즈한다.\r\n");
      out.write("function resizeCanvas() {\r\n");
      out.write("\tif ($(\"#resizeModalDiv #canvas_width\").val() == \"\") {\r\n");
      out.write("\t\t$(\"#resizeModalDiv #errorSpan\").text(\"");
      if (_jspx_meth_spring_005fmessage_005f26(_jspx_page_context))
        return;
      out.write("\");\r\n");
      out.write("\t\t$(\"#resizeModalDiv #errorSpan\").attr(\"class\", \"show\");\r\n");
      out.write("\t\t$(\"#resizeModalDiv #canvas_width\").focus();\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tif (!isValidNaturalNumber($(\"#resizeModalDiv #canvas_width\").val())) {\r\n");
      out.write("\t\t$(\"#resizeModalDiv #errorSpan\").text(\"");
      if (_jspx_meth_spring_005fmessage_005f27(_jspx_page_context))
        return;
      out.write("\");\r\n");
      out.write("\t\t$(\"#resizeModalDiv #errorSpan\").attr(\"class\", \"show\");\r\n");
      out.write("\t\t$(\"#resizeModalDiv #canvas_width\").focus();\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tif ($(\"#resizeModalDiv #canvas_height\").val() == \"\") {\r\n");
      out.write("\t\t$(\"#resizeModalDiv #errorSpan\").text(\"");
      if (_jspx_meth_spring_005fmessage_005f28(_jspx_page_context))
        return;
      out.write("\");\r\n");
      out.write("\t\t$(\"#resizeModalDiv #errorSpan\").attr(\"class\", \"show\");\r\n");
      out.write("\t\t$(\"#resizeModalDiv #canvas_height\").focus();\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tif (!isValidNaturalNumber($(\"#resizeModalDiv #canvas_height\").val())) {\r\n");
      out.write("\t\t$(\"#resizeModalDiv #errorSpan\").text(\"");
      if (_jspx_meth_spring_005fmessage_005f29(_jspx_page_context))
        return;
      out.write("\");\r\n");
      out.write("\t\t$(\"#resizeModalDiv #errorSpan\").attr(\"class\", \"show\");\r\n");
      out.write("\t\t$(\"#resizeModalDiv #canvas_height\").focus();\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t// 최소사이즈 체크\r\n");
      out.write("\tvar maxRight = 0;\r\n");
      out.write("\tvar maxBottom = 0;\r\n");
      out.write("\tvar figures = g_canvas.figures.data;\r\n");
      out.write("\tfor (var i=0;i<figures.length;i++) {\r\n");
      out.write("\t\tvar figure = figures[i];\r\n");
      out.write("\t\tvar x = figure.x + figure.width + 100;\r\n");
      out.write("\t\tvar y = figure.y + figure.height + 100;\r\n");
      out.write("\t\tif (x > maxRight) {\r\n");
      out.write("\t\t\tmaxRight = x;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (y > maxBottom) {\r\n");
      out.write("\t\t\tmaxBottom = y;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\tif (parseInt($(\"#resizeModalDiv #canvas_width\").val()) < maxRight) {\r\n");
      out.write("\t\t$(\"#resizeModalDiv #errorSpan\").text(\"");
      if (_jspx_meth_spring_005fmessage_005f30(_jspx_page_context))
        return;
      out.write(" \"+maxRight);\r\n");
      out.write("\t\t$(\"#resizeModalDiv #errorSpan\").attr(\"class\", \"show\");\r\n");
      out.write("\t\t$(\"#resizeModalDiv #canvas_width\").focus();\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tif (parseInt($(\"#resizeModalDiv #canvas_height\").val()) < maxBottom) {\r\n");
      out.write("\t\t$(\"#resizeModalDiv #errorSpan\").text(\"");
      if (_jspx_meth_spring_005fmessage_005f31(_jspx_page_context))
        return;
      out.write(" \"+maxBottom);\r\n");
      out.write("\t\t$(\"#resizeModalDiv #errorSpan\").attr(\"class\", \"show\");\r\n");
      out.write("\t\t$(\"#resizeModalDiv #canvas_height\").focus();\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tvar writer = new draw2d.io.json.Writer();\r\n");
      out.write("\twriter.marshal(g_canvas, function(json) {\r\n");
      out.write("\t\tg_canvas.destroy();\r\n");
      out.write("\t\tg_minimap.destroy();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar width = $(\"#resizeModalDiv #canvas_width\").val();\r\n");
      out.write("\t\tvar height = $(\"#resizeModalDiv #canvas_height\").val();\r\n");
      out.write("\r\n");
      out.write("\t\tresizeElements(width, height);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tprepareDrawCanvas();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar reader = new draw2d.io.json.Reader();\r\n");
      out.write("\t\treader.unmarshal(g_canvas, json);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfinishDrawCanvas();\r\n");
      out.write("\t\tcloseModal();\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 캔버스 영역을 스크롤할 때 호출된다.\r\n");
      out.write("// 미니맵 영역의 위치를 스크롤 영역에 맞게 조절한다.\r\n");
      out.write("function onScrollDivWrapper() {\r\n");
      out.write("\tif (g_bMinimapClick) {\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tvar scrollLeft = $(\"#_atomFlowDesignDivWrapper\").prop(\"scrollLeft\");\r\n");
      out.write("\tvar scrollTop = $(\"#_atomFlowDesignDivWrapper\").prop(\"scrollTop\");\r\n");
      out.write("\tvar zoom = g_canvas.zoomFactor;\r\n");
      out.write("\tvar minimapZoom = getMinimapZoom();\r\n");
      out.write("\tvar left = scrollLeft / minimapZoom * zoom;\r\n");
      out.write("\tvar top = scrollTop / minimapZoom * zoom;\r\n");
      out.write("\tif (left < 0) {\r\n");
      out.write("\t\tleft = 0;\r\n");
      out.write("\t}\r\n");
      out.write("\tif (top < 0) {\r\n");
      out.write("\t\ttop = 0;\r\n");
      out.write("\t}\r\n");
      out.write("\t$(\"#_atomMinimapAreaDiv\").css({\r\n");
      out.write("\t\tleft: left,\r\n");
      out.write("\t\ttop: top\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// draw2d 오브젝트들의 라벨을 숨기거나 보여준다.\r\n");
      out.write("function setLabelsVisible(canvas, visible) {\r\n");
      out.write("\tvar figures = canvas.figures.data;\r\n");
      out.write("\tvar lines = canvas.lines.data;\r\n");
      out.write("\t\r\n");
      out.write("\tvar objects = figures.concat(lines);\r\n");
      out.write("\tfor (var i=0;i<objects.length;i++) {\r\n");
      out.write("\t\tvar object = objects[i];\r\n");
      out.write("\t\tvar children = object.children.data;\r\n");
      out.write("\t\tfor (var j = 0; j < children.length; j++) {\r\n");
      out.write("\t\t\tvar child = children[j].figure;\r\n");
      out.write("\t\t\tif (child instanceof AtomLabel) {\r\n");
      out.write("\t\t\t\tchild.setVisible(visible);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 캔버스 영역을 줌 인/아웃 한다.\r\n");
      out.write("function updateZoom(zoom, bAnimate) {\r\n");
      out.write("\tif (bAnimate == null) {\r\n");
      out.write("\t\tbAnimate = true;\r\n");
      out.write("\t}\r\n");
      out.write("\thideContextMenu();\r\n");
      out.write("\tvar len = 1;\r\n");
      out.write("\tif (zoom > 1) {\r\n");
      out.write("\t\tlen = 2;\r\n");
      out.write("\t}\r\n");
      out.write("\tzoom = parseFloat(zoom.toPrecision(len));\r\n");
      out.write("\tif (zoom < 0.2 || zoom > 4) {\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tif (zoom > 1.5) {\r\n");
      out.write("\t\tsetLabelsVisible(g_canvas, false);\r\n");
      out.write("\t} else {\r\n");
      out.write("\t\tsetLabelsVisible(g_canvas, true);\r\n");
      out.write("\t}\r\n");
      out.write("\tg_canvas.zoomFactor = zoom;\r\n");
      out.write("\t\r\n");
      out.write("\tonScrollDivWrapper();\r\n");
      out.write("\r\n");
      out.write("\tvar param = {\r\n");
      out.write("\t\twidth: g_canvas.getWidth() / zoom,\r\n");
      out.write("\t\theight: g_canvas.getHeight() / zoom,\r\n");
      out.write("\t\tbackgroundSize: 25 / zoom\r\n");
      out.write("\t};\r\n");
      out.write("\tvar minimapZoom = getMinimapZoom();\r\n");
      out.write("\tvar mParam = {\r\n");
      out.write("\t\twidth: $(\"#_atomFlowDesignDivWrapper\").width() / minimapZoom * zoom - 2,\r\n");
      out.write("\t\theight: $(\"#_atomFlowDesignDivWrapper\").height() / minimapZoom * zoom - 2\r\n");
      out.write("\t};\r\n");
      out.write("\tif (bAnimate) {\r\n");
      out.write("\t\t$(\"#_atomFlowDesignDiv>svg, #_atomDroppableDiv\").animate(param, 200);\r\n");
      out.write("\t\t$(\"#_atomMinimapAreaDiv\").animate(mParam, 200);\r\n");
      out.write("\t} else {\r\n");
      out.write("\t\t$(\"#_atomFlowDesignDiv>svg, #_atomDroppableDiv\").css(param);\r\n");
      out.write("\t\t$(\"#_atomMinimapAreaDiv\").css(mParam);\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 미니맵 영역을 드래그할 때 호출된다.\r\n");
      out.write("// 캔버스 영역의 스크롤 위치를 조절한다.\r\n");
      out.write("function onMinimapDrag() {\r\n");
      out.write("\tg_bMinimapClick = true;\r\n");
      out.write("\tvar zoom = g_canvas.zoomFactor;\r\n");
      out.write("\tvar pos = $(\"#_atomMinimapAreaDiv\").position();\r\n");
      out.write("\tvar left = pos.left;\r\n");
      out.write("\tvar top = pos.top;\r\n");
      out.write("\t\r\n");
      out.write("\tvar minimapZoom = getMinimapZoom();\r\n");
      out.write("\t$(\"#_atomFlowDesignDivWrapper\").animate({\r\n");
      out.write("\t\tscrollLeft: left * minimapZoom / zoom,\r\n");
      out.write("\t\tscrollTop: top * minimapZoom / zoom\r\n");
      out.write("\t}, 0);\r\n");
      out.write("\tg_bMinimapClick = false;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 미니맵 클릭시 호출된다.\r\n");
      out.write("// 미니맵 영역의 위치에 맞게 캔버스의 스크롤 위치를 조절한다.\r\n");
      out.write("function onMinimapClick() {\r\n");
      out.write("\tg_bMinimapClick = true;\r\n");
      out.write("\tvar zoom = g_canvas.zoomFactor;\r\n");
      out.write("\tvar left = event.offsetX - 20 * zoom;\r\n");
      out.write("\tvar top = event.offsetY - 20 * zoom;\r\n");
      out.write("\tif (left < 0) {\r\n");
      out.write("\t\tleft = 0;\r\n");
      out.write("\t}\r\n");
      out.write("\tif (top < 0) {\r\n");
      out.write("\t\ttop = 0;\r\n");
      out.write("\t}\r\n");
      out.write("\tvar width = $(\"#_atomMinimapAreaDiv\").width();\r\n");
      out.write("\tvar height = $(\"#_atomMinimapAreaDiv\").height();\r\n");
      out.write("\tvar maxWidth = $(\"#_atomMinimapDivWrapper\").width();\r\n");
      out.write("\tvar maxHeight = $(\"#_atomMinimapDivWrapper\").height();\r\n");
      out.write("\tif (left + width > maxWidth) {\r\n");
      out.write("\t\tleft = maxWidth - width;\r\n");
      out.write("\t}\r\n");
      out.write("\tif (top + height > maxHeight) {\r\n");
      out.write("\t\ttop = maxHeight - height;\r\n");
      out.write("\t}\r\n");
      out.write("\t$(\"#_atomMinimapAreaDiv\").animate({\r\n");
      out.write("\t\tleft: left,\r\n");
      out.write("\t\ttop: top\r\n");
      out.write("\t}, 200);\r\n");
      out.write("\tvar minimapZoom = getMinimapZoom();\r\n");
      out.write("\t$(\"#_atomFlowDesignDivWrapper\").animate({\r\n");
      out.write("\t\tscrollLeft: left * minimapZoom / zoom,\r\n");
      out.write("\t\tscrollTop: top * minimapZoom / zoom\r\n");
      out.write("\t}, 200, function() {\r\n");
      out.write("\t\tsetTimeout(function() {\r\n");
      out.write("\t\t\tg_bMinimapClick = false;\r\n");
      out.write("\t\t}, 50);\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 미니맵의 줌 값을 리턴한다.\r\n");
      out.write("function getMinimapZoom() {\r\n");
      out.write("\tvar canvasWidth = g_canvas.getWidth();\r\n");
      out.write("\tvar minimapWidth = $(\"#_atomMinimapDivWrapper\").width();\r\n");
      out.write("\tvar zoom = canvasWidth / minimapWidth;\r\n");
      out.write("\treturn zoom;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 캔버스 영역에 로딩 이미지를 출력한다.\r\n");
      out.write("function showLoading(opacity) {\r\n");
      out.write("\tif (opacity == null) {\r\n");
      out.write("\t\topacity = 1;\r\n");
      out.write("\t}\r\n");
      out.write("\tvar width = $(\"#_atomFlowDesignDivWrapper\").width();\r\n");
      out.write("\tvar height = $(\"#_atomFlowDesignDivWrapper\").height();\r\n");
      out.write("\tvar sHtml = \"<div id=\\\"_atomLoadingDiv\\\" style=\\\"position:absolute;width:\"+width+\"px;height:\"+height+\"px;background-color:#f3f3f3;text-align:left;opacity:\"+opacity+\";\\\"><div class=\\\"loading\\\"><span class=\\\"loading-inner\\\"></span></div></div>\";\r\n");
      out.write("\t$(\"#_atomFlowDesignDivWrapper\").before(sHtml);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 로딩 이미지를 제거한다.\r\n");
      out.write("function hideLoading() {\r\n");
      out.write("\t$(\"#_atomLoadingDiv\").remove();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 변경 내역이 있는지 체크하고 검색을 실행 또는 취소한다.\r\n");
      out.write("function searchFlowDesign(bFirst, param) {\r\n");
      out.write("\tif (g_bChanged) {\r\n");
      out.write("\t\topenConfirmModal(\"");
      if (_jspx_meth_spring_005fmessage_005f32(_jspx_page_context))
        return;
      out.write("\", \"");
      if (_jspx_meth_spring_005fmessage_005f33(_jspx_page_context))
        return;
      out.write("\", function() {\r\n");
      out.write("\t\t\tsearchFlowDesignProc(bFirst, param);\r\n");
      out.write("\t\t}, function() {\r\n");
      out.write("\t\t\tcancelSearchFlowDesign();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t} else {\r\n");
      out.write("\t\tsearchFlowDesignProc(bFirst, param);\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 변경 내역이 있을 때 검색을 취소하면 실행된다.\r\n");
      out.write("// Override 하여 사용한다.\r\n");
      out.write("function cancelSearchFlowDesign() {\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 그리기 위한 데이터를 DB 에서 조회한다.\r\n");
      out.write("function searchFlowDesignProc(bFirst, param) {\r\n");
      out.write("\tg_bChanged = false;\r\n");
      out.write("\tg_bLoaded = false;\r\n");
      out.write("\t$(\"#_atomFlowDesignDivWrapper\").parent(\"div\").css(\"overflow\", \"hidden\");\r\n");
      out.write("\thideDetailDiv();\r\n");
      out.write("\tshowLoading();\r\n");
      out.write("\tif (param == null) {\r\n");
      out.write("\t\tparam = new Object();\r\n");
      out.write("\t}\r\n");
      out.write("\tg_param = param;\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl: \"searchFlowDesign\",\r\n");
      out.write("\t\tdata: param,\r\n");
      out.write("\t\ttype: 'POST',\r\n");
      out.write("\t\tdataType: 'json',\r\n");
      out.write("\t\tsuccess: function(data) {\r\n");
      out.write("\t\t\tg_data = data;\r\n");
      out.write("\t\t\tcalculateCanvasSize();\r\n");
      out.write("\t\t\tafterSearchFlowDesign();\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\terror: function(e) {\r\n");
      out.write("\t\t\tvar error = JSON.parse(e.responseText);\r\n");
      out.write("\t\t\topenAlertModal(error.errorMsg.cause.localizedMessage);\r\n");
      out.write("\t\t\thideLoading();\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tcomplete: function() {\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 캔버스 영역을 새로고침한다.\r\n");
      out.write("function refreshCanvas() {\r\n");
      out.write("\tvar writer = new draw2d.io.json.Writer();\r\n");
      out.write("\twriter.marshal(g_canvas, function(json) {\r\n");
      out.write("\t\tprepareDrawCanvas();\r\n");
      out.write("\t\tvar reader = new draw2d.io.json.Reader();\r\n");
      out.write("\t\treader.unmarshal(g_canvas, json);\r\n");
      out.write("\t\tfinishDrawCanvas();\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 캔버스 영역을 그리기 전에 실행된다.\r\n");
      out.write("function prepareDrawCanvas() {\r\n");
      out.write("\tg_bLoaded = false;\r\n");
      out.write("\t$(\".properties\").remove();\r\n");
      out.write("\tinitCanvas(\"_atomFlowDesignDiv\");\r\n");
      out.write("\tinitMinimap(\"_atomMinimapDiv\");\r\n");
      out.write("\tg_canvas.clear();\r\n");
      out.write("\tg_minimap.clear();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 캔버스 영역을 그린 후에 실행된다.\r\n");
      out.write("function finishDrawCanvas() {\r\n");
      out.write("\tresetDraggableElementsAttr();\r\n");
      out.write("\t$(\"#routerListDiv td:eq(0)\").trigger(\"click\");\r\n");
      out.write("\t$(\".properties\").remove();\r\n");
      out.write("\tvar bMinimap = false;\r\n");
      out.write("\tif ($(\"#_atomToggleMinimapButton\").length > 0) {\r\n");
      out.write("\t\tif ($(\"#_atomToggleMinimapButton\").hasClass(\"on\")) {\r\n");
      out.write("\t\t\tbMinimap = true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\tif (bMinimap) {\r\n");
      out.write("\t\tsetTimeout(function() {\r\n");
      out.write("\t\t\t$(\"#_atomMinimapDivWrapper\").show();\r\n");
      out.write("\t\t\tif (g_data.readonly) {\r\n");
      out.write("\t\t\t\tcalculateZoom();\r\n");
      out.write("\t\t\t\talignFigures();\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\trefreshMinimap();\r\n");
      out.write("\t\t\t\tupdateUndoRedoButton();\r\n");
      out.write("\t\t\t\tupdateZoom(1, false);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t$(\"#_atomFlowDesignDivWrapper\").css(\"opacity\", 1);\r\n");
      out.write("\t\t\t$(\"#_atomFlowDesignDivWrapper\").parent(\"div\").css(\"overflow\", \"auto\");\r\n");
      out.write("\t\t\thideLoading();\r\n");
      out.write("\t\t}, 400);\r\n");
      out.write("\t} else {\r\n");
      out.write("\t\tif (g_data.readonly) {\r\n");
      out.write("\t\t\tcalculateZoom();\r\n");
      out.write("\t\t\talignFigures();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t$(\"#_atomFlowDesignDivWrapper\").css(\"opacity\", 1);\r\n");
      out.write("\t\t$(\"#_atomFlowDesignDivWrapper\").parent(\"div\").css(\"overflow\", \"auto\");\r\n");
      out.write("\t\thideLoading();\r\n");
      out.write("\t}\r\n");
      out.write("\tvar _onRightMouseDown = draw2d.Canvas.prototype.onRightMouseDown;\r\n");
      out.write("\tdraw2d.Canvas.prototype.onRightMouseDown = function(x, y, shiftKey, ctrlKey) {\r\n");
      out.write("\t\tif (g_data.readonly) {\r\n");
      out.write("\t\t\tvar rate = getRate();\r\n");
      out.write("\t\t\tx /= rate;\r\n");
      out.write("\t\t\ty /= rate;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t_onRightMouseDown.call(this, x, y, shiftKey, ctrlKey);\r\n");
      out.write("\t}\r\n");
      out.write("\tg_bLoaded = true;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// DB 조회 후에 실행된다.\r\n");
      out.write("function afterSearchFlowDesign() {\r\n");
      out.write("\tprepareDrawCanvas();\r\n");
      out.write("\tloadPkg(g_data.pkgList);\r\n");
      out.write("\tloadNode(g_data.nodeList);\r\n");
      out.write("\tloadNodeType(g_data.nodeTypeList);\r\n");
      out.write("\tloadSvc(g_data.svcList);\r\n");
      out.write("\tloadProcBase(g_data.procBaseList);\r\n");
      out.write("\tloadProc(g_data.procList);\r\n");
      out.write("\tloadBatchGroup(g_data.batchGroupList);\r\n");
      out.write("\tloadBatchJob(g_data.batchJobList);\r\n");
      out.write("\tloadLine(g_data.lineList);\r\n");
      out.write("\tfinishDrawCanvas();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 모니터링 화면에서 draw2d 오브젝트들을 화면의 가운데 위치하도록 위치를 조정한다.\r\n");
      out.write("function alignFigures() {\r\n");
      out.write("\tvar canvasWidth = g_canvas.getWidth();\r\n");
      out.write("\tvar canvasHeight = g_canvas.getHeight();\r\n");
      out.write("\t\r\n");
      out.write("\tvar svgWidth = parseInt($(\"#_atomFlowDesignDiv>svg\").attr(\"width\"));\r\n");
      out.write("\tvar svgHeight = parseInt($(\"#_atomFlowDesignDiv>svg\").attr(\"height\"));\r\n");
      out.write("\t\r\n");
      out.write("\tvar xRate = canvasWidth / svgWidth;\r\n");
      out.write("\tvar yRate = canvasHeight / svgHeight;\r\n");
      out.write("\t\r\n");
      out.write("\tvar rate = xRate;\r\n");
      out.write("\tif (yRate < rate) {\r\n");
      out.write("\t\trate = yRate;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tvar minX = 9999;\r\n");
      out.write("\tvar maxX = 0;\r\n");
      out.write("\tvar minY = 9999;\r\n");
      out.write("\tvar maxY = 0;\r\n");
      out.write("\t\r\n");
      out.write("\tvar figures = g_canvas.figures.data;\r\n");
      out.write("\tfor (var i=0;i<figures.length;i++) {\r\n");
      out.write("\t\tvar figure = figures[i];\r\n");
      out.write("\t\tvar left = figure.x;\r\n");
      out.write("\t\tvar right = figure.x + figure.width;\r\n");
      out.write("\t\tvar top = figure.y;\r\n");
      out.write("\t\tvar bottom = figure.y + figure.height;\r\n");
      out.write("\t\tif (left < minX) {\r\n");
      out.write("\t\t\tminX = left;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (right > maxX) {\r\n");
      out.write("\t\t\tmaxX = right;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (top < minY) {\r\n");
      out.write("\t\t\tminY = top;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (bottom > maxY) {\r\n");
      out.write("\t\t\tmaxY = bottom;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tminX *= rate;\r\n");
      out.write("\tmaxX *= rate;\r\n");
      out.write("\tminY *= rate;\r\n");
      out.write("\tmaxY *= rate;\r\n");
      out.write("\r\n");
      out.write("\tvar mX = ((canvasWidth - (maxX - minX)) / 2) / rate - minX / rate;\r\n");
      out.write("\tvar mY = ((canvasHeight - (maxY - minY)) / 2) / rate - minY / rate;\r\n");
      out.write("\t\r\n");
      out.write("\tvar figures = g_canvas.figures.data;\r\n");
      out.write("\tfor (var i=0;i<figures.length;i++) {\r\n");
      out.write("\t\tvar figure = figures[i];\r\n");
      out.write("\t\tfigure.setX(figure.x + mX);\r\n");
      out.write("\t\tfigure.setY(figure.y + mY);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\trefreshMinimap();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// DB 조회 후 호출된다.\r\n");
      out.write("// Override 하여 사용한다.\r\n");
      out.write("function loadPkg(pkgList) {}\r\n");
      out.write("function loadNode(nodeList) {}\r\n");
      out.write("function loadNodeType(nodeTypeList) {}\r\n");
      out.write("function loadSvc(svcList) {}\r\n");
      out.write("function loadProcBase(procBaseList) {}\r\n");
      out.write("function loadProc(procList) {}\r\n");
      out.write("function loadBatchGroup(batchGroupList) {}\r\n");
      out.write("function loadBatchJob(batchJobList) {}\r\n");
      out.write("\r\n");
      out.write("// 리사이즈 팝업창을 호출한다.\r\n");
      out.write("function openResizeModal() {\r\n");
      out.write("\thideDetailDiv();\r\n");
      out.write("\t$(\"#resizeModalDiv\").remove();\r\n");
      out.write("\tvar sHtml = \"\";\r\n");
      out.write("\tsHtml += \"<div id=\\\"resizeModalDiv\\\" style=\\\"display:none;\\\">\\n\";\r\n");
      out.write("\tsHtml += \"\t<div class=\\\"popup pw\\\">\\n\";\r\n");
      out.write("\tsHtml += \"\t\t<h2 id=\\\"lineModalTitle\\\">");
      if (_jspx_meth_spring_005fmessage_005f34(_jspx_page_context))
        return;
      out.write("</h2>\\n\";\r\n");
      out.write("\tsHtml += \"\t\t<a class=\\\"close\\\" href=\\\"javascript:closeModal();\\\">&times;</a>\\n\";\r\n");
      out.write("\tsHtml += \"\t\t<div class=\\\"pop_cont\\\">\\n\";\r\n");
      out.write("\tsHtml += \"\t\t\t<div class=\\\"insert\\\">\\n\";\r\n");
      out.write("\tsHtml += \"\t\t\t\t<label>");
      if (_jspx_meth_spring_005fmessage_005f35(_jspx_page_context))
        return;
      out.write("<em>*</em></label>\\n\";\r\n");
      out.write("\tsHtml += \"\t\t\t\t<input type=\\\"text\\\" id=\\\"canvas_width\\\" name=\\\"canvas_width\\\" placeholder=\\\"");
      if (_jspx_meth_spring_005fmessage_005f36(_jspx_page_context))
        return;
      out.write("\\\" maxlength=\\\"4\\\"/>\\n\";\r\n");
      out.write("\tsHtml += \"\t\t\t\t<label>");
      if (_jspx_meth_spring_005fmessage_005f37(_jspx_page_context))
        return;
      out.write("<em>*</em></label>\\n\";\r\n");
      out.write("\tsHtml += \"\t\t\t\t<input type=\\\"text\\\" id=\\\"canvas_height\\\" name=\\\"canvas_height\\\" placeholder=\\\"");
      if (_jspx_meth_spring_005fmessage_005f38(_jspx_page_context))
        return;
      out.write("\\\" maxlength=\\\"4\\\"/>\\n\";\r\n");
      out.write("\tsHtml += \"\t\t\t\t<span id=\\\"errorSpan\\\" class=\\\"hide\\\"></span>\\n\";\r\n");
      out.write("\tsHtml += \"\t\t\t</div>\\n\";\r\n");
      out.write("\tsHtml += \"\t\t</div>\\n\";\r\n");
      out.write("\tsHtml += \"\t\t<div class=\\\"btn_area\\\">\\n\";\r\n");
      out.write("\tsHtml += \"\t\t<a href=\\\"javascript:closeModal();\\\"><button type=\\\"button\\\">");
      if (_jspx_meth_spring_005fmessage_005f39(_jspx_page_context))
        return;
      out.write("</button></a>\\n\";\r\n");
      out.write("\tsHtml += \"\t\t<a href=\\\"javascript:resizeCanvas();\\\"><button type=\\\"button\\\" class=\\\"major\\\">");
      if (_jspx_meth_spring_005fmessage_005f40(_jspx_page_context))
        return;
      out.write("</button></a>\\n\";\r\n");
      out.write("\tsHtml += \"\t\t</div>\\n\";\r\n");
      out.write("\tsHtml += \"\t</div>\\n\";\r\n");
      out.write("\tsHtml += \"</div>\\n\";\r\n");
      out.write("\t$(\"body\").append(sHtml);\r\n");
      out.write("\r\n");
      out.write("\t$(\"#resizeModalDiv #canvas_width\").numeric();\r\n");
      out.write("\t$(\"#resizeModalDiv #canvas_height\").numeric();\r\n");
      out.write("\r\n");
      out.write("\t$(\"#resizeModalDiv #canvas_width\").val(g_canvas.getWidth());\r\n");
      out.write("\t$(\"#resizeModalDiv #canvas_height\").val(g_canvas.getHeight());\r\n");
      out.write("\topenModal(\"#resizeModalDiv\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 패키지 draw2d 오브젝트를 추가한다.\r\n");
      out.write("function addPkgFigure(pkg) {\r\n");
      out.write("\tvar label = pkg.pkg_name;\r\n");
      out.write("\tvar width = pkg.image_width;\r\n");
      out.write("\tvar height = pkg.image_height;\r\n");
      out.write("\tvar bgColor = pkg.image_bgcolor;\r\n");
      out.write("\tvar userData = pkg;\r\n");
      out.write("\tvar left = pkg.image_x;\r\n");
      out.write("\tvar top = pkg.image_y;\r\n");
      out.write("\tvar path = pkg.image_name;\r\n");
      out.write("\tvar atomPkg = null;\r\n");
      out.write("\tif (width != null && height != null && left != null && top != null) {\r\n");
      out.write("\t\tatomPkg = new AtomPkg({\r\n");
      out.write("\t\t\tlabel: label,\r\n");
      out.write("\t\t\twidth: width,\r\n");
      out.write("\t\t\theight: height,\r\n");
      out.write("\t\t\tuserData: userData,\r\n");
      out.write("\t\t\tx: left,\r\n");
      out.write("\t\t\ty: top,\r\n");
      out.write("\t\t\tbgColor: bgColor,\r\n");
      out.write("\t\t\tpath: path\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif (g_bLoaded) {\r\n");
      out.write("\t\t\tvar commandAdd = new draw2d.command.CommandAdd(g_canvas, atomPkg, parseInt(left), parseInt(top));\r\n");
      out.write("\t\t\tg_canvas.commandStack.execute(commandAdd);\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tg_canvas.add(atomPkg);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tatomPkg.toBack();\r\n");
      out.write("\t\t$(atomPkg.shape[0]).attr(\"filter\", \"url(#AtomPkgFilter)\");\r\n");
      out.write("\t\tatomPkg.on(\"resize\", function() {\r\n");
      out.write("\t\t\tvar mAtomPkg = g_minimap.getFigure(atomPkg.id);\r\n");
      out.write("\t\t\tmAtomPkg.setWidth(atomPkg.getWidth());\r\n");
      out.write("\t\t\tmAtomPkg.setHeight(atomPkg.getHeight());\r\n");
      out.write("\t\t\t// updateUndoRedoButton();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\treturn atomPkg;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 프로세스 draw2d 오브젝트를 추가한다.\r\n");
      out.write("function addProcFigure(proc) {\r\n");
      out.write("\tvar path = proc.image_name;\r\n");
      out.write("\tvar label = proc.proc_name;\r\n");
      out.write("\tvar userData = proc;\r\n");
      out.write("\tvar left = proc.image_x;\r\n");
      out.write("\tvar top = proc.image_y;\r\n");
      out.write("\tvar bgColor = proc.image_bgcolor;\r\n");
      out.write("\tvar atomProc = null;\r\n");
      out.write("\tif (left != null && top != null) {\r\n");
      out.write("\t\tatomProc = new AtomProc({\r\n");
      out.write("\t\t\tpath: path,\r\n");
      out.write("\t\t\tlabel: label,\r\n");
      out.write("\t\t\twidth: 62,\r\n");
      out.write("\t\t\theight: 62,\r\n");
      out.write("\t\t\tuserData: userData,\r\n");
      out.write("\t\t\tx: left,\r\n");
      out.write("\t\t\ty: top,\r\n");
      out.write("\t\t\tbgColor: bgColor\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\tif (g_bLoaded) {\r\n");
      out.write("\t\t\tvar commandAdd = new draw2d.command.CommandAdd(g_canvas, atomProc, parseInt(left), parseInt(top));\r\n");
      out.write("\t\t\tg_canvas.commandStack.execute(commandAdd);\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tg_canvas.addFigure(atomProc);\r\n");
      out.write("\t\t\tafterAddProcFigure(atomProc);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\treturn atomProc;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 프로세스를 추가한 후 실행한다.\r\n");
      out.write("function afterAddProcFigure(atomProc) {\r\n");
      out.write("\tatomProc.toFront();\r\n");
      out.write("\t$(atomProc.shape[0]).attr(\"filter\", \"url(#AtomNodeFilter)\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 노드 draw2d 오브젝틀 추가한다.\r\n");
      out.write("function addNodeFigure(node) {\r\n");
      out.write("\tvar path = node.image_name;\r\n");
      out.write("\tvar label = node.node_name;\r\n");
      out.write("\tvar userData = node;\r\n");
      out.write("\tvar left = node.image_x;\r\n");
      out.write("\tvar top = node.image_y;\r\n");
      out.write("\tvar bgColor = node.image_bgcolor;\r\n");
      out.write("\tvar atomNode = null;\r\n");
      out.write("\tif (left != null && top != null) {\r\n");
      out.write("\t\tif (node.internal_yn == \"Y\") {\r\n");
      out.write("\t\t\tatomNode = new AtomNode({\r\n");
      out.write("\t\t\t\tpath: path,\r\n");
      out.write("\t\t\t\tlabel: label,\r\n");
      out.write("\t\t\t\twidth: 62,\r\n");
      out.write("\t\t\t\theight: 62,\r\n");
      out.write("\t\t\t\tuserData: userData,\r\n");
      out.write("\t\t\t\tx: left,\r\n");
      out.write("\t\t\t\ty: top,\r\n");
      out.write("\t\t\t\tbgColor: bgColor\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tatomNode = new AtomLinkedNode({\r\n");
      out.write("\t\t\t\tpath: path,\r\n");
      out.write("\t\t\t\tlabel: label,\r\n");
      out.write("\t\t\t\twidth: 62,\r\n");
      out.write("\t\t\t\theight: 62,\r\n");
      out.write("\t\t\t\tuserData: userData,\r\n");
      out.write("\t\t\t\tx: left,\r\n");
      out.write("\t\t\t\ty: top\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif (g_bLoaded) {\r\n");
      out.write("\t\t\tvar commandAdd = new draw2d.command.CommandAdd(g_canvas, atomNode, parseInt(left), parseInt(top));\r\n");
      out.write("\t\t\tg_canvas.commandStack.execute(commandAdd);\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tg_canvas.addFigure(atomNode);\r\n");
      out.write("\t\t\tatomNode.toFront();\r\n");
      out.write("\t\t\tafterAddNodeFigure(atomNode);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\treturn atomNode;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 노드 draw2d 오브젝트를 추가한 뒤 실행한다.\r\n");
      out.write("function afterAddNodeFigure(atomNode) {\r\n");
      out.write("\tif (atomNode.userData.node_name_old == \"\") {\r\n");
      out.write("\t\tatomNode.userData.node_name_old = atomNode.id;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t$(atomNode.shape[0]).attr(\"filter\", \"url(#AtomNodeFilter)\");\r\n");
      out.write("\tif (atomNode.atomCount != null) {\r\n");
      out.write("\t\t$(atomNode.atomCount.shape[0]).attr(\"filter\", \"url(#AtomCountFilter)\");\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// draw2d 오브젝트를 리턴한다.\r\n");
      out.write("function getAtomFigure(type, id) {\r\n");
      out.write("\tvar ret = null;\r\n");
      out.write("\tvar figures = g_canvas.figures.data;\r\n");
      out.write("\tfor (var i=0;i<figures.length;i++) {\r\n");
      out.write("\t\tvar figure = figures[i];\r\n");
      out.write("\t\tvar userData = figure.userData;\r\n");
      out.write("\t\tif (type == LINE_OBJECT_TYPE_PACKAGE && figure instanceof AtomPkg && userData.pkg_name == id) {\r\n");
      out.write("\t\t\tret = figure;\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\t} else if (type == LINE_OBJECT_TYPE_NODE && (figure instanceof AtomNode || figure instanceof AtomLinkedNode) && userData.node_name_old == id) {\r\n");
      out.write("\t\t\tret = figure;\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\t} else if (type == LINE_OBJECT_TYPE_PROCESS && figure instanceof AtomProc && (userData.image_uuid == id || userData.proc_no == id)) {\r\n");
      out.write("\t\t\tret = figure;\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\t} else if (type == LINE_OBJECT_TYPE_BATCHJOB && figure instanceof AtomBatchJob && (userData.image_uuid == id)) {\r\n");
      out.write("\t\t\tret = figure;\r\n");
      out.write("\t\t\tbreak;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\treturn ret;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 라인을 생성한다.\r\n");
      out.write("function createLine(line) {\r\n");
      out.write("\tvar source = getAtomFigure(line.source_type, line.source_id);\r\n");
      out.write("\tvar target = getAtomFigure(line.target_type, line.target_id);\r\n");
      out.write("\t\r\n");
      out.write("\tvar atomLine;\r\n");
      out.write("\tif (source != null && target != null) {\r\n");
      out.write("\t\tif (g_data.type == LINE_TYPE_PROCESS || g_data.type == LINE_TYPE_BATCHJOB) {\r\n");
      out.write("\t\t\tline.source_id = source.id;\r\n");
      out.write("\t\t\tline.target_id = target.id;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar sourcePort = source.getHybridPort(parseInt(line.source_port));\r\n");
      out.write("\t\tvar targetPort = target.getHybridPort(parseInt(line.target_port));\r\n");
      out.write("\r\n");
      out.write("\t\tif (sourcePort != null && targetPort != null) {\r\n");
      out.write("\t\t\tvar cc = new draw2d.command.CommandConnect(g_canvas, sourcePort, targetPort);\r\n");
      out.write("\t\t\tif (g_bLoaded) {\r\n");
      out.write("\t\t\t\tg_canvas.commandStack.execute(cc);\r\n");
      out.write("\t\t\t} else {\r\n");
      out.write("\t\t\t\tvar ret = cc.execute();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tatomLine = cc.connection;\r\n");
      out.write("\t\t\tatomLine.setUserData(line);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar mSource = g_minimap.getFigure(source.id);\r\n");
      out.write("\t\tvar mTarget =  g_minimap.getFigure(target.id);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif (mSource != null && mTarget != null) {\r\n");
      out.write("\t\t\tif (g_data.type == LINE_TYPE_PROCESS || g_data.type == LINE_TYPE_BATCHJOB) {\r\n");
      out.write("\t\t\t\tline.source_id = mSource.id;\r\n");
      out.write("\t\t\t\tline.target_id = mTarget.id;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tvar mSourcePort = mSource.getHybridPort(parseInt(line.source_port));\r\n");
      out.write("\t\t\tvar mTargetPort = mTarget.getHybridPort(parseInt(line.target_port));\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (mSourcePort != null && mTargetPort != null) {\r\n");
      out.write("\t\t\t\tvar cc = new draw2d.command.CommandConnect(g_minimap, mSourcePort, mTargetPort);\r\n");
      out.write("\t\t\t\tif (g_bLoaded) {\r\n");
      out.write("\t\t\t\t\tg_minimap.commandStack.execute(cc);\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tvar ret = cc.execute();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tvar mAtomLine = cc.connection;\r\n");
      out.write("\t\t\t\t// line.line_desc = \"\";\r\n");
      out.write("\t\t\t\tmAtomLine.setUserData(line);\r\n");
      out.write("\t\t\t\tmAtomLine.id = atomLine.id;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif (g_bLoaded) {\r\n");
      out.write("\t\t\tupdateUndoRedoButton();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// DB 조회 후 라인을 추가한다.\r\n");
      out.write("function loadLine(lineList) {\r\n");
      out.write("\tif (lineList == null) {\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tfor (var i = 0; i < lineList.length; i++) {\r\n");
      out.write("\t\tvar line = lineList[i];\r\n");
      out.write("\t\tcreateLine(line);\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// draw2d 오브젝트들을 DB 에 저장한다.\r\n");
      out.write("function saveFlowDesign() {\r\n");
      out.write("\t// 라인 중복 체크\r\n");
      out.write("\tvar lines = g_canvas.lines.data;\r\n");
      out.write("\tfor (var i=0;i<lines.length;i++) {\r\n");
      out.write("\t\tvar line = lines[i];\r\n");
      out.write("\t\tvar source = line.sourcePort.parent;\r\n");
      out.write("\t\tvar target = line.targetPort.parent;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfor (var j=0;j<lines.length;j++) {\r\n");
      out.write("\t\t\tvar existLine = lines[j];\r\n");
      out.write("\t\t\tvar compareSource = existLine.sourcePort.parent;\r\n");
      out.write("\t\t\tvar compareTarget = existLine.targetPort.parent;\r\n");
      out.write("\t\t\tif (line.id != existLine.id && (source.id == compareSource.id && target.id == compareTarget.id)) {\r\n");
      out.write("\t\t\t\topenAlertModal(\"");
      if (_jspx_meth_spring_005fmessage_005f41(_jspx_page_context))
        return;
      out.write("\");\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tshowLoading(0.5);\r\n");
      out.write("\thideDetailDiv();\r\n");
      out.write("\t\r\n");
      out.write("\tvar figures = g_canvas.figures.data;\r\n");
      out.write("\tvar writer = new draw2d.io.json.Writer();\r\n");
      out.write("\twriter.marshal(g_canvas, function(json) {\r\n");
      out.write("\t\tvar paramJson = new Object();\r\n");
      out.write("\t\tif (g_data.type == LINE_TYPE_NETWORK) {\r\n");
      out.write("\t\t\t// paramJson.pkg_name = $(\"#pkgSelect\").val();\r\n");
      out.write("\t\t} else if (g_data.type == LINE_TYPE_PROCESS) {\r\n");
      out.write("\t\t\tparamJson.pkg_name = g_data.svc.pkg_name;\r\n");
      out.write("\t\t\tparamJson.node_type = g_data.svc.node_type;\r\n");
      out.write("\t\t\tparamJson.svc_no = parseInt(g_data.svc.svc_no);\r\n");
      out.write("\t\t} else if (g_data.type == LINE_TYPE_BATCHJOB) {\r\n");
      out.write("\t\t\tparamJson.pkg_name = g_data.schedulerGroup.pkg_name;\r\n");
      out.write("\t\t\tparamJson.group_name = g_data.schedulerGroup.group_name;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tparamJson.pkgList = new Array();\r\n");
      out.write("\t\tparamJson.nodeList = new Array();\r\n");
      out.write("\t\tparamJson.procList = new Array();\r\n");
      out.write("\t\tparamJson.batchJobList = new Array();\r\n");
      out.write("\t\tparamJson.lineList = new Array();\r\n");
      out.write("\r\n");
      out.write("\t\t$(\"#linkedNodeListDiv>div:gt(0)\").each(function() {\r\n");
      out.write("\t\t\tvar node = $(this).data(\"node\");\r\n");
      out.write("\t\t\tnode.image_name = null;\r\n");
      out.write("\t\t\tnode.image_x = null;\r\n");
      out.write("\t\t\tnode.image_y = null;\r\n");
      out.write("\t\t\tparamJson.nodeList.push(node);\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tfor (var i = 0; i < json.length; i++) {\r\n");
      out.write("\t\t\tvar obj = json[i];\r\n");
      out.write("\t\t\tvar type = obj.type;\r\n");
      out.write("\t\t\tvar id = obj.id;\r\n");
      out.write("\t\t\tvar userData = obj.userData;\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (type == \"AtomPkg\") {\r\n");
      out.write("\t\t\t\tvar pkg = obj.userData;\r\n");
      out.write("\t\t\t\tpkg.image_x = obj.x;\r\n");
      out.write("\t\t\t\tpkg.image_y = obj.y;\r\n");
      out.write("\t\t\t\tpkg.image_width = obj.width;\r\n");
      out.write("\t\t\t\tpkg.image_height = obj.height;\r\n");
      out.write("\t\t\t\tpkg.image_name = obj.icon_path;\r\n");
      out.write("\t\t\t\tpkg.image_bgcolor = obj.bgColor;\r\n");
      out.write("\t\t\t\tparamJson.pkgList.push(pkg);\r\n");
      out.write("\t\t\t} else if (type == \"AtomNode\" || type == \"AtomLinkedNode\") {\r\n");
      out.write("\t\t\t\tvar node = obj.userData;\r\n");
      out.write("\t\t\t\tnode.image_uuid = obj.id;\r\n");
      out.write("\t\t\t\tnode.image_x = obj.x;\r\n");
      out.write("\t\t\t\tnode.image_y = obj.y;\r\n");
      out.write("\t\t\t\tnode.image_name = obj.icon_path;\r\n");
      out.write("\t\t\t\tparamJson.nodeList.push(node);\r\n");
      out.write("\t\t\t} else if (type == \"AtomProc\") {\r\n");
      out.write("\t\t\t\tvar proc = obj.userData;\r\n");
      out.write("\t\t\t\tproc.image_x = obj.x;\r\n");
      out.write("\t\t\t\tproc.image_y = obj.y;\r\n");
      out.write("\t\t\t\tproc.image_width = obj.width;\r\n");
      out.write("\t\t\t\tproc.image_height = obj.height;\r\n");
      out.write("\t\t\t\tproc.image_name = obj.icon_path;\r\n");
      out.write("\t\t\t\tproc.image_bgcolor = obj.bgColor;\r\n");
      out.write("\t\t\t\tproc.image_uuid = obj.id;\r\n");
      out.write("\t\t\t\tparamJson.procList.push(proc);\r\n");
      out.write("\t\t\t} else if (type == \"AtomBatchJob\") {\r\n");
      out.write("\t\t\t\tvar batchJob = obj.userData;\r\n");
      out.write("\t\t\t\tbatchJob.image_x = obj.x;\r\n");
      out.write("\t\t\t\tbatchJob.image_y = obj.y;\r\n");
      out.write("\t\t\t\tbatchJob.image_width = obj.width;\r\n");
      out.write("\t\t\t\tbatchJob.image_height = obj.height;\r\n");
      out.write("\t\t\t\tbatchJob.image_name = obj.icon_path;\r\n");
      out.write("\t\t\t\tbatchJob.image_bgcolor = obj.bgColor.hashString;\r\n");
      out.write("\t\t\t\tbatchJob.image_uuid = obj.id;\r\n");
      out.write("\t\t\t\tparamJson.batchJobList.push(batchJob);\r\n");
      out.write("\t\t\t} else if (type == \"AtomLine\") {\r\n");
      out.write("\t\t\t\tvar line = new Object();\r\n");
      out.write("\t\t\t\tvar source = g_canvas.getFigure(obj.source.node);\r\n");
      out.write("\t\t\t\tline.source_type = getObjectType(source);\r\n");
      out.write("\t\t\t\tline.source_id = getObjectId(source);\r\n");
      out.write("\t\t\t\tline.source_name = source.atomLabel.text;\r\n");
      out.write("\t\t\t\tline.source_port = obj.source.port;\r\n");
      out.write("\t\t\t\tvar target = g_canvas.getFigure(obj.target.node);\r\n");
      out.write("\t\t\t\tline.target_type = getObjectType(target);\r\n");
      out.write("\t\t\t\tline.target_id = getObjectId(target);\r\n");
      out.write("\t\t\t\tline.target_name = target.atomLabel.text;\r\n");
      out.write("\t\t\t\tline.target_port = obj.target.port;\r\n");
      out.write("\t\t\t\tline.router = obj.router;\r\n");
      out.write("\t\t\t\tline.full_duplex = obj.userData.full_duplex;\r\n");
      out.write("\t\t\t\tline.line_desc = obj.userData.line_desc;\r\n");
      out.write("\t\t\t\tline.elem_cnt = obj.userData.elem_cnt;\r\n");
      out.write("\t\t\t\tline.multi_type = obj.userData.multi_type;\r\n");
      out.write("\t\t\t\tline.bi_dir_yn = obj.userData.bi_dir_yn;\r\n");
      out.write("\t\t\t\tline.exit_cd = obj.userData.exit_cd;\r\n");
      out.write("\t\t\t\tparamJson.lineList.push(line);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tvar param = new Object();\r\n");
      out.write("\t\tparam.jsonStr = JSON.stringify(paramJson);\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl: \"saveFlowDesign\",\r\n");
      out.write("\t\t\tdata: param,\r\n");
      out.write("\t\t\ttype: 'POST',\r\n");
      out.write("\t\t\tdataType: 'json',\r\n");
      out.write("\t\t\tsuccess: function(data) {\r\n");
      out.write("\t\t\t\tvar result = data.result;\r\n");
      out.write("\t\t\t\tif (result == \"succ\") {\r\n");
      out.write("\t\t\t\t\topenAlertModal(\"");
      if (_jspx_meth_spring_005fmessage_005f42(_jspx_page_context))
        return;
      out.write("\", \"\", function() {\r\n");
      out.write("\t\t\t\t\t\tg_bChanged = false;\r\n");
      out.write("\t\t\t\t\t\tsearchFlowDesign(true, g_param);\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\topenAlertModal(result);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror: function(e) {\r\n");
      out.write("\t\t\t\tvar error = JSON.parse(e.responseText);\r\n");
      out.write("\t\t\t\topenAlertModal(error.errorMsg.cause.localizedMessage);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\tcomplete: function() {\r\n");
      out.write("\t\t\t\thideLoading();\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// draw2d 오브젝트 타입을 리턴한다.(TAT_COMMON_CODE 에 저장되어 있음. CodeDefinition.java 에 정의되어 있음.)\r\n");
      out.write("function getObjectType(figure) {\r\n");
      out.write("\tvar type = null;\r\n");
      out.write("\tif (figure instanceof AtomPkg) {\r\n");
      out.write("\t\ttype = LINE_OBJECT_TYPE_PACKAGE;\r\n");
      out.write("\t} else if (figure instanceof AtomNode || figure instanceof AtomLinkedNode) {\r\n");
      out.write("\t\ttype = LINE_OBJECT_TYPE_NODE;\r\n");
      out.write("\t} else if (figure instanceof AtomProc) {\r\n");
      out.write("\t\ttype = LINE_OBJECT_TYPE_PROCESS;\r\n");
      out.write("\t} else if (figure instanceof AtomBatchJob) {\r\n");
      out.write("\t\ttype = LINE_OBJECT_TYPE_BATCHJOB;\r\n");
      out.write("\t}\r\n");
      out.write("\treturn type;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 아이디를 리턴한다.\r\n");
      out.write("function getObjectId(figure) {\r\n");
      out.write("\tvar id = null;\r\n");
      out.write("\tif (figure instanceof AtomPkg) {\r\n");
      out.write("\t\tid = figure.userData.pkg_name;\r\n");
      out.write("\t} else if (figure instanceof AtomNode) {\r\n");
      out.write("\t\tid = figure.userData.node_name_old;\r\n");
      out.write("\t} else {\r\n");
      out.write("\t\tid = figure.id;\r\n");
      out.write("\t}\r\n");
      out.write("\treturn id;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 키보드 이벤트를 정의한다.\r\n");
      out.write("draw2d.policy.canvas.DefaultKeyboardPolicy = draw2d.policy.canvas.KeyboardPolicy.extend({\r\n");
      out.write("\tNAME: \"DefaultKeyboardPolicy\",\r\n");
      out.write("\tinit: function() {\r\n");
      out.write("\t\tthis._super();\r\n");
      out.write("\t},\r\n");
      out.write("\tonKeyDown: function(canvas, keyCode, shiftKey, ctrlKey) {\r\n");
      out.write("\t\tif (keyCode === 46 && canvas.getCurrentSelection() !== null) {\r\n");
      out.write("\t\t\tconfirmDelete();\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\tthis._super(canvas, keyCode, shiftKey, ctrlKey);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 패키지 draw2d 오브젝트를 삭제한다.\r\n");
      out.write("function deletePkg(pkg) {\r\n");
      out.write("\tvar atomPkg = getAtomFigure(\"pkg\", pkg.pkg_name);\r\n");
      out.write("\tif (atomPkg != null) {\r\n");
      out.write("\t\tdeleteFigure(atomPkg);\r\n");
      out.write("\t}\r\n");
      out.write("\tcloseModal();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 노드 draw2d 오브젝트를 삭제한다.\r\n");
      out.write("function deleteNode(node) {\r\n");
      out.write("\tvar atomNode = getAtomFigure(LINE_OBJECT_TYPE_NODE, node.node_name_old);\r\n");
      out.write("\tif (atomNode != null) {\r\n");
      out.write("\t\tdeleteFigure(atomNode);\r\n");
      out.write("\t}\r\n");
      out.write("\tcloseModal();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 프로세스 draw2d 오브젝트를 삭제한다.\r\n");
      out.write("function deleteProc(proc) {\r\n");
      out.write("\tvar atomProc = getAtomFigure(LINE_OBJECT_TYPE_PROCESS, proc.image_uuid);\r\n");
      out.write("\tif (atomProc != null) {\r\n");
      out.write("\t\tdeleteFigure(atomProc);\r\n");
      out.write("\t}\r\n");
      out.write("\tcloseModal();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 삭제여부를 묻는 확인창을 보여준다.\r\n");
      out.write("function confirmDelete() {\r\n");
      out.write("\tvar selection = g_canvas.getSelection();\r\n");
      out.write("\tif (selection.all.data.length > 0) {\r\n");
      out.write("\t\topenConfirmModal(\"");
      if (_jspx_meth_spring_005fmessage_005f43(_jspx_page_context))
        return;
      out.write("\", \"");
      if (_jspx_meth_spring_005fmessage_005f44(_jspx_page_context))
        return;
      out.write("\", function() {deleteSelectedFigures();});\r\n");
      out.write("\t} else {\r\n");
      out.write("\t\topenAlertModal(\"");
      if (_jspx_meth_spring_005fmessage_005f45(_jspx_page_context))
        return;
      out.write("\");\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 선택한 draw2d 오브젝트들을 삭제한다.\r\n");
      out.write("function deleteSelectedFigures() {\r\n");
      out.write("\tg_canvas.getCommandStack().startTransaction();\r\n");
      out.write("\tg_minimap.getCommandStack().startTransaction();\r\n");
      out.write("\tg_canvas.getSelection().each(function(index, figure) {\r\n");
      out.write("\t\tif (figure != null) {\r\n");
      out.write("\t\t\tvar figureId = figure.id;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar cmd = figure.createCommand(new draw2d.command.CommandType(draw2d.command.CommandType.DELETE));\r\n");
      out.write("\t\t\tif (cmd !== null) {\r\n");
      out.write("\t\t\t\tg_canvas.getCommandStack().execute(cmd);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar mFigure = g_minimap.getFigure(figureId);\r\n");
      out.write("\t\t\tif (mFigure != null) {\r\n");
      out.write("\t\t\t\tvar mCmd = mFigure.createCommand(new draw2d.command.CommandType(draw2d.command.CommandType.DELETE));\r\n");
      out.write("\t\t\t\tif (mCmd !== null) {\r\n");
      out.write("\t\t\t\t\tg_minimap.getCommandStack().execute(mCmd);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\tg_canvas.getCommandStack().commitTransaction();\r\n");
      out.write("\tg_minimap.getCommandStack().commitTransaction();\r\n");
      out.write("\tresetDraggableElementsAttr();\r\n");
      out.write("\tupdateUndoRedoButton();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 라인 모달창을 띄운다.\r\n");
      out.write("function openLineModal(line, bDropped) {\r\n");
      out.write("\tif (g_bProperties) {\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tg_bProperties = true;\r\n");
      out.write("\t$(\".properties\").remove();\r\n");
      out.write("\tvar param = line;\r\n");
      out.write("\tparam.dropped = bDropped;\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl: \"detailLine\",\r\n");
      out.write("        data: param,\r\n");
      out.write("        type: 'POST',\r\n");
      out.write("        success: function(data) {\r\n");
      out.write("        \t$(\"div.draw\").append(data);\r\n");
      out.write("        \t$(\"#lineModalDiv\").data(\"line\", line);\r\n");
      out.write("        },\r\n");
      out.write("        error: function(e) {\r\n");
      out.write("\t\t\tvar error = JSON.parse(e.responseText);\r\n");
      out.write("\t\t\topenAlertModal(error.errorMsg.cause.localizedMessage);\r\n");
      out.write("        },\r\n");
      out.write("        complete: function() {\r\n");
      out.write("        \tg_bProperties = false;\r\n");
      out.write("        }\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 모달창을 띄운다.\r\n");
      out.write("function showDetailDiv(detailDivId) {\r\n");
      out.write("\tsetTimeout(function() {\r\n");
      out.write("\t\t$(\"#\"+detailDivId).addClass(\"on\");\r\n");
      out.write("\t\t$(\".tools\").addClass(\"on\");\r\n");
      out.write("\t\t$(\".draw_cont\").addClass(\"on\");\r\n");
      out.write("\t\t$(\"#_atomMinimapDivWrapper\").addClass(\"on\");\r\n");
      out.write("\t}, 0);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 모달창을 숨긴다.\r\n");
      out.write("function hideDetailDiv() {\r\n");
      out.write("\t$(\".properties\").removeClass(\"on\");\r\n");
      out.write("\t$(\".tools\").removeClass(\"on\");\r\n");
      out.write("\t$(\".draw_cont\").removeClass(\"on\");\r\n");
      out.write("\t$(\"#_atomMinimapDivWrapper\").removeClass(\"on\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// draw2d 관련 오브젝트들을 초기화한다.\r\n");
      out.write("function initElements() {\r\n");
      out.write("\t// 좌측 패키지, 노드, 연결노드, 프로세스 등 분류 버튼 클릭 시 드래그 오브젝트들을 토글한다.\r\n");
      out.write("\t$(\".accordion\").click(function() {\r\n");
      out.write("\t\t$(this).toggleClass(\"active\");\r\n");
      out.write("\t\t$(this).next(\"div\").toggleClass(\"show\");\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t// 저장 버튼\r\n");
      out.write("\t$(\"#_atomSaveButton\").click(function() {\r\n");
      out.write("\t\tsaveFlowDesign();\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t// 줌인 버튼\r\n");
      out.write("\t$(\"#_atomZoomInButton\").click(function() {\r\n");
      out.write("\t\tvar zoom = g_canvas.zoomFactor - 0.1;\r\n");
      out.write("\t\tupdateZoom(zoom);\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t// 줌아웃 버튼\r\n");
      out.write("\t$(\"#_atomZoomOutButton\").click(function() {\r\n");
      out.write("\t\tvar zoom = g_canvas.zoomFactor + 0.1;\r\n");
      out.write("\t\tupdateZoom(zoom);\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t// 원본크기 버튼\r\n");
      out.write("\t$(\"#_atomResetZoomButton\").click(function() {\r\n");
      out.write("\t\tupdateZoom(1);\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t// 미니맵 영역 클릭 이벤트\r\n");
      out.write("\t// 캔버스 영역을 미니맵 영역에 맞게 스크롤한다.\r\n");
      out.write("\t$(\"#_atomMinimapDivWrapper\").click(function() {\r\n");
      out.write("\t\tonMinimapClick();\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t// 미니맵 영역 드래그 이벤트\r\n");
      out.write("\t// 캔버스 영역을 미니맵 영역에 맞게 스크롤한다.\r\n");
      out.write("\t$(\"#_atomMinimapAreaDiv\").draggable({\r\n");
      out.write("\t\thelper: function(event) {\r\n");
      out.write("\t\t\tvar width = $(\"#_atomMinimapAreaDiv\").width();\r\n");
      out.write("\t\t\tvar height = $(\"#_atomMinimapAreaDiv\").height();\r\n");
      out.write("\t\t\tvar sHtml = \"<div style=\\\"position:absolute;width:\"+width+\"px;height:\"+height+\"px;opacity:0;\\\"></div>\";\r\n");
      out.write("\t\t\treturn sHtml;\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tdrag: function(event, ui) {\r\n");
      out.write("\t\t\tvar maxRight = $(\"#_atomMinimapDivWrapper\").width();\r\n");
      out.write("\t\t\tvar maxBottom = $(\"#_atomMinimapDivWrapper\").height();\r\n");
      out.write("\t\t\tvar x = ui.position.left;\r\n");
      out.write("\t\t\tvar y = ui.position.top;\r\n");
      out.write("\t\t\tvar width = $(\"#_atomMinimapAreaDiv\").width() + 2;\r\n");
      out.write("\t\t\tvar height = $(\"#_atomMinimapAreaDiv\").height() + 2;\r\n");
      out.write("\t\t\tif (x < 0) {\r\n");
      out.write("\t\t\t\tx = 0;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif (y < 0) {\r\n");
      out.write("\t\t\t\ty = 0;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif (x + width > maxRight) {\r\n");
      out.write("\t\t\t\tx = maxRight - width;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif (y + height > maxBottom) {\r\n");
      out.write("\t\t\t\ty = maxBottom - height;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t$(\"#_atomMinimapAreaDiv\").css({\r\n");
      out.write("\t\t\t\tleft: x,\r\n");
      out.write("\t\t\t\ttop: y\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\tonMinimapDrag();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t// 캔버스영역 스크롤 이벤트\r\n");
      out.write("\t// 미니맵 영역을 캔버스영역에 맞게 이동시킨다.\r\n");
      out.write("\t$(\"#_atomFlowDesignDivWrapper\").scroll(function() {\r\n");
      out.write("\t\tonScrollDivWrapper();\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t// 삭제 버튼\r\n");
      out.write("\t$(\"#_atomDeleteButton\").click(function() {\r\n");
      out.write("\t\tconfirmDelete();\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t// Undo 버튼\r\n");
      out.write("\t$(\"#_atomUndoButton\").click(function() {\r\n");
      out.write("\t\thideDetailDiv();\r\n");
      out.write("\t\tundoProc(g_canvas);\r\n");
      out.write("\t\tundoProc(g_minimap);\r\n");
      out.write("\t\tresetDraggableElementsAttr();\r\n");
      out.write("\t\tupdateUndoRedoButton();\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t// Redo 버튼\r\n");
      out.write("\t$(\"#_atomRedoButton\").click(function() {\r\n");
      out.write("\t\thideDetailDiv();\r\n");
      out.write("\t\tredoProc(g_canvas);\r\n");
      out.write("\t\tredoProc(g_minimap);\r\n");
      out.write("\t\tresetDraggableElementsAttr();\r\n");
      out.write("\t\tupdateUndoRedoButton();\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t// 미니맵 토글 버튼\r\n");
      out.write("\t$(\"#_atomToggleMinimapButton\").click(function() {\r\n");
      out.write("\t\tif ($(\"#_atomMinimapDivWrapper:visible\").length > 0) {\r\n");
      out.write("\t\t\t$(\"#_atomMinimapDivWrapper\").addClass(\"off\");\r\n");
      out.write("\t\t\t$(this).removeClass(\"on\");\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\trefreshMinimap();\r\n");
      out.write("\t\t\t$(\"#_atomMinimapDivWrapper\").removeClass(\"off\");\r\n");
      out.write("\t\t\t$(this).addClass(\"on\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t// 리사이즈 버튼\r\n");
      out.write("\t// 캔버스 영역의 사이즈를 조절하기 위한 모달창을 띄운다.\r\n");
      out.write("\t$(\"#_atomResizeButton\").click(function() {\r\n");
      out.write("\t\topenResizeModal();\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t// 라인 모양 버튼\r\n");
      out.write("\tinitLineButtons();\r\n");
      out.write("\r\n");
      out.write("\t// 윈도우 리사이즈 이벤트\r\n");
      out.write("\t$(window).resize(function() {\r\n");
      out.write("\t\tonResizeWindow();\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// draw2d 오브젝트의 속성을 변경하는 커맨드 오브젝트\r\n");
      out.write("var AtomCommandAttr = draw2d.command.CommandAttr.extend({\r\n");
      out.write("\tNAME: \"AtomCommandAttr\",\r\n");
      out.write("\tinit: function(figure, newAttributes) {\r\n");
      out.write("\t\tthis._super(figure, newAttributes);\r\n");
      out.write("\t\tif (newAttributes.userData != null) {\r\n");
      out.write("\t\t\tthis.oldAttributes.userData =  $.extend({}, figure.userData);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t},\r\n");
      out.write("\tundo: function() {\r\n");
      out.write("\t\tthis._super();\r\n");
      out.write("\t\tif (this.oldAttributes.userData != null) {\r\n");
      out.write("\t\t\tthis.figure.userData = this.oldAttributes.userData;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t},\r\n");
      out.write("\tredo: function() {\r\n");
      out.write("\t\tthis._super();\r\n");
      out.write("\t\tif (this.newAttributes.userData != null) {\r\n");
      out.write("\t\t\tthis.figure.userData = this.newAttributes.userData;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// Undo 버튼 클릭시 호출된다.\r\n");
      out.write("function undoProc(canvas) {\r\n");
      out.write("\tvar commandStack = canvas.getCommandStack();\r\n");
      out.write("\tcommandStack.undo();\r\n");
      out.write("\tcommandStack = canvas.getCommandStack();\r\n");
      out.write("\tvar redoStack = commandStack.redostack;\r\n");
      out.write("\tfor (var i=0;i<redoStack.length;i++) {\r\n");
      out.write("\t\tvar stack = redoStack[i];\r\n");
      out.write("\t\tif (stack.label == \"Delete Shape\") {\r\n");
      out.write("\t\t\tundoDeleteShapeProc(stack.figure);\r\n");
      out.write("\t\t} else if (stack.label == \"Change Attributes\") {\r\n");
      out.write("\t\t\tundoChangeAttributesProc(stack.figure);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (stack.commands != null) {\r\n");
      out.write("\t\t\tvar commands = stack.commands.data;\r\n");
      out.write("\t\t\tfor (var j=0;j<commands.length;j++) {\r\n");
      out.write("\t\t\t\tvar command = commands[j];\r\n");
      out.write("\t\t\t\tif (command.label == \"Delete Shape\") {\r\n");
      out.write("\t\t\t\t\tundoDeleteShapeProc(command.figure);\r\n");
      out.write("\t\t\t\t} else if (command.label == \"Change Attributes\") {\r\n");
      out.write("\t\t\t\t\tundoChangeAttributesProc(command.figure);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// Redo 버튼 클릭시 호출된다.\r\n");
      out.write("function redoProc(canvas) {\r\n");
      out.write("\tvar commandStack = canvas.getCommandStack();\r\n");
      out.write("\tcommandStack.redo();\r\n");
      out.write("\tcommandStack = canvas.getCommandStack();\r\n");
      out.write("\tvar undoStack = commandStack.undostack;\r\n");
      out.write("\tfor (var i=0;i<undoStack.length;i++) {\r\n");
      out.write("\t\tvar stack = undoStack[i];\r\n");
      out.write("\t\tif (stack.label == \"Delete Shape\") {\r\n");
      out.write("\t\t} else if (stack.label == \"Change Attributes\") {\r\n");
      out.write("\t\t\tundoChangeAttributesProc(stack.figure);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (stack.commands != null) {\r\n");
      out.write("\t\t\tvar commands = stack.commands.data;\r\n");
      out.write("\t\t\tfor (var j=0;j<commands.length;j++) {\r\n");
      out.write("\t\t\t\tvar command = commands[j];\r\n");
      out.write("\t\t\t\tif (command.label == \"Delete Shape\") {\r\n");
      out.write("\t\t\t\t} else if (command.label == \"Change Attributes\") {\r\n");
      out.write("\t\t\t\t\tundoChangeAttributesProc(command.figure);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// Undo 버튼 클릭시 배치잡 draw2d 오브젝트 길이를 다시 셋팅한다. (텍스트 사이즈에 맞춰야 하기 때문)\r\n");
      out.write("function undoChangeAttributesProc(figure) {\r\n");
      out.write("\tif (figure != null) {\r\n");
      out.write("\t\tif (figure instanceof AtomBatchJob) {\r\n");
      out.write("\t\t\tvar width = figure.atomLabel.getBoundingBox().w + 40;\r\n");
      out.write("\t\t\tif (figure.getCanvas().canvasId == g_minimap.canvasId) {\r\n");
      out.write("\t\t\t\twidth = g_canvas.getFigure(figure.id).getBoundingBox().w + 40;\r\n");
      out.write("\t\t\t} \r\n");
      out.write("\t\t\tfigure.setWidth(width);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// Undo 버튼 클릭 시 오브젝트들의 앞뒤 순서가 뒤죽박죽 되는 경우가 있어 아래 function 을 실행한다.\r\n");
      out.write("function undoDeleteShapeProc(figure) {\r\n");
      out.write("\tif (figure != null) {\r\n");
      out.write("\t\tif (figure instanceof AtomPkg) {\r\n");
      out.write("\t\t\tfigure.toBack();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (figure.atomIcon != null) {\r\n");
      out.write("\t\t\tfigure.atomIcon.toFront();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (figure.atomLabel != null) {\r\n");
      out.write("\t\t\t// figure.atomLabel.toFront();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// undo 시 라벨의 위치가 틀어지는 버그가 있어서 다시 그려야 함.\r\n");
      out.write("\t\tvar children = figure.children.data;\r\n");
      out.write("\t\tfor (var i=0;i<children.length;i++) {\r\n");
      out.write("\t\t\tvar child = children[i];\r\n");
      out.write("\t\t\tvar childFigure = child.figure;\r\n");
      out.write("\t\t\tvar locator = child.locator;\r\n");
      out.write("\t\t\tif (childFigure instanceof AtomLabel) {\r\n");
      out.write("\t\t\t\tvar text = \"\";\r\n");
      out.write("\t\t\t\tif (figure.getCanvas().canvasId == g_canvas.canvasId) {\r\n");
      out.write("\t\t\t\t\ttext = childFigure.text;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tvar fontSize = childFigure.fontSize;\r\n");
      out.write("\t\t\t\tvar fontColor = childFigure.fontColor;\r\n");
      out.write("\t\t\t\tvar bold = childFigure.bold;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar commandDelete = new draw2d.command.CommandDelete(childFigure);\r\n");
      out.write("\t\t\t\tcommandDelete.execute();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar atomLabel = new AtomLabel({\r\n");
      out.write("\t\t\t\t\ttext: text,\r\n");
      out.write("\t\t\t\t\tfontSize: fontSize,\r\n");
      out.write("\t\t\t\t\tfontColor: fontColor,\r\n");
      out.write("\t\t\t\t\tbold: bold\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tfigure.add(atomLabel, new locator.constructor(figure));\r\n");
      out.write("\t\t\t\tfigure.atomLabel = atomLabel;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 윈도우 사이즈가 변경될 때 호출된다.\r\n");
      out.write("function onResizeWindow() {\r\n");
      out.write("\tif (!g_bResizeProc) {\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tif (g_data.readonly) {\r\n");
      out.write("\t\tcalculateZoom();\r\n");
      out.write("\t\talignFigures();\r\n");
      out.write("\t} else {\r\n");
      out.write("\t\tresetMinimapPosition();\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 줌 사이즈를 계산한다.\r\n");
      out.write("function calculateZoom() {\r\n");
      out.write("\tvar width = $(\"#_atomFlowDesignDivWrapper\").width() - 10;\r\n");
      out.write("\tvar height = $(\"#_atomFlowDesignDivWrapper\").height() - 10;\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#_atomFlowDesignDiv, #_atomFlowDesignDiv>svg\").css({\r\n");
      out.write("\t\twidth: width,\r\n");
      out.write("\t\theight: height\r\n");
      out.write("\t});\r\n");
      out.write("\t$(\"#_atomMinimapDivWrapper\").css(\"transition-duration\", \"0s\");\r\n");
      out.write("\tresetMinimapPosition();\r\n");
      out.write("\trefreshMinimap();\r\n");
      out.write("\tupdateZoom(1, false);\r\n");
      out.write("\t$(\"#_atomMinimapDivWrapper\").css(\"transition-duration\", \"0.4s\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 미니맵 위치와 크기를 조정한다.\r\n");
      out.write("function resetMinimapPosition() {\r\n");
      out.write("\tvar width = $(\"#_atomFlowDesignDiv\").width();\r\n");
      out.write("\tvar height = $(\"#_atomFlowDesignDiv\").height();\r\n");
      out.write("\tresizeElements(width, height);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 라인 종류 버튼 클릭시 호출된다.\r\n");
      out.write("function initLineButtons() {\r\n");
      out.write("\t$(\".line>button\").click(function () {\r\n");
      out.write("\t\t$(\".line>button\").removeClass(\"on\");\r\n");
      out.write("\t\t$(this).addClass(\"on\");\r\n");
      out.write("\t\tvar id = $(this).attr(\"id\");\r\n");
      out.write("\t\tvar router = eval(\"new draw2d.layout.connection.\" + id + \"()\");\r\n");
      out.write("\t\tdraw2d.shape.basic.PolyLine.DEFAULT_ROUTER = router;\r\n");
      out.write("\t\tvar selection = g_canvas.getSelection().all.data;\r\n");
      out.write("\t\tif (selection.length > 0) {\r\n");
      out.write("\t\t\tg_canvas.commandStack.startTransaction();\r\n");
      out.write("\t\t\tg_minimap.commandStack.startTransaction();\r\n");
      out.write("\t\t\tfor (var i = 0; i < selection.length; i++) {\r\n");
      out.write("\t\t\t\tvar figure = selection[i];\r\n");
      out.write("\t\t\t\tif (figure instanceof draw2d.Connection) {\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tvar newAttributes = new Object();\r\n");
      out.write("\t\t\t\t\tnewAttributes.router = router;\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tvar commandAattr = new draw2d.command.CommandAttr(figure, newAttributes);\r\n");
      out.write("\t\t\t\t\tg_canvas.commandStack.execute(commandAattr);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tvar mFigure = g_minimap.getLine(figure.id);\r\n");
      out.write("\t\t\t\t\tvar mCommandAattr = new draw2d.command.CommandAttr(mFigure, newAttributes);\r\n");
      out.write("\t\t\t\t\tg_minimap.commandStack.execute(mCommandAattr);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tg_canvas.commandStack.commitTransaction();\r\n");
      out.write("\t\t\tg_minimap.commandStack.commitTransaction();\r\n");
      out.write("\t\t\tupdateUndoRedoButton();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 캔버스 영역에 드래그한 오브젝트를 드롭시 호출된다.\r\n");
      out.write("function dropObjectProc(ui) {\r\n");
      out.write("\tvar backgroundImage = $(ui.helper).css(\"background-image\");\r\n");
      out.write("\tvar path = backgroundImage.replace(\"url(\\\"\", \"\").replace(\"\\\")\", \"\");\r\n");
      out.write("\tvar idx = path.indexOf(\"/images\");\r\n");
      out.write("\tpath = path.substring(idx, path.length);\r\n");
      out.write("\tvar id = $(ui.helper).attr(\"id\");\r\n");
      out.write("\tvar label = $(ui.helper).find(\"td\").text();\r\n");
      out.write("\tvar canvasOffset = $(\"#_atomFlowDesignDiv\").offset();\r\n");
      out.write("\tvar offset = ui.offset;\r\n");
      out.write("\tvar zoom = g_canvas.zoomFactor;\r\n");
      out.write("\tvar top = Math.round((offset.top - canvasOffset.top) * zoom);\r\n");
      out.write("\tvar left = Math.round((offset.left - canvasOffset.left) * zoom);\r\n");
      out.write("\tvar userData;\r\n");
      out.write("\tif (id.indexOf(\"pkg_\") == 0) {\r\n");
      out.write("\t\tuserData = $(\"#\" + id).data(\"pkg\");\r\n");
      out.write("\t\tvar pkg = userData;\r\n");
      out.write("\t\tpkg.image_x = left;\r\n");
      out.write("\t\tpkg.image_y = top;\r\n");
      out.write("\t\topenPkgModal(pkg, true);\r\n");
      out.write("\t} else if (id.indexOf(\"node_\") == 0) {\r\n");
      out.write("\t\tuserData = $(\"#\" + id).data(\"node\");\r\n");
      out.write("\t\tif (userData.node_name_old == \"emptyNode\" || userData.node_name_old == \"emptyLinkedNode\") {\r\n");
      out.write("\t\t\tuserData = $.extend({}, userData);\r\n");
      out.write("\t\t\tuserData.node_name_old = \"\";\r\n");
      out.write("\t\t\tuserData.node_name = \"\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tuserData.image_x = left;\r\n");
      out.write("\t\tuserData.image_y = top;\r\n");
      out.write("\t\topenNodeModal(userData, true);\r\n");
      out.write("\t} else if (id.indexOf(\"procBase_\") == 0) {\r\n");
      out.write("\t\tuserData = $(\"#\"+id).data(\"procBase\");\r\n");
      out.write("\t\tvar proc = $.extend({}, userData);\r\n");
      out.write("\t\tproc.image_x = left;\r\n");
      out.write("\t\tproc.image_y = top;\r\n");
      out.write("\t\tproc.node_name_old = g_data.svc.node_name_old;\r\n");
      out.write("\t\tproc.svc_id = g_data.svc.svc_id;\r\n");
      out.write("\t\topenProcModal(proc, true);\r\n");
      out.write("\t} else if (id.indexOf(\"proc_\") == 0) {\r\n");
      out.write("\t\tuserData = $(\"#\"+id).data(\"proc\");\r\n");
      out.write("\t\tvar batchJob = new Object();\r\n");
      out.write("\t\tbatchJob.pkg_name = g_data.schedulerGroup.pkg_name;\r\n");
      out.write("\t\tbatchJob.group_name = g_data.schedulerGroup.group_name;\r\n");
      out.write("\t\tbatchJob.proc_no = userData.proc_no;\r\n");
      out.write("\t\tbatchJob.proc_name = userData.proc_name;\r\n");
      out.write("\t\tbatchJob.node_type = userData.node_type;\r\n");
      out.write("\t\tbatchJob.image_x = left;\r\n");
      out.write("\t\tbatchJob.image_y = top;\r\n");
      out.write("\t\topenBatchJobModal(batchJob, true);\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 패키지 모달창을 보여준다.\r\n");
      out.write("function openPkgModal(pkg, bDropped) {\r\n");
      out.write("\t$(\".properties\").remove();\r\n");
      out.write("\tvar param = pkg;\r\n");
      out.write("\tpkg.dropped = bDropped;\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("        url: \"detailPkg\",\r\n");
      out.write("        data: param,\r\n");
      out.write("        type: 'POST',\r\n");
      out.write("        success: function(data) {\r\n");
      out.write("        \t$(\"div.draw\").append(data);\r\n");
      out.write("        \t$(\"#pkgModalDiv\").data(\"pkg\", pkg);\r\n");
      out.write("        },\r\n");
      out.write("        error: function(e) {\r\n");
      out.write("\t\t\tvar error = JSON.parse(e.responseText);\r\n");
      out.write("\t\t\topenAlertModal(error.errorMsg.cause.localizedMessage);\r\n");
      out.write("        },\r\n");
      out.write("        complete: function() {\r\n");
      out.write("        }\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 연결노드 모달창을 보여준다.\r\n");
      out.write("function openLinkedNodeModal(node, bDropped) {\r\n");
      out.write("\topenNodeModal(node, bDropped);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 노드 모달창을 보여준다.\r\n");
      out.write("function openNodeModal(node, bDropped) {\r\n");
      out.write("\t$(\".properties\").remove();\r\n");
      out.write("\tvar param = node;\r\n");
      out.write("\tparam.dropped = bDropped;\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("        url: \"detailNode\",\r\n");
      out.write("        data: param,\r\n");
      out.write("        type: 'POST',\r\n");
      out.write("        async: false,\r\n");
      out.write("        success: function(data) {\r\n");
      out.write("           $(\"div.draw\").append(data);\r\n");
      out.write("           $(\"#nodeModalDiv\").data(\"node\", node);\r\n");
      out.write("        },\r\n");
      out.write("        error: function(e) {\r\n");
      out.write("\t\t\tvar error = JSON.parse(e.responseText);\r\n");
      out.write("\t\t\topenAlertModal(error.errorMsg.cause.localizedMessage);\r\n");
      out.write("        },\r\n");
      out.write("        complete: function() {\r\n");
      out.write("\t\t\t\r\n");
      out.write("        }\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// Network Manager 의 좌측 패키지, 노드, 연결노드의 drag 를 enable, diable 한다.\r\n");
      out.write("// 이미 추가된 패키지, 노드, 연결노드의 drag 를 diable\r\n");
      out.write("// 추가되지 않은 패키지, 노드, 연결노드의 drag 를 enable\r\n");
      out.write("function resetDraggableElementsAttr() {\r\n");
      out.write("\tif (g_data.type != LINE_TYPE_NETWORK || g_data.readonly) {\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\t$(\"#pkgListDiv>div, #nodeListDiv>div, #linkedNodeListDiv>div\").css(\"opacity\", 1);\r\n");
      out.write("\t$(\"#pkgListDiv>div, #nodeListDiv>div, #linkedNodeListDiv>div\").draggable({\r\n");
      out.write("\t\tdisabled: false\r\n");
      out.write("\t});\r\n");
      out.write("\t$(\"#pkgListDiv>div, #nodeListDiv>div, #linkedNodeListDiv>div\").css(\"cursor\", \"move\");\r\n");
      out.write("\tvar figures = g_canvas.figures.data;\r\n");
      out.write("\tfor (var i=0;i<figures.length;i++) {\r\n");
      out.write("\t\tvar figure = figures[i];\r\n");
      out.write("\t\tvar userData = figure.userData;\r\n");
      out.write("\t\tvar elementId;\r\n");
      out.write("\t\tif (figure instanceof AtomPkg) {\r\n");
      out.write("\t\t\telementId = \"pkg_\" + userData.pkg_name.replace(/ /g, \"_\");\r\n");
      out.write("\t\t} else if (figure instanceof AtomNode || figure instanceof AtomLinkedNode) {\r\n");
      out.write("\t\t\telementId = \"node_\" + userData.node_name_old.replace(/ /g, \"_\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t$(\"#\"+elementId).css(\"opacity\", 0.2);\r\n");
      out.write("\t\t$(\"#\"+elementId).draggable({\r\n");
      out.write("\t\t\tdisabled: true\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\t$(\"#\"+elementId).css(\"cursor\", \"default\");\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 라인을 삭제한다.\r\n");
      out.write("function deleteLine(line) {\r\n");
      out.write("\tvar atomLine = g_canvas.getLine(line.image_uuid);\r\n");
      out.write("\tif (atomLine != null) {\r\n");
      out.write("\t\tdeleteFigure(atomLine);\r\n");
      out.write("\t}\r\n");
      out.write("\tcloseModal();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// draw2d 캔버스 영역을 초기화한다.\r\n");
      out.write("function initFlowDesign(selector) {\r\n");
      out.write("\tvar width = $(selector).width();\r\n");
      out.write("\tvar height = $(selector).height();\r\n");
      out.write("\tvar sHtml = \"\";\r\n");
      out.write("\tsHtml += \"<div id=\\\"_atomFlowDesignDivWrapper\\\">\\n\";\r\n");
      out.write("\tsHtml += \"\t<div id=\\\"_atomDroppableDiv\\\" style=\\\"z-index:98;width:800px;height:600px;position:absolute;background:rgba(255,255,255,0.5);display:none;\\\"></div>\\n\";\r\n");
      out.write("\tsHtml += \"\t<div id=\\\"_atomFlowDesignDiv\\\" style=\\\"width:800px;height:600px;\\\"></div>\\n\";\r\n");
      out.write("\tsHtml += \"</div>\\n\";\r\n");
      out.write("\tsHtml += \"<div id=\\\"_atomMinimapDivWrapper\\\" style=\\\"display:none;border:1px solid #9598a6;\\\">\\n\";\r\n");
      out.write("\tsHtml += \"\t<div id=\\\"_atomMinimapDiv\\\" style=\\\"position:absolute;width:800px;height:600px;background-color:#e3e4e6;\\\"></div>\\n\";\r\n");
      out.write("\tsHtml += \"\t<div id=\\\"_atomMinimapAreaDiv\\\" style=\\\"position:absolute;width:200px;height:150px;background-color:rgba(255,255,255,0.25);border:solid 1px #f24444;\\\"></div>\\n\";\r\n");
      out.write("\tsHtml += \"</div>\\n\";\r\n");
      out.write("\t$(selector).append(sHtml);\r\n");
      out.write("\r\n");
      out.write("\t$(\"#_atomDroppableDiv\").droppable({\r\n");
      out.write("\t\tdrop: function(event, ui) {\r\n");
      out.write("\t\t\tdropObjectProc(ui);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tinitLeavePageActions();\r\n");
      out.write("\tinitElements();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 프로세스 모달창을 보여준다.\r\n");
      out.write("var g_bProperties = false;\r\n");
      out.write("function openProcModal(proc, bDropped) {\r\n");
      out.write("\tif (g_bProperties) {\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tg_bProperties = true;\r\n");
      out.write("\t$(\".properties\").remove();\r\n");
      out.write("\tvar param = proc;\r\n");
      out.write("\tparam.dropped = bDropped;\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("        url: \"detailProc\",\r\n");
      out.write("        data: param,\r\n");
      out.write("        type: 'POST',\r\n");
      out.write("        success: function(data) {\r\n");
      out.write("        \t$(\"div.draw\").append(data);\r\n");
      out.write("        \t$(\"#procModalDiv\").data(\"proc\", proc);\r\n");
      out.write("        },\r\n");
      out.write("        error: function(e) {\r\n");
      out.write("\t\t\tvar error = JSON.parse(e.responseText);\r\n");
      out.write("\t\t\topenAlertModal(error.errorMsg.cause.localizedMessage);\r\n");
      out.write("        },\r\n");
      out.write("        complete: function() {\r\n");
      out.write("        \tg_bProperties = false;\r\n");
      out.write("        }\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 배치잡 모달창을 보여준다.\r\n");
      out.write("function openBatchJobModal(batchJob, bDropped) {\r\n");
      out.write("\tif (g_bProperties) {\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tg_bProperties = true;\r\n");
      out.write("\t$(\".properties\").remove();\r\n");
      out.write("\tvar param = batchJob;\r\n");
      out.write("\tparam.dropped = bDropped;\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("        url: \"detailBatchJob\",\r\n");
      out.write("        data: param,\r\n");
      out.write("        type: 'POST',\r\n");
      out.write("        success: function(data) {\r\n");
      out.write("        \t$(\"div.draw\").append(data);\r\n");
      out.write("        \t$(\"#batchJobModalDiv\").data(\"batchJob\", batchJob);\r\n");
      out.write("        },\r\n");
      out.write("        error: function(e) {\r\n");
      out.write("\t\t\tvar error = JSON.parse(e.responseText);\r\n");
      out.write("\t\t\topenAlertModal(error.errorMsg.cause.localizedMessage);\r\n");
      out.write("        },\r\n");
      out.write("        complete: function() {\r\n");
      out.write("        \tg_bProperties = false;\r\n");
      out.write("        }\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// draw2d 오브젝트의 포지션을 체크한다.\r\n");
      out.write("function isValidPosition(x, y, width, height) {\r\n");
      out.write("\tvar canvasWidth = g_canvas.getWidth();\r\n");
      out.write("\tvar canvasHeight = g_canvas.getHeight();\r\n");
      out.write("\tif ((x >= 0) && (x + width <=  canvasWidth) && (y >= 0) && (y + height <= canvasHeight)) {\r\n");
      out.write("\t\treturn true;\r\n");
      out.write("\t}\r\n");
      out.write("\treturn false;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 페이지를 나가는 액션을 취할때 저장하지 않고 나가면 변경 사항을 잃게 된다는 알람 메시지 출력\r\n");
      out.write("function initLeavePageActions() {\r\n");
      out.write("\t// Top Menu\r\n");
      out.write("\t$(\".nav li>a\").each(function() {\r\n");
      out.write("\t\tvar href = $(this).attr(\"href\");\r\n");
      out.write("\t\tif (href != \"#\" && href.indexOf(\"javascript:\") != 0) {\r\n");
      out.write("\t\t\tvar sScript = \"\";\r\n");
      out.write("\t\t\tsScript += \"javascript:if (g_bChanged) {\";\r\n");
      out.write("\t\t\tsScript += \"openConfirmModal(\\\"");
      if (_jspx_meth_spring_005fmessage_005f46(_jspx_page_context))
        return;
      out.write("\\\", \\\"");
      if (_jspx_meth_spring_005fmessage_005f47(_jspx_page_context))
        return;
      out.write("\\\", function() {\";\r\n");
      out.write("\t\t\tsScript += \"movePage(\\\"\"+href+\"\\\");\";\r\n");
      out.write("\t\t\tsScript += \"});\";\r\n");
      out.write("\t\t\tsScript += \"} else {\";\r\n");
      out.write("\t\t\tsScript += \"movePage(\\\"\"+href+\"\\\");\";\r\n");
      out.write("\t\t\tsScript += \"}\";\r\n");
      out.write("\t\t\t$(this).attr(\"href\", sScript);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t// Top My Info, Recent Page\r\n");
      out.write("\t$(\".nav_info li>a, .page_title li>a\").each(function() {\r\n");
      out.write("\t\tvar href = $(this).attr(\"href\");\r\n");
      out.write("\t\tif (href != \"#\") {\r\n");
      out.write("\t\t\tvar sScript = \"\";\r\n");
      out.write("\t\t\tsScript += \"javascript:if (g_bChanged) {\";\r\n");
      out.write("\t\t\tsScript += \"openConfirmModal(\\\"");
      if (_jspx_meth_spring_005fmessage_005f48(_jspx_page_context))
        return;
      out.write("\\\", \\\"");
      if (_jspx_meth_spring_005fmessage_005f49(_jspx_page_context))
        return;
      out.write("\\\", function() {\";\r\n");
      out.write("\t\t\tsScript += href;\r\n");
      out.write("\t\t\tsScript += \"});\";\r\n");
      out.write("\t\t\tsScript += \"} else {\";\r\n");
      out.write("\t\t\tsScript += href;\r\n");
      out.write("\t\t\tsScript += \"}\";\r\n");
      out.write("\t\t\t$(this).attr(\"href\", sScript);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t// Left Menu\r\n");
      out.write("\t$(\"#ml-menu li>a\").each(function() {\r\n");
      out.write("\t\tvar href = $(this).attr(\"href\");\r\n");
      out.write("\t\tif (href != \"#\") {\r\n");
      out.write("\t\t\tvar sScript = \"\";\r\n");
      out.write("\t\t\tsScript += \"javascript:if (g_bChanged) {\";\r\n");
      out.write("\t\t\tsScript += \"openConfirmModal(\\\"");
      if (_jspx_meth_spring_005fmessage_005f50(_jspx_page_context))
        return;
      out.write("\\\", \\\"");
      if (_jspx_meth_spring_005fmessage_005f51(_jspx_page_context))
        return;
      out.write("\\\", function() {\";\r\n");
      out.write("\t\t\tsScript += \"movePage(\\\"\"+href+\"\\\");\";\r\n");
      out.write("\t\t\tsScript += \"});\";\r\n");
      out.write("\t\t\tsScript += \"} else {\";\r\n");
      out.write("\t\t\tsScript += \"movePage(\\\"\"+href+\"\\\");\";\r\n");
      out.write("\t\t\tsScript += \"}\";\r\n");
      out.write("\t\t\t$(this).attr(\"href\", sScript);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 페이지를 이동한다.\r\n");
      out.write("function movePage(sUrl) {\r\n");
      out.write("\t$(\"#_atomTempForm\").remove();\r\n");
      out.write("\tvar sHtml = \"\";\r\n");
      out.write("\tsHtml += \"<form id=\\\"_atomTempForm\\\" action=\\\"\"+sUrl+\"\\\" method=\\\"post\\\">\";\r\n");
      out.write("\tsHtml += \"</form>\";\r\n");
      out.write("\t$(\"body\").append(sHtml);\r\n");
      out.write("\t$(\"#_atomTempForm\").submit();\r\n");
      out.write("}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_spring_005fmessage_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f0 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f0.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f0.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(384,8) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f0.setCode("label.configuration.networkmanager.package.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f0 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f0 = _jspx_th_spring_005fmessage_005f0.doStartTag();
      if (_jspx_th_spring_005fmessage_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f0[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f0.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f0.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f0);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f1 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f1.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f1.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(596,8) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f1.setCode("label.configuration.processmanager.process.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f1 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f1 = _jspx_th_spring_005fmessage_005f1.doStartTag();
      if (_jspx_th_spring_005fmessage_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f1[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f1.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f1.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f1);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f2 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f2.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f2.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(725,181) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f2.setCode("label.configuration.networkmanager.nodemonitoring.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f2 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f2 = _jspx_th_spring_005fmessage_005f2.doStartTag();
      if (_jspx_th_spring_005fmessage_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f2[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f2.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f2.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f2);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f3(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f3 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f3.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f3.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(732,181) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f3.setCode("label.configuration.networkmanager.nodemonitoring.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f3 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f3 = _jspx_th_spring_005fmessage_005f3.doStartTag();
      if (_jspx_th_spring_005fmessage_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f3[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f3.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f3.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f3);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f4(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f4 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f4.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f4.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(736,103) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f4.setCode("label.configuration.networkmanager.takeover.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f4 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f4 = _jspx_th_spring_005fmessage_005f4.doStartTag();
      if (_jspx_th_spring_005fmessage_005f4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f4[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f4.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f4.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f4);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f5(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f5 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f5.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f5.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(737,103) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f5.setCode("label.common.cancel");
    int[] _jspx_push_body_count_spring_005fmessage_005f5 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f5 = _jspx_th_spring_005fmessage_005f5.doStartTag();
      if (_jspx_th_spring_005fmessage_005f5.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f5[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f5.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f5.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f5);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f6(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f6 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f6.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f6.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(740,92) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f6.setCode("label.common.modify");
    int[] _jspx_push_body_count_spring_005fmessage_005f6 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f6 = _jspx_th_spring_005fmessage_005f6.doStartTag();
      if (_jspx_th_spring_005fmessage_005f6.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f6[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f6.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f6.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f6);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f7(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f7 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f7.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f7.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(741,92) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f7.setCode("label.common.delete");
    int[] _jspx_push_body_count_spring_005fmessage_005f7 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f7 = _jspx_th_spring_005fmessage_005f7.doStartTag();
      if (_jspx_th_spring_005fmessage_005f7.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f7[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f7.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f7.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f7);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f8(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f8 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f8.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f8.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(764,13) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f8.setCode("msg.configuration.networkmanager.deletefigure.front");
    int[] _jspx_push_body_count_spring_005fmessage_005f8 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f8 = _jspx_th_spring_005fmessage_005f8.doStartTag();
      if (_jspx_th_spring_005fmessage_005f8.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f8[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f8.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f8.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f8);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f9(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f9 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f9.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f9.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(768,13) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f9.setCode("msg.configuration.networkmanager.deletefigure.back");
    int[] _jspx_push_body_count_spring_005fmessage_005f9 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f9 = _jspx_th_spring_005fmessage_005f9.doStartTag();
      if (_jspx_th_spring_005fmessage_005f9.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f9[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f9.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f9.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f9);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f10(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f10 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f10.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f10.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(769,19) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f10.setCode("msg.configuration.networkmanager.warning.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f10 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f10 = _jspx_th_spring_005fmessage_005f10.doStartTag();
      if (_jspx_th_spring_005fmessage_005f10.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f10[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f10.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f10.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f10);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f11(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f11 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f11.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f11.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(860,8) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f11.setCode("label.configuration.networkmanager.node.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f11 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f11 = _jspx_th_spring_005fmessage_005f11.doStartTag();
      if (_jspx_th_spring_005fmessage_005f11.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f11[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f11.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f11.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f11);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f12(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f12 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f12.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f12.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1008,8) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f12.setCode("label.general.batch.batchjobmanager.batchjob.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f12 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f12 = _jspx_th_spring_005fmessage_005f12.doStartTag();
      if (_jspx_th_spring_005fmessage_005f12.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f12[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f12.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f12.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f12);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f13(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f13 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f13.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f13.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1112,8) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f13.setCode("label.configuration.networkmanager.linkednode.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f13 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f13 = _jspx_th_spring_005fmessage_005f13.doStartTag();
      if (_jspx_th_spring_005fmessage_005f13.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f13[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f13.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f13.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f13);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f14(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f14 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f14.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f14.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1375,28) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f14.setCode("label.configuration.networkmanager.ip.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f14 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f14 = _jspx_th_spring_005fmessage_005f14.doStartTag();
      if (_jspx_th_spring_005fmessage_005f14.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f14[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f14.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f14.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f14);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f15(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f15 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f15.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f15.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1388,57) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f15.setCode("label.monitor.detail");
    int[] _jspx_push_body_count_spring_005fmessage_005f15 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f15 = _jspx_th_spring_005fmessage_005f15.doStartTag();
      if (_jspx_th_spring_005fmessage_005f15.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f15[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f15.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f15.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f15);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f16(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f16 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f16.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f16.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1388,226) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f16.setCode("label.monitor.detail");
    int[] _jspx_push_body_count_spring_005fmessage_005f16 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f16 = _jspx_th_spring_005fmessage_005f16.doStartTag();
      if (_jspx_th_spring_005fmessage_005f16.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f16[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f16.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f16.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f16);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f17(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f17 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f17.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f17.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1411,25) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f17.setCode("label.common.package.name");
    int[] _jspx_push_body_count_spring_005fmessage_005f17 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f17 = _jspx_th_spring_005fmessage_005f17.doStartTag();
      if (_jspx_th_spring_005fmessage_005f17.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f17[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f17.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f17.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f17);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f18(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f18 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f18.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f18.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1415,25) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f18.setCode("label.configuration.networkmanager.numberofprocess.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f18 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f18 = _jspx_th_spring_005fmessage_005f18.doStartTag();
      if (_jspx_th_spring_005fmessage_005f18.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f18[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f18.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f18.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f18);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f19(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f19 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f19.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f19.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1419,25) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f19.setCode("label.configuration.networkmanager.numberofservice.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f19 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f19 = _jspx_th_spring_005fmessage_005f19.doStartTag();
      if (_jspx_th_spring_005fmessage_005f19.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f19[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f19.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f19.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f19);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f20(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f20 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f20.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f20.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1423,25) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f20.setCode("label.configuration.networkmanager.numberoflinkednode.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f20 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f20 = _jspx_th_spring_005fmessage_005f20.doStartTag();
      if (_jspx_th_spring_005fmessage_005f20.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f20[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f20.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f20.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f20);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f21(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f21 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f21.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f21.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1427,25) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f21.setCode("label.configuration.networkmanager.alarmstatus.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f21 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f21 = _jspx_th_spring_005fmessage_005f21.doStartTag();
      if (_jspx_th_spring_005fmessage_005f21.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f21[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f21.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f21.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f21);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f22(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f22 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f22.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f22.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1439,25) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f22.setCode("label.configuration.networkmanager.lastupdatedtime.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f22 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f22 = _jspx_th_spring_005fmessage_005f22.doStartTag();
      if (_jspx_th_spring_005fmessage_005f22.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f22[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f22.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f22.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f22);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f23(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f23 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f23.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f23.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1444,50) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f23.setCode("label.monitor.detail");
    int[] _jspx_push_body_count_spring_005fmessage_005f23 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f23 = _jspx_th_spring_005fmessage_005f23.doStartTag();
      if (_jspx_th_spring_005fmessage_005f23.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f23[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f23.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f23.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f23);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f24(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f24 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f24.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f24.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1444,219) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f24.setCode("label.monitor.detail");
    int[] _jspx_push_body_count_spring_005fmessage_005f24 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f24 = _jspx_th_spring_005fmessage_005f24.doStartTag();
      if (_jspx_th_spring_005fmessage_005f24.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f24[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f24.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f24.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f24);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f25(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f25 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f25.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f25.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1656,21) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f25.setCode("msg.configuration.networkmanager.connection.exist");
    int[] _jspx_push_body_count_spring_005fmessage_005f25 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f25 = _jspx_th_spring_005fmessage_005f25.doStartTag();
      if (_jspx_th_spring_005fmessage_005f25.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f25[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f25.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f25.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f25);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f26(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f26 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f26.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f26.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1946,40) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f26.setCode("msg.configuration.networkmanager.canvaswidth.empty");
    int[] _jspx_push_body_count_spring_005fmessage_005f26 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f26 = _jspx_th_spring_005fmessage_005f26.doStartTag();
      if (_jspx_th_spring_005fmessage_005f26.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f26[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f26.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f26.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f26);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f27(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f27 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f27.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f27.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1952,40) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f27.setCode("msg.configuration.networkmanager.canvaswidth.invalid");
    int[] _jspx_push_body_count_spring_005fmessage_005f27 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f27 = _jspx_th_spring_005fmessage_005f27.doStartTag();
      if (_jspx_th_spring_005fmessage_005f27.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f27[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f27.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f27.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f27);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f28(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f28 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f28.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f28.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1958,40) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f28.setCode("msg.configuration.networkmanager.canvasheight.empty");
    int[] _jspx_push_body_count_spring_005fmessage_005f28 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f28 = _jspx_th_spring_005fmessage_005f28.doStartTag();
      if (_jspx_th_spring_005fmessage_005f28.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f28[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f28.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f28.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f28);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f29(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f29 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f29.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f29.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1964,40) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f29.setCode("msg.configuration.networkmanager.canvasheight.invalid");
    int[] _jspx_push_body_count_spring_005fmessage_005f29 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f29 = _jspx_th_spring_005fmessage_005f29.doStartTag();
      if (_jspx_th_spring_005fmessage_005f29.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f29[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f29.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f29.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f29);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f30(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f30 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f30.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f30.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1986,40) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f30.setCode("msg.configuration.networkmanager.canvaswidth.small");
    int[] _jspx_push_body_count_spring_005fmessage_005f30 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f30 = _jspx_th_spring_005fmessage_005f30.doStartTag();
      if (_jspx_th_spring_005fmessage_005f30.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f30[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f30.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f30.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f30);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f31(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f31 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f31.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f31.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(1992,40) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f31.setCode("msg.configuration.networkmanager.canvasheight.small");
    int[] _jspx_push_body_count_spring_005fmessage_005f31 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f31 = _jspx_th_spring_005fmessage_005f31.doStartTag();
      if (_jspx_th_spring_005fmessage_005f31.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f31[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f31.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f31.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f31);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f32(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f32 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f32.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f32.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(2184,20) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f32.setCode("msg.configuration.networkmanager.warning.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f32 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f32 = _jspx_th_spring_005fmessage_005f32.doStartTag();
      if (_jspx_th_spring_005fmessage_005f32.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f32[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f32.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f32.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f32);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f33(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f33 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f33.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f33.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(2184,94) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f33.setCode("msg.configuration.networkmanager.leave.confirm");
    int[] _jspx_push_body_count_spring_005fmessage_005f33 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f33 = _jspx_th_spring_005fmessage_005f33.doStartTag();
      if (_jspx_th_spring_005fmessage_005f33.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f33[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f33.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f33.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f33);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f34(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f34 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f34.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f34.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(2391,39) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f34.setCode("label.configuration.networkmanager.resizecanvas.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f34 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f34 = _jspx_th_spring_005fmessage_005f34.doStartTag();
      if (_jspx_th_spring_005fmessage_005f34.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f34[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f34.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f34.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f34);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f35(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f35 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f35.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f35.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(2395,22) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f35.setCode("label.configuration.networkmanager.canvaswidth.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f35 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f35 = _jspx_th_spring_005fmessage_005f35.doStartTag();
      if (_jspx_th_spring_005fmessage_005f35.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f35[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f35.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f35.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f35);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f36(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f36 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f36.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f36.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(2396,92) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f36.setCode("label.configuration.networkmanager.canvaswidth.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f36 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f36 = _jspx_th_spring_005fmessage_005f36.doStartTag();
      if (_jspx_th_spring_005fmessage_005f36.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f36[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f36.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f36.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f36);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f37(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f37 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f37.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f37.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(2397,22) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f37.setCode("label.configuration.networkmanager.canvasheight.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f37 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f37 = _jspx_th_spring_005fmessage_005f37.doStartTag();
      if (_jspx_th_spring_005fmessage_005f37.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f37[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f37.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f37.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f37);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f38(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f38 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f38.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f38.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(2398,94) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f38.setCode("label.configuration.networkmanager.canvasheight.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f38 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f38 = _jspx_th_spring_005fmessage_005f38.doStartTag();
      if (_jspx_th_spring_005fmessage_005f38.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f38[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f38.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f38.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f38);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f39(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f39 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f39.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f39.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(2403,74) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f39.setCode("label.common.cancel");
    int[] _jspx_push_body_count_spring_005fmessage_005f39 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f39 = _jspx_th_spring_005fmessage_005f39.doStartTag();
      if (_jspx_th_spring_005fmessage_005f39.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f39[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f39.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f39.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f39);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f40(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f40 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f40.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f40.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(2404,92) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f40.setCode("label.common.ok");
    int[] _jspx_push_body_count_spring_005fmessage_005f40 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f40 = _jspx_th_spring_005fmessage_005f40.doStartTag();
      if (_jspx_th_spring_005fmessage_005f40.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f40[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f40.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f40.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f40);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f41(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f41 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f41.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f41.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(2659,20) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f41.setCode("msg.configuration.networkmanager.lineduplicate.empty");
    int[] _jspx_push_body_count_spring_005fmessage_005f41 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f41 = _jspx_th_spring_005fmessage_005f41.doStartTag();
      if (_jspx_th_spring_005fmessage_005f41.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f41[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f41.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f41.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f41);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f42(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f42 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f42.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f42.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(2771,21) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f42.setCode("msg.configuration.networkmanager.saveflowdesign.success");
    int[] _jspx_push_body_count_spring_005fmessage_005f42 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f42 = _jspx_th_spring_005fmessage_005f42.doStartTag();
      if (_jspx_th_spring_005fmessage_005f42.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f42[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f42.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f42.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f42);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f43(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f43 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f43.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f43.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(2864,20) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f43.setCode("msg.configuration.networkmanager.warning.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f43 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f43 = _jspx_th_spring_005fmessage_005f43.doStartTag();
      if (_jspx_th_spring_005fmessage_005f43.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f43[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f43.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f43.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f43);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f44(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f44 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f44.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f44.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(2864,94) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f44.setCode("msg.configuration.networkmanager.deletefigures.confirm");
    int[] _jspx_push_body_count_spring_005fmessage_005f44 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f44 = _jspx_th_spring_005fmessage_005f44.doStartTag();
      if (_jspx_th_spring_005fmessage_005f44.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f44[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f44.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f44.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f44);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f45(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f45 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f45.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f45.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(2866,18) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f45.setCode("msg.configuration.networkmanager.deletefigures.invalid");
    int[] _jspx_push_body_count_spring_005fmessage_005f45 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f45 = _jspx_th_spring_005fmessage_005f45.doStartTag();
      if (_jspx_th_spring_005fmessage_005f45.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f45[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f45.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f45.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f45);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f46(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f46 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f46.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f46.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(3514,34) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f46.setCode("msg.configuration.networkmanager.warning.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f46 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f46 = _jspx_th_spring_005fmessage_005f46.doStartTag();
      if (_jspx_th_spring_005fmessage_005f46.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f46[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f46.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f46.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f46);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f47(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f47 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f47.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f47.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(3514,110) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f47.setCode("msg.configuration.networkmanager.leave.confirm");
    int[] _jspx_push_body_count_spring_005fmessage_005f47 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f47 = _jspx_th_spring_005fmessage_005f47.doStartTag();
      if (_jspx_th_spring_005fmessage_005f47.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f47[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f47.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f47.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f47);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f48(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f48 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f48.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f48.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(3530,34) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f48.setCode("msg.configuration.networkmanager.warning.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f48 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f48 = _jspx_th_spring_005fmessage_005f48.doStartTag();
      if (_jspx_th_spring_005fmessage_005f48.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f48[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f48.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f48.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f48);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f49(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f49 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f49.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f49.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(3530,110) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f49.setCode("msg.configuration.networkmanager.leave.confirm");
    int[] _jspx_push_body_count_spring_005fmessage_005f49 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f49 = _jspx_th_spring_005fmessage_005f49.doStartTag();
      if (_jspx_th_spring_005fmessage_005f49.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f49[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f49.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f49.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f49);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f50(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f50 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f50.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f50.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(3546,34) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f50.setCode("msg.configuration.networkmanager.warning.text");
    int[] _jspx_push_body_count_spring_005fmessage_005f50 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f50 = _jspx_th_spring_005fmessage_005f50.doStartTag();
      if (_jspx_th_spring_005fmessage_005f50.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f50[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f50.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f50.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f50);
    }
    return false;
  }

  private boolean _jspx_meth_spring_005fmessage_005f51(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  spring:message
    org.springframework.web.servlet.tags.MessageTag _jspx_th_spring_005fmessage_005f51 = (org.springframework.web.servlet.tags.MessageTag) _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.get(org.springframework.web.servlet.tags.MessageTag.class);
    _jspx_th_spring_005fmessage_005f51.setPageContext(_jspx_page_context);
    _jspx_th_spring_005fmessage_005f51.setParent(null);
    // /WEB-INF/views/atom/config/networkmanager/flowdesign.jsp(3546,110) name = code type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
    _jspx_th_spring_005fmessage_005f51.setCode("msg.configuration.networkmanager.leave.confirm");
    int[] _jspx_push_body_count_spring_005fmessage_005f51 = new int[] { 0 };
    try {
      int _jspx_eval_spring_005fmessage_005f51 = _jspx_th_spring_005fmessage_005f51.doStartTag();
      if (_jspx_th_spring_005fmessage_005f51.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } catch (java.lang.Throwable _jspx_exception) {
      while (_jspx_push_body_count_spring_005fmessage_005f51[0]-- > 0)
        out = _jspx_page_context.popBody();
      _jspx_th_spring_005fmessage_005f51.doCatch(_jspx_exception);
    } finally {
      _jspx_th_spring_005fmessage_005f51.doFinally();
      _005fjspx_005ftagPool_005fspring_005fmessage_0026_005fcode_005fnobody.reuse(_jspx_th_spring_005fmessage_005f51);
    }
    return false;
  }
}
